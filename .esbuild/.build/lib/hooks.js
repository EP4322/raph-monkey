"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function")
      throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn)
      context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access)
      context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done)
        throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0)
        continue;
      if (result === null || typeof result !== "object")
        throw new TypeError("Object expected");
      if (_ = accept(result.get))
        descriptor.get = _;
      if (_ = accept(result.set))
        descriptor.set = _;
      if (_ = accept(result.init))
        initializers.push(_);
    } else if (_ = accept(result)) {
      if (kind === "field")
        initializers.push(_);
      else
        descriptor[key] = _;
    }
  }
  if (target)
    Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol")
    name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
var extendStatics, __assign, __createBinding, __setModuleDefault;
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.js"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
  }
});

// node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js
var require_booleanSelector = __commonJS({
  "node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.booleanSelector = exports2.SelectorType = void 0;
    var SelectorType;
    (function(SelectorType2) {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
    })(SelectorType = exports2.SelectorType || (exports2.SelectorType = {}));
    var booleanSelector = (obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    };
    exports2.booleanSelector = booleanSelector;
  }
});

// node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  "node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_booleanSelector(), exports2);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var require_NodeUseDualstackEndpointConfigOptions = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = exports2.DEFAULT_USE_DUALSTACK_ENDPOINT = exports2.CONFIG_USE_DUALSTACK_ENDPOINT = exports2.ENV_USE_DUALSTACK_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs();
    exports2.ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    exports2.CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    exports2.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports2.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports2.ENV_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports2.CONFIG_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var require_NodeUseFipsEndpointConfigOptions = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = exports2.DEFAULT_USE_FIPS_ENDPOINT = exports2.CONFIG_USE_FIPS_ENDPOINT = exports2.ENV_USE_FIPS_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs();
    exports2.ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    exports2.CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    exports2.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports2.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports2.ENV_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports2.CONFIG_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js
var require_normalizeProvider = __commonJS({
  "node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.normalizeProvider = void 0;
    var normalizeProvider = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
    exports2.normalizeProvider = normalizeProvider;
  }
});

// node_modules/@aws-sdk/util-middleware/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  "node_modules/@aws-sdk/util-middleware/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_normalizeProvider(), exports2);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js
var require_resolveCustomEndpointsConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs2();
    var resolveCustomEndpointsConfig = (input) => {
      var _a, _b;
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false)
      };
    };
    exports2.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js
var require_getEndpointFromRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } = (_a = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) !== null && _a !== void 0 ? _a : {};
      if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
      }
      return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
    };
    exports2.getEndpointFromRegion = getEndpointFromRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js
var require_resolveEndpointsConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs2();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion();
    var resolveEndpointsConfig = (input) => {
      var _a, _b;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)((_a = input.useDualstackEndpoint) !== null && _a !== void 0 ? _a : false);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: (_b = input.tls) !== null && _b !== void 0 ? _b : true,
        endpoint: endpoint ? (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => (0, getEndpointFromRegion_1.getEndpointFromRegion)({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint
      };
    };
    exports2.resolveEndpointsConfig = resolveEndpointsConfig;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js
var require_endpointsConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NodeUseDualstackEndpointConfigOptions(), exports2);
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions(), exports2);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig(), exports2);
    tslib_1.__exportStar(require_resolveEndpointsConfig(), exports2);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js
var require_config = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_REGION_CONFIG_FILE_OPTIONS = exports2.NODE_REGION_CONFIG_OPTIONS = exports2.REGION_INI_NAME = exports2.REGION_ENV_NAME = void 0;
    exports2.REGION_ENV_NAME = "AWS_REGION";
    exports2.REGION_INI_NAME = "region";
    exports2.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports2.REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    exports2.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js
var require_isFipsRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isFipsRegion = void 0;
    var isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
    exports2.isFipsRegion = isFipsRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js
var require_getRealRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion();
    var getRealRegion = (region) => (0, isFipsRegion_1.isFipsRegion)(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
    exports2.getRealRegion = getRealRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js
var require_resolveRegionConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion();
    var isFipsRegion_1 = require_isFipsRegion();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === "string") {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      };
    };
    exports2.resolveRegionConfig = resolveRegionConfig;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js
var require_regionConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_config(), exports2);
    tslib_1.__exportStar(require_resolveRegionConfig(), exports2);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js
var require_PartitionHash = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js
var require_RegionHash = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js
var require_getHostnameFromVariants = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))) === null || _a === void 0 ? void 0 : _a.hostname;
    };
    exports2.getHostnameFromVariants = getHostnameFromVariants;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js
var require_getResolvedHostname = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResolvedHostname = void 0;
    var getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0;
    exports2.getResolvedHostname = getResolvedHostname;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js
var require_getResolvedPartition = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResolvedPartition = void 0;
    var getResolvedPartition = (region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) !== null && _a !== void 0 ? _a : "aws";
    };
    exports2.getResolvedPartition = getResolvedPartition;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js
var require_getResolvedSigningRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports2.getResolvedSigningRegion = getResolvedSigningRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js
var require_getRegionInfo = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants();
    var getResolvedHostname_1 = require_getResolvedHostname();
    var getResolvedPartition_1 = require_getResolvedPartition();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion();
    var getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, { partitionHash });
      const resolvedRegion = region in regionHash ? region : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null && _b !== void 0 ? _b : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants, hostnameOptions);
      const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, { regionHostname, partitionHostname });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
      });
      return {
        partition,
        signingService,
        hostname,
        ...signingRegion && { signingRegion },
        ...((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
          signingService: regionHash[resolvedRegion].signingService
        }
      };
    };
    exports2.getRegionInfo = getRegionInfo;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js
var require_regionInfo = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_PartitionHash(), exports2);
    tslib_1.__exportStar(require_RegionHash(), exports2);
    tslib_1.__exportStar(require_getRegionInfo(), exports2);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_endpointsConfig(), exports2);
    tslib_1.__exportStar(require_regionConfig(), exports2);
    tslib_1.__exportStar(require_regionInfo(), exports2);
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/FieldPosition.js
var require_FieldPosition = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/FieldPosition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FieldPosition = void 0;
    var FieldPosition;
    (function(FieldPosition2) {
      FieldPosition2[FieldPosition2["HEADER"] = 0] = "HEADER";
      FieldPosition2[FieldPosition2["TRAILER"] = 1] = "TRAILER";
    })(FieldPosition = exports2.FieldPosition || (exports2.FieldPosition = {}));
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/Field.js
var require_Field = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/Field.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Field = void 0;
    var FieldPosition_1 = require_FieldPosition();
    var Field = class {
      constructor({ name, kind = FieldPosition_1.FieldPosition.HEADER, values = [] }) {
        this.name = name;
        this.kind = kind;
        this.values = values;
      }
      add(value) {
        this.values.push(value);
      }
      set(values) {
        this.values = values;
      }
      remove(value) {
        this.values = this.values.filter((v) => v !== value);
      }
      toString() {
        return this.values.map((v) => v.includes(",") || v.includes(" ") ? `"${v}"` : v).join(", ");
      }
      get() {
        return this.values;
      }
    };
    exports2.Field = Field;
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/Fields.js
var require_Fields = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/Fields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Fields = void 0;
    var Fields = class {
      constructor({ fields = [], encoding = "utf-8" }) {
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
      }
      setField(field) {
        this.entries[field.name.toLowerCase()] = field;
      }
      getField(name) {
        return this.entries[name.toLowerCase()];
      }
      removeField(name) {
        delete this.entries[name.toLowerCase()];
      }
      getByType(kind) {
        return Object.values(this.entries).filter((field) => field.kind === kind);
      }
    };
    exports2.Fields = Fields;
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpRequest = void 0;
    var HttpRequest = class {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
      }
      static isInstance(request) {
        if (!request)
          return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        const cloned = new HttpRequest({
          ...this,
          headers: { ...this.headers }
        });
        if (cloned.query)
          cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports2.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param
        };
      }, {});
    }
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
    exports2.HttpResponse = HttpResponse;
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports2.isValidHostname = isValidHostname;
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Field(), exports2);
    tslib_1.__exportStar(require_FieldPosition(), exports2);
    tslib_1.__exportStar(require_Fields(), exports2);
    tslib_1.__exportStar(require_httpHandler(), exports2);
    tslib_1.__exportStar(require_httpRequest(), exports2);
    tslib_1.__exportStar(require_httpResponse(), exports2);
    tslib_1.__exportStar(require_isValidHostname(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  "node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getContentLengthPlugin = exports2.contentLengthMiddlewareOptions = exports2.contentLengthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var CONTENT_LENGTH_HEADER = "content-length";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length)
              };
            } catch (error) {
            }
          }
        }
        return next({
          ...args,
          request
        });
      };
    }
    exports2.contentLengthMiddleware = contentLengthMiddleware;
    exports2.contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports2.contentLengthMiddlewareOptions);
      }
    });
    exports2.getContentLengthPlugin = getContentLengthPlugin;
  }
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/s3.js
var require_s3 = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/s3.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isArnBucketName = exports2.isDnsCompatibleBucketName = exports2.S3_HOSTNAME_PATTERN = exports2.DOT_PATTERN = exports2.resolveParamsForS3 = void 0;
    var resolveParamsForS3 = async (endpointParams) => {
      const bucket = (endpointParams === null || endpointParams === void 0 ? void 0 : endpointParams.Bucket) || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if ((0, exports2.isArnBucketName)(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!(0, exports2.isDnsCompatibleBucketName)(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    };
    exports2.resolveParamsForS3 = resolveParamsForS3;
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    exports2.DOT_PATTERN = /\./;
    exports2.S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
    var isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
    exports2.isDnsCompatibleBucketName = isDnsCompatibleBucketName;
    var isArnBucketName = (bucketName) => {
      const [arn, partition, service, region, account, typeOrId] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = [arn, partition, service, account, typeOrId].filter(Boolean).length === 5;
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return arn === "arn" && !!partition && !!service && !!account && !!typeOrId;
    };
    exports2.isArnBucketName = isArnBucketName;
  }
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/index.js
var require_service_customizations = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_s3(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js
var require_createConfigValueProvider = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createConfigValueProvider = void 0;
    var createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {
      const configProvider = async () => {
        var _a;
        const configValue = (_a = config[configKey]) !== null && _a !== void 0 ? _a : config[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      };
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname, port, path } = endpoint;
              return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    };
    exports2.createConfigValueProvider = createConfigValueProvider;
  }
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js
var require_getEndpointFromInstructions = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveParams = exports2.getEndpointFromInstructions = void 0;
    var service_customizations_1 = require_service_customizations();
    var createConfigValueProvider_1 = require_createConfigValueProvider();
    var getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {
      const endpointParams = await (0, exports2.resolveParams)(commandInput, instructionsSupplier, clientConfig);
      if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    };
    exports2.getEndpointFromInstructions = getEndpointFromInstructions;
    var resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {
      var _a;
      const endpointParams = {};
      const instructions = ((_a = instructionsSupplier === null || instructionsSupplier === void 0 ? void 0 : instructionsSupplier.getEndpointParameterInstructions) === null || _a === void 0 ? void 0 : _a.call(instructionsSupplier)) || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = await (0, createConfigValueProvider_1.createConfigValueProvider)(instruction.name, name, clientConfig)();
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await (0, service_customizations_1.resolveParamsForS3)(endpointParams);
      }
      return endpointParams;
    };
    exports2.resolveParams = resolveParams;
  }
});

// node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  "node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, "");
      if (querystring) {
        for (const pair of querystring.split("&")) {
          let [key, value = null] = pair.split("=");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports2.parseQueryString = parseQueryString;
  }
});

// node_modules/@aws-sdk/url-parser/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  "node_modules/@aws-sdk/url-parser/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs6();
    var parseUrl = (url) => {
      if (typeof url === "string") {
        return (0, exports2.parseUrl)(new URL(url));
      }
      const { hostname, pathname, port, protocol, search } = url;
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
    exports2.parseUrl = parseUrl;
  }
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js
var require_toEndpointV1 = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toEndpointV1 = void 0;
    var url_parser_1 = require_dist_cjs7();
    var toEndpointV1 = (endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return (0, url_parser_1.parseUrl)(endpoint.url);
        }
        return endpoint;
      }
      return (0, url_parser_1.parseUrl)(endpoint);
    };
    exports2.toEndpointV1 = toEndpointV1;
  }
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/index.js
var require_adaptors = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getEndpointFromInstructions(), exports2);
    tslib_1.__exportStar(require_toEndpointV1(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/endpointMiddleware.js
var require_endpointMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint/dist-cjs/endpointMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.endpointMiddleware = void 0;
    var getEndpointFromInstructions_1 = require_getEndpointFromInstructions();
    var endpointMiddleware = ({ config, instructions }) => {
      return (next, context) => async (args) => {
        var _a, _b;
        const endpoint = await (0, getEndpointFromInstructions_1.getEndpointFromInstructions)(args.input, {
          getEndpointParameterInstructions() {
            return instructions;
          }
        }, { ...config }, context);
        context.endpointV2 = endpoint;
        context.authSchemes = (_a = endpoint.properties) === null || _a === void 0 ? void 0 : _a.authSchemes;
        const authScheme = (_b = context.authSchemes) === null || _b === void 0 ? void 0 : _b[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
        }
        return next({
          ...args
        });
      };
    };
    exports2.endpointMiddleware = endpointMiddleware;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js
var require_deserializerMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deserializerMiddleware = void 0;
    var deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error) {
        Object.defineProperty(error, "$response", {
          value: response
        });
        throw error;
      }
    };
    exports2.deserializerMiddleware = deserializerMiddleware;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js
var require_serializerMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializerMiddleware = void 0;
    var serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      var _a;
      const endpoint = ((_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.url) && options.urlParser ? async () => options.urlParser(context.endpointV2.url) : options.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request = await serializer(args.input, { ...options, endpoint });
      return next({
        ...args,
        request
      });
    };
    exports2.serializerMiddleware = serializerMiddleware;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js
var require_serdePlugin = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSerdePlugin = exports2.serializerMiddlewareOption = exports2.deserializerMiddlewareOption = void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware();
    var serializerMiddleware_1 = require_serializerMiddleware();
    exports2.deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    exports2.serializerMiddlewareOption = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add((0, deserializerMiddleware_1.deserializerMiddleware)(config, deserializer), exports2.deserializerMiddlewareOption);
          commandStack.add((0, serializerMiddleware_1.serializerMiddleware)(config, serializer), exports2.serializerMiddlewareOption);
        }
      };
    }
    exports2.getSerdePlugin = getSerdePlugin;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_deserializerMiddleware(), exports2);
    tslib_1.__exportStar(require_serdePlugin(), exports2);
    tslib_1.__exportStar(require_serializerMiddleware(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/getEndpointPlugin.js
var require_getEndpointPlugin = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint/dist-cjs/getEndpointPlugin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointPlugin = exports2.endpointMiddlewareOptions = void 0;
    var middleware_serde_1 = require_dist_cjs8();
    var endpointMiddleware_1 = require_endpointMiddleware();
    exports2.endpointMiddlewareOptions = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: middleware_serde_1.serializerMiddlewareOption.name
    };
    var getEndpointPlugin = (config, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, endpointMiddleware_1.endpointMiddleware)({
          config,
          instructions
        }), exports2.endpointMiddlewareOptions);
      }
    });
    exports2.getEndpointPlugin = getEndpointPlugin;
  }
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/resolveEndpointConfig.js
var require_resolveEndpointConfig = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint/dist-cjs/resolveEndpointConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEndpointConfig = void 0;
    var util_middleware_1 = require_dist_cjs2();
    var toEndpointV1_1 = require_toEndpointV1();
    var resolveEndpointConfig = (input) => {
      var _a, _b, _c;
      const tls = (_a = input.tls) !== null && _a !== void 0 ? _a : true;
      const { endpoint } = input;
      const customEndpointProvider = endpoint != null ? async () => (0, toEndpointV1_1.toEndpointV1)(await (0, util_middleware_1.normalizeProvider)(endpoint)()) : void 0;
      const isCustomEndpoint = !!endpoint;
      return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false),
        useFipsEndpoint: (0, util_middleware_1.normalizeProvider)((_c = input.useFipsEndpoint) !== null && _c !== void 0 ? _c : false)
      };
    };
    exports2.resolveEndpointConfig = resolveEndpointConfig;
  }
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/types.js
var require_types = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_adaptors(), exports2);
    tslib_1.__exportStar(require_endpointMiddleware(), exports2);
    tslib_1.__exportStar(require_getEndpointPlugin(), exports2);
    tslib_1.__exportStar(require_resolveEndpointConfig(), exports2);
    tslib_1.__exportStar(require_types(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  "node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHostHeaderPlugin = exports2.hostHeaderMiddlewareOptions = exports2.hostHeaderMiddleware = exports2.resolveHostHeaderConfig = void 0;
    var protocol_http_1 = require_dist_cjs4();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports2.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = "";
      } else if (!request.headers["host"]) {
        let host = request.hostname;
        if (request.port != null)
          host += `:${request.port}`;
        request.headers["host"] = host;
      }
      return next(args);
    };
    exports2.hostHeaderMiddleware = hostHeaderMiddleware;
    exports2.hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.hostHeaderMiddleware)(options), exports2.hostHeaderMiddlewareOptions);
      }
    });
    exports2.getHostHeaderPlugin = getHostHeaderPlugin;
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js
var require_loggerMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getLoggerPlugin = exports2.loggerMiddlewareOptions = exports2.loggerMiddleware = void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      var _a, _b;
      try {
        const response = await next(args);
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog !== null && overrideInputFilterSensitiveLog !== void 0 ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog !== null && overrideOutputFilterSensitiveLog !== void 0 ? overrideOutputFilterSensitiveLog : context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response.output;
        (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
        return response;
      } catch (error) {
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog !== null && overrideInputFilterSensitiveLog !== void 0 ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
        (_b = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          error,
          metadata: error.$metadata
        });
        throw error;
      }
    };
    exports2.loggerMiddleware = loggerMiddleware;
    exports2.loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.loggerMiddleware)(), exports2.loggerMiddlewareOptions);
      }
    });
    exports2.getLoggerPlugin = getLoggerPlugin;
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  "node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_loggerMiddleware(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  "node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRecursionDetectionPlugin = exports2.addRecursionDetectionMiddlewareOptions = exports2.recursionDetectionMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    var recursionDetectionMiddleware = (options) => (next) => async (args) => {
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = (str) => typeof str === "string" && str.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request
      });
    };
    exports2.recursionDetectionMiddleware = recursionDetectionMiddleware;
    exports2.addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    var getRecursionDetectionPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.recursionDetectionMiddleware)(options), exports2.addRecursionDetectionMiddlewareOptions);
      }
    });
    exports2.getRecursionDetectionPlugin = getRecursionDetectionPlugin;
  }
});

// node_modules/@aws-sdk/util-retry/dist-cjs/config.js
var require_config2 = __commonJS({
  "node_modules/@aws-sdk/util-retry/dist-cjs/config.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DEFAULT_RETRY_MODE = exports2.DEFAULT_MAX_ATTEMPTS = exports2.RETRY_MODES = void 0;
    var RETRY_MODES;
    (function(RETRY_MODES2) {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES = exports2.RETRY_MODES || (exports2.RETRY_MODES = {}));
    exports2.DEFAULT_MAX_ATTEMPTS = 3;
    exports2.DEFAULT_RETRY_MODE = "STANDARD";
  }
});

// node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js
var require_constants = __commonJS({
  "node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODEJS_TIMEOUT_ERROR_CODES = exports2.TRANSIENT_ERROR_STATUS_CODES = exports2.TRANSIENT_ERROR_CODES = exports2.THROTTLING_ERROR_CODES = exports2.CLOCK_SKEW_ERROR_CODES = void 0;
    exports2.CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    exports2.THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    exports2.TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    exports2.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    exports2.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

// node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  "node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isServerError = exports2.isTransientError = exports2.isThrottlingError = exports2.isClockSkewError = exports2.isRetryableByTrait = void 0;
    var constants_1 = require_constants();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports2.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports2.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
    };
    exports2.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) || constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes((error === null || error === void 0 ? void 0 : error.code) || "") || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
    };
    exports2.isTransientError = isTransientError;
    var isServerError = (error) => {
      var _a;
      if (((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) !== void 0) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !(0, exports2.isTransientError)(error)) {
          return true;
        }
        return false;
      }
      return false;
    };
    exports2.isServerError = isServerError;
  }
});

// node_modules/@aws-sdk/util-retry/dist-cjs/DefaultRateLimiter.js
var require_DefaultRateLimiter = __commonJS({
  "node_modules/@aws-sdk/util-retry/dist-cjs/DefaultRateLimiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs13();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;
        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;
        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;
        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports2.DefaultRateLimiter = DefaultRateLimiter;
  }
});

// node_modules/@aws-sdk/util-retry/dist-cjs/constants.js
var require_constants2 = __commonJS({
  "node_modules/@aws-sdk/util-retry/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.REQUEST_HEADER = exports2.INVOCATION_ID_HEADER = exports2.NO_RETRY_INCREMENT = exports2.TIMEOUT_RETRY_COST = exports2.RETRY_COST = exports2.INITIAL_RETRY_TOKENS = exports2.THROTTLING_RETRY_DELAY_BASE = exports2.MAXIMUM_RETRY_DELAY = exports2.DEFAULT_RETRY_DELAY_BASE = void 0;
    exports2.DEFAULT_RETRY_DELAY_BASE = 100;
    exports2.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports2.THROTTLING_RETRY_DELAY_BASE = 500;
    exports2.INITIAL_RETRY_TOKENS = 500;
    exports2.RETRY_COST = 5;
    exports2.TIMEOUT_RETRY_COST = 10;
    exports2.NO_RETRY_INCREMENT = 1;
    exports2.INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    exports2.REQUEST_HEADER = "amz-sdk-request";
  }
});

// node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryBackoffStrategy.js
var require_defaultRetryBackoffStrategy = __commonJS({
  "node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryBackoffStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDefaultRetryBackoffStrategy = void 0;
    var constants_1 = require_constants2();
    var getDefaultRetryBackoffStrategy = () => {
      let delayBase = constants_1.DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = (attempts) => {
        return Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
      };
      const setDelayBase = (delay) => {
        delayBase = delay;
      };
      return {
        computeNextBackoffDelay,
        setDelayBase
      };
    };
    exports2.getDefaultRetryBackoffStrategy = getDefaultRetryBackoffStrategy;
  }
});

// node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryToken.js
var require_defaultRetryToken = __commonJS({
  "node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDefaultRetryToken = void 0;
    var constants_1 = require_constants2();
    var defaultRetryBackoffStrategy_1 = require_defaultRetryBackoffStrategy();
    var getDefaultRetryToken = (initialRetryTokens, initialRetryDelay, initialRetryCount, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const retryCost = (_a = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _a !== void 0 ? _a : constants_1.RETRY_COST;
      const timeoutRetryCost = (_b = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _b !== void 0 ? _b : constants_1.TIMEOUT_RETRY_COST;
      const retryBackoffStrategy = (_c = options === null || options === void 0 ? void 0 : options.retryBackoffStrategy) !== null && _c !== void 0 ? _c : (0, defaultRetryBackoffStrategy_1.getDefaultRetryBackoffStrategy)();
      let availableCapacity = initialRetryTokens;
      let retryDelay = Math.min(constants_1.MAXIMUM_RETRY_DELAY, initialRetryDelay);
      let lastRetryCost = void 0;
      let retryCount = initialRetryCount !== null && initialRetryCount !== void 0 ? initialRetryCount : 0;
      const getCapacityAmount = (errorType) => errorType === "TRANSIENT" ? timeoutRetryCost : retryCost;
      const getRetryCount = () => retryCount;
      const getRetryDelay = () => retryDelay;
      const getLastRetryCost = () => lastRetryCost;
      const hasRetryTokens = (errorType) => getCapacityAmount(errorType) <= availableCapacity;
      const getRetryTokenCount = (errorInfo) => {
        const errorType = errorInfo.errorType;
        if (!hasRetryTokens(errorType)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(errorType);
        const delayBase = errorType === "THROTTLING" ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE;
        retryBackoffStrategy.setDelayBase(delayBase);
        const delayFromErrorType = retryBackoffStrategy.computeNextBackoffDelay(retryCount);
        if (errorInfo.retryAfterHint) {
          const delayFromRetryAfterHint = errorInfo.retryAfterHint.getTime() - Date.now();
          retryDelay = Math.max(delayFromRetryAfterHint || 0, delayFromErrorType);
        } else {
          retryDelay = delayFromErrorType;
        }
        retryCount++;
        lastRetryCost = capacityAmount;
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (releaseAmount) => {
        availableCapacity += releaseAmount !== null && releaseAmount !== void 0 ? releaseAmount : constants_1.NO_RETRY_INCREMENT;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return {
        getRetryCount,
        getRetryDelay,
        getLastRetryCost,
        hasRetryTokens,
        getRetryTokenCount,
        releaseRetryTokens
      };
    };
    exports2.getDefaultRetryToken = getDefaultRetryToken;
  }
});

// node_modules/@aws-sdk/util-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy = __commonJS({
  "node_modules/@aws-sdk/util-retry/dist-cjs/StandardRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StandardRetryStrategy = void 0;
    var config_1 = require_config2();
    var constants_1 = require_constants2();
    var defaultRetryToken_1 = require_defaultRetryToken();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.retryToken = (0, defaultRetryToken_1.getDefaultRetryToken)(constants_1.INITIAL_RETRY_TOKENS, constants_1.DEFAULT_RETRY_DELAY_BASE);
        this.maxAttemptsProvider = maxAttemptsProvider;
      }
      async acquireInitialRetryToken(retryTokenScope) {
        return this.retryToken;
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(tokenToRenew, errorInfo, maxAttempts)) {
          tokenToRenew.getRetryTokenCount(errorInfo);
          return tokenToRenew;
        }
        throw new Error("No retry token available");
      }
      recordSuccess(token) {
        this.retryToken.releaseRetryTokens(token.getLastRetryCost());
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          return await this.maxAttemptsProvider();
        } catch (error) {
          console.warn(`Max attempts provider could not resolve. Using default of ${config_1.DEFAULT_MAX_ATTEMPTS}`);
          return config_1.DEFAULT_MAX_ATTEMPTS;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount();
        return attempts < maxAttempts && tokenToRenew.hasRetryTokens(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
      }
      isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
      }
    };
    exports2.StandardRetryStrategy = StandardRetryStrategy;
  }
});

// node_modules/@aws-sdk/util-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy = __commonJS({
  "node_modules/@aws-sdk/util-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config2();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var AdaptiveRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
        const { rateLimiter } = options !== null && options !== void 0 ? options : {};
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy_1.StandardRetryStrategy(maxAttemptsProvider);
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
    exports2.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

// node_modules/@aws-sdk/util-retry/dist-cjs/types.js
var require_types2 = __commonJS({
  "node_modules/@aws-sdk/util-retry/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/util-retry/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  "node_modules/@aws-sdk/util-retry/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy(), exports2);
    tslib_1.__exportStar(require_DefaultRateLimiter(), exports2);
    tslib_1.__exportStar(require_StandardRetryStrategy(), exports2);
    tslib_1.__exportStar(require_config2(), exports2);
    tslib_1.__exportStar(require_constants2(), exports2);
    tslib_1.__exportStar(require_types2(), exports2);
  }
});

// node_modules/uuid/dist/esm-node/rng.js
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    import_crypto.default.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var import_crypto, rnds8Pool, poolPtr;
var init_rng = __esm({
  "node_modules/uuid/dist/esm-node/rng.js"() {
    import_crypto = __toESM(require("crypto"));
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});

// node_modules/uuid/dist/esm-node/regex.js
var regex_default;
var init_regex = __esm({
  "node_modules/uuid/dist/esm-node/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// node_modules/uuid/dist/esm-node/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "node_modules/uuid/dist/esm-node/validate.js"() {
    init_regex();
    validate_default = validate;
  }
});

// node_modules/uuid/dist/esm-node/stringify.js
function stringify(arr, offset = 0) {
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  "node_modules/uuid/dist/esm-node/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    stringify_default = stringify;
  }
});

// node_modules/uuid/dist/esm-node/v1.js
function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "node_modules/uuid/dist/esm-node/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

// node_modules/uuid/dist/esm-node/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "node_modules/uuid/dist/esm-node/parse.js"() {
    init_validate();
    parse_default = parse;
  }
});

// node_modules/uuid/dist/esm-node/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "node_modules/uuid/dist/esm-node/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// node_modules/uuid/dist/esm-node/md5.js
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto2.default.createHash("md5").update(bytes).digest();
}
var import_crypto2, md5_default;
var init_md5 = __esm({
  "node_modules/uuid/dist/esm-node/md5.js"() {
    import_crypto2 = __toESM(require("crypto"));
    md5_default = md5;
  }
});

// node_modules/uuid/dist/esm-node/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "node_modules/uuid/dist/esm-node/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
    v3_default = v3;
  }
});

// node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "node_modules/uuid/dist/esm-node/v4.js"() {
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// node_modules/uuid/dist/esm-node/sha1.js
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto3.default.createHash("sha1").update(bytes).digest();
}
var import_crypto3, sha1_default;
var init_sha1 = __esm({
  "node_modules/uuid/dist/esm-node/sha1.js"() {
    import_crypto3 = __toESM(require("crypto"));
    sha1_default = sha1;
  }
});

// node_modules/uuid/dist/esm-node/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "node_modules/uuid/dist/esm-node/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// node_modules/uuid/dist/esm-node/nil.js
var nil_default;
var init_nil = __esm({
  "node_modules/uuid/dist/esm-node/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// node_modules/uuid/dist/esm-node/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  "node_modules/uuid/dist/esm-node/version.js"() {
    init_validate();
    version_default = version;
  }
});

// node_modules/uuid/dist/esm-node/index.js
var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_node = __esm({
  "node_modules/uuid/dist/esm-node/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js
var require_defaultRetryQuota = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDefaultRetryQuota = void 0;
    var util_retry_1 = require_dist_cjs14();
    var getDefaultRetryQuota = (initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : util_retry_1.NO_RETRY_INCREMENT;
      const retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : util_retry_1.RETRY_COST;
      const timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : util_retry_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = (error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost;
      const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
      const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
      });
    };
    exports2.getDefaultRetryQuota = getDefaultRetryQuota;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js
var require_delayDecider = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultDelayDecider = void 0;
    var util_retry_1 = require_dist_cjs14();
    var defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(util_retry_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    exports2.defaultDelayDecider = defaultDelayDecider;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js
var require_retryDecider = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs13();
    var defaultRetryDecider = (error) => {
      if (!error) {
        return false;
      }
      return (0, service_error_classification_1.isRetryableByTrait)(error) || (0, service_error_classification_1.isClockSkewError)(error) || (0, service_error_classification_1.isThrottlingError)(error) || (0, service_error_classification_1.isTransientError)(error);
    };
    exports2.defaultRetryDecider = defaultRetryDecider;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/util.js
var require_util = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.asSdkError = void 0;
    var asSdkError = (error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === "string")
        return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    };
    exports2.asSdkError = asSdkError;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy2 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var service_error_classification_1 = require_dist_cjs13();
    var util_retry_1 = require_dist_cjs14();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var defaultRetryQuota_1 = require_defaultRetryQuota();
    var delayDecider_1 = require_delayDecider();
    var retryDecider_1 = require_retryDecider();
    var util_1 = require_util();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = util_retry_1.RETRY_MODES.STANDARD;
        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;
        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;
        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options === null || options === void 0 ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options === null || options === void 0 ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = (0, util_1.asSdkError)(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);
              const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
              const delay = Math.max(delayFromResponse || 0, delayFromDecider);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    exports2.StandardRetryStrategy = StandardRetryStrategy;
    var getDelayFromRetryAfterHeader = (response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return retryAfterSeconds * 1e3;
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate.getTime() - Date.now();
    };
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy2 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AdaptiveRetryStrategy = void 0;
    var util_retry_1 = require_dist_cjs14();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy2();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options !== null && options !== void 0 ? options : {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new util_retry_1.DefaultRateLimiter();
        this.mode = util_retry_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          }
        });
      }
    };
    exports2.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js
var require_configurations = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_RETRY_MODE_CONFIG_OPTIONS = exports2.CONFIG_RETRY_MODE = exports2.ENV_RETRY_MODE = exports2.resolveRetryConfig = exports2.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports2.CONFIG_MAX_ATTEMPTS = exports2.ENV_MAX_ATTEMPTS = void 0;
    var util_middleware_1 = require_dist_cjs2();
    var util_retry_1 = require_dist_cjs14();
    exports2.ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    exports2.CONFIG_MAX_ATTEMPTS = "max_attempts";
    exports2.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[exports2.ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${exports2.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports2.CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${exports2.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: util_retry_1.DEFAULT_MAX_ATTEMPTS
    };
    var resolveRetryConfig = (input) => {
      var _a;
      const { retryStrategy } = input;
      const maxAttempts = (0, util_middleware_1.normalizeProvider)((_a = input.maxAttempts) !== null && _a !== void 0 ? _a : util_retry_1.DEFAULT_MAX_ATTEMPTS);
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();
          if (retryMode === util_retry_1.RETRY_MODES.ADAPTIVE) {
            return new util_retry_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new util_retry_1.StandardRetryStrategy(maxAttempts);
        }
      };
    };
    exports2.resolveRetryConfig = resolveRetryConfig;
    exports2.ENV_RETRY_MODE = "AWS_RETRY_MODE";
    exports2.CONFIG_RETRY_MODE = "retry_mode";
    exports2.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports2.CONFIG_RETRY_MODE],
      default: util_retry_1.DEFAULT_RETRY_MODE
    };
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js
var require_omitRetryHeadersMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getOmitRetryHeadersPlugin = exports2.omitRetryHeadersMiddlewareOptions = exports2.omitRetryHeadersMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var util_retry_1 = require_dist_cjs14();
    var omitRetryHeadersMiddleware = () => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[util_retry_1.INVOCATION_ID_HEADER];
        delete request.headers[util_retry_1.REQUEST_HEADER];
      }
      return next(args);
    };
    exports2.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports2.omitRetryHeadersMiddlewareOptions = {
      name: "omitRetryHeadersMiddleware",
      tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
      relation: "before",
      toMiddleware: "awsAuthMiddleware",
      override: true
    };
    var getOmitRetryHeadersPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports2.omitRetryHeadersMiddleware)(), exports2.omitRetryHeadersMiddlewareOptions);
      }
    });
    exports2.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js
var require_retryMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRetryAfterHint = exports2.getRetryPlugin = exports2.retryMiddlewareOptions = exports2.retryMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var service_error_classification_1 = require_dist_cjs13();
    var util_retry_1 = require_dist_cjs14();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var util_1 = require_util();
    var retryMiddleware = (options) => (next, context) => async (args) => {
      let retryStrategy = await options.retryStrategy();
      const maxAttempts = await options.maxAttempts();
      if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            const { response, output } = await next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response, output };
          } catch (e) {
            const retryErrorInfo = getRetyErrorInto(e);
            lastError = (0, util_1.asSdkError)(e);
            try {
              retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
          context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
      }
    };
    exports2.retryMiddleware = retryMiddleware;
    var isRetryStrategyV2 = (retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined";
    var getRetyErrorInto = (error) => {
      const errorInfo = {
        errorType: getRetryErrorType(error)
      };
      const retryAfterHint = (0, exports2.getRetryAfterHint)(error.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    };
    var getRetryErrorType = (error) => {
      if ((0, service_error_classification_1.isThrottlingError)(error))
        return "THROTTLING";
      if ((0, service_error_classification_1.isTransientError)(error))
        return "TRANSIENT";
      if ((0, service_error_classification_1.isServerError)(error))
        return "SERVER_ERROR";
      return "CLIENT_ERROR";
    };
    exports2.retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    var getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.retryMiddleware)(options), exports2.retryMiddlewareOptions);
      }
    });
    exports2.getRetryPlugin = getRetryPlugin;
    var getRetryAfterHint = (response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    };
    exports2.getRetryAfterHint = getRetryAfterHint;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy2(), exports2);
    tslib_1.__exportStar(require_StandardRetryStrategy2(), exports2);
    tslib_1.__exportStar(require_configurations(), exports2);
    tslib_1.__exportStar(require_delayDecider(), exports2);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware(), exports2);
    tslib_1.__exportStar(require_retryDecider(), exports2);
    tslib_1.__exportStar(require_retryMiddleware(), exports2);
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports2.ProviderError = ProviderError;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var CredentialsProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
      }
    };
    exports2.CredentialsProviderError = CredentialsProviderError;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/TokenProviderError.js
var require_TokenProviderError = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/TokenProviderError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TokenProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var TokenProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, TokenProviderError.prototype);
      }
    };
    exports2.TokenProviderError = TokenProviderError;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/chain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chain = void 0;
    var ProviderError_1 = require_ProviderError();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError("No providers in chain"));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports2.chain = chain;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports2.fromStatic = fromStatic;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports2.memoize = memoize;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CredentialsProviderError(), exports2);
    tslib_1.__exportStar(require_ProviderError(), exports2);
    tslib_1.__exportStar(require_TokenProviderError(), exports2);
    tslib_1.__exportStar(require_chain(), exports2);
    tslib_1.__exportStar(require_fromStatic(), exports2);
    tslib_1.__exportStar(require_memoize(), exports2);
  }
});

// node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  "node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toHex = exports2.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    exports2.fromHex = fromHex;
    function toHex(bytes) {
      let out = "";
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    exports2.toHex = toHex;
  }
});

// node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  "node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isArrayBuffer = void 0;
    var isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
    exports2.isArrayBuffer = isArrayBuffer;
  }
});

// node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  "node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromString = exports2.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs18();
    var buffer_1 = require("buffer");
    var fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports2.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
    };
    exports2.fromString = fromString;
  }
});

// node_modules/@aws-sdk/util-utf8/dist-cjs/fromUtf8.js
var require_fromUtf8 = __commonJS({
  "node_modules/@aws-sdk/util-utf8/dist-cjs/fromUtf8.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs19();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports2.fromUtf8 = fromUtf8;
  }
});

// node_modules/@aws-sdk/util-utf8/dist-cjs/toUint8Array.js
var require_toUint8Array = __commonJS({
  "node_modules/@aws-sdk/util-utf8/dist-cjs/toUint8Array.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUint8Array = void 0;
    var fromUtf8_1 = require_fromUtf8();
    var toUint8Array = (data) => {
      if (typeof data === "string") {
        return (0, fromUtf8_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    };
    exports2.toUint8Array = toUint8Array;
  }
});

// node_modules/@aws-sdk/util-utf8/dist-cjs/toUtf8.js
var require_toUtf8 = __commonJS({
  "node_modules/@aws-sdk/util-utf8/dist-cjs/toUtf8.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs19();
    var toUtf8 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    exports2.toUtf8 = toUtf8;
  }
});

// node_modules/@aws-sdk/util-utf8/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  "node_modules/@aws-sdk/util-utf8/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromUtf8(), exports2);
    tslib_1.__exportStar(require_toUint8Array(), exports2);
    tslib_1.__exportStar(require_toUtf8(), exports2);
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js
var require_constants3 = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MAX_PRESIGNED_TTL = exports2.KEY_TYPE_IDENTIFIER = exports2.MAX_CACHE_SIZE = exports2.UNSIGNED_PAYLOAD = exports2.EVENT_ALGORITHM_IDENTIFIER = exports2.ALGORITHM_IDENTIFIER_V4A = exports2.ALGORITHM_IDENTIFIER = exports2.UNSIGNABLE_PATTERNS = exports2.SEC_HEADER_PATTERN = exports2.PROXY_HEADER_PATTERN = exports2.ALWAYS_UNSIGNABLE_HEADERS = exports2.HOST_HEADER = exports2.TOKEN_HEADER = exports2.SHA256_HEADER = exports2.SIGNATURE_HEADER = exports2.GENERATED_HEADERS = exports2.DATE_HEADER = exports2.AMZ_DATE_HEADER = exports2.AUTH_HEADER = exports2.REGION_SET_PARAM = exports2.TOKEN_QUERY_PARAM = exports2.SIGNATURE_QUERY_PARAM = exports2.EXPIRES_QUERY_PARAM = exports2.SIGNED_HEADERS_QUERY_PARAM = exports2.AMZ_DATE_QUERY_PARAM = exports2.CREDENTIAL_QUERY_PARAM = exports2.ALGORITHM_QUERY_PARAM = void 0;
    exports2.ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    exports2.CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    exports2.AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    exports2.SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    exports2.EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    exports2.SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    exports2.TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    exports2.REGION_SET_PARAM = "X-Amz-Region-Set";
    exports2.AUTH_HEADER = "authorization";
    exports2.AMZ_DATE_HEADER = exports2.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports2.DATE_HEADER = "date";
    exports2.GENERATED_HEADERS = [exports2.AUTH_HEADER, exports2.AMZ_DATE_HEADER, exports2.DATE_HEADER];
    exports2.SIGNATURE_HEADER = exports2.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports2.SHA256_HEADER = "x-amz-content-sha256";
    exports2.TOKEN_HEADER = exports2.TOKEN_QUERY_PARAM.toLowerCase();
    exports2.HOST_HEADER = "host";
    exports2.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    exports2.PROXY_HEADER_PATTERN = /^proxy-/;
    exports2.SEC_HEADER_PATTERN = /^sec-/;
    exports2.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports2.ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    exports2.ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
    exports2.EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    exports2.UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    exports2.MAX_CACHE_SIZE = 50;
    exports2.KEY_TYPE_IDENTIFIER = "aws4_request";
    exports2.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js
var require_credentialDerivation = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.clearCredentialCache = exports2.getSigningKey = exports2.createScope = void 0;
    var util_hex_encoding_1 = require_dist_cjs17();
    var util_utf8_1 = require_dist_cjs20();
    var constants_1 = require_constants3();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
    exports2.createScope = createScope;
    var getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, util_hex_encoding_1.toHex)(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, constants_1.KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    };
    exports2.getSigningKey = getSigningKey;
    var clearCredentialCache = () => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    };
    exports2.clearCredentialCache = clearCredentialCache;
    var hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update((0, util_utf8_1.toUint8Array)(data));
      return hash.digest();
    };
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js
var require_getCanonicalHeaders = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCanonicalHeaders = void 0;
    var constants_1 = require_constants3();
    var getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) || constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    };
    exports2.getCanonicalHeaders = getCanonicalHeaders;
  }
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js
var require_escape_uri = __commonJS({
  "node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.escapeUri = void 0;
    var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports2.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js
var require_escape_uri_path = __commonJS({
  "node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri();
    var escapeUriPath = (uri) => uri.split("/").map(escape_uri_1.escapeUri).join("/");
    exports2.escapeUriPath = escapeUriPath;
  }
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  "node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_escape_uri(), exports2);
    tslib_1.__exportStar(require_escape_uri_path(), exports2);
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js
var require_getCanonicalQuery = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs21();
    var constants_1 = require_constants3();
    var getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
          serialized[key] = `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value.slice(0).sort().reduce((encoded, value2) => encoded.concat([`${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value2)}`]), []).join("&");
        }
      }
      return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    };
    exports2.getCanonicalQuery = getCanonicalQuery;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js
var require_getPayloadHash = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs18();
    var util_hex_encoding_1 = require_dist_cjs17();
    var util_utf8_1 = require_dist_cjs20();
    var constants_1 = require_constants3();
    var getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, is_array_buffer_1.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0, util_utf8_1.toUint8Array)(body));
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    };
    exports2.getPayloadHash = getPayloadHash;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js
var require_headerUtil = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deleteHeader = exports2.getHeaderValue = exports2.hasHeader = void 0;
    var hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports2.hasHeader = hasHeader;
    var getHeaderValue = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    };
    exports2.getHeaderValue = getHeaderValue;
    var deleteHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    };
    exports2.deleteHeader = deleteHeader;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js
var require_cloneRequest = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cloneQuery = exports2.cloneRequest = void 0;
    var cloneRequest = ({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? (0, exports2.cloneQuery)(query) : void 0
    });
    exports2.cloneRequest = cloneRequest;
    var cloneQuery = (query) => Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {});
    exports2.cloneQuery = cloneQuery;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js
var require_moveHeadersToQuery = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var moveHeadersToQuery = (request, options = {}) => {
      var _a;
      const { headers, query = {} } = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query
      };
    };
    exports2.moveHeadersToQuery = moveHeadersToQuery;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js
var require_prepareRequest = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var constants_1 = require_constants3();
    var prepareRequest = (request) => {
      request = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const headerName of Object.keys(request.headers)) {
        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    };
    exports2.prepareRequest = prepareRequest;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js
var require_utilDate = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toDate = exports2.iso8601 = void 0;
    var iso8601 = (time) => (0, exports2.toDate)(time).toISOString().replace(/\.\d{3}Z$/, "Z");
    exports2.iso8601 = iso8601;
    var toDate = (time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
    exports2.toDate = toDate;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js
var require_SignatureV4 = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SignatureV4 = void 0;
    var util_hex_encoding_1 = require_dist_cjs17();
    var util_middleware_1 = require_dist_cjs2();
    var util_utf8_1 = require_dist_cjs20();
    var constants_1 = require_constants3();
    var credentialDerivation_1 = require_credentialDerivation();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    var getPayloadHash_1 = require_getPayloadHash();
    var headerUtil_1 = require_headerUtil();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    var prepareRequest_1 = require_prepareRequest();
    var utilDate_1 = require_utilDate();
    var SignatureV4 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        }
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)((0, prepareRequest_1.prepareRequest)(originalRequest), { unhoistableHeaders });
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0, getPayloadHash_1.getPayloadHash)(originalRequest, this.sha256)));
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(await hash.digest());
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(request, this.sha256);
        if (!(0, headerUtil_1.hasHeader)(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[constants_1.AUTH_HEADER] = `${constants_1.ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update((0, util_utf8_1.toUint8Array)(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, util_hex_encoding_1.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if ((pathSegment === null || pathSegment === void 0 ? void 0 : pathSegment.length) === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${(path === null || path === void 0 ? void 0 : path.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path === null || path === void 0 ? void 0 : path.endsWith("/")) ? "/" : ""}`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
      }
      validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") {
          throw new Error("Resolved credential object is not valid");
        }
      }
    };
    exports2.SignatureV4 = SignatureV4;
    var formatDate = (now) => {
      const longDate = (0, utilDate_1.iso8601)(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    };
    var getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(";");
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prepareRequest = exports2.moveHeadersToQuery = exports2.getPayloadHash = exports2.getCanonicalQuery = exports2.getCanonicalHeaders = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SignatureV4(), exports2);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    Object.defineProperty(exports2, "getCanonicalHeaders", { enumerable: true, get: function() {
      return getCanonicalHeaders_1.getCanonicalHeaders;
    } });
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    Object.defineProperty(exports2, "getCanonicalQuery", { enumerable: true, get: function() {
      return getCanonicalQuery_1.getCanonicalQuery;
    } });
    var getPayloadHash_1 = require_getPayloadHash();
    Object.defineProperty(exports2, "getPayloadHash", { enumerable: true, get: function() {
      return getPayloadHash_1.getPayloadHash;
    } });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    Object.defineProperty(exports2, "moveHeadersToQuery", { enumerable: true, get: function() {
      return moveHeadersToQuery_1.moveHeadersToQuery;
    } });
    var prepareRequest_1 = require_prepareRequest();
    Object.defineProperty(exports2, "prepareRequest", { enumerable: true, get: function() {
      return prepareRequest_1.prepareRequest;
    } });
    tslib_1.__exportStar(require_credentialDerivation(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js
var require_configurations2 = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveSigV4AuthConfig = exports2.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs16();
    var signature_v4_1 = require_dist_cjs22();
    var util_middleware_1 = require_dist_cjs2();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else if (input.regionInfoProvider) {
        signer = () => (0, util_middleware_1.normalizeProvider)(input.region)().then(async (region) => [
          await input.regionInfoProvider(region, {
            useFipsEndpoint: await input.useFipsEndpoint(),
            useDualstackEndpoint: await input.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          input.signingRegion = input.signingRegion || signingRegion || region;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        });
      } else {
        signer = async (authScheme) => {
          authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: input.signingName || input.defaultSigningName,
            signingRegion: await (0, util_middleware_1.normalizeProvider)(input.region)(),
            properties: {}
          }, authScheme);
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          input.signingRegion = input.signingRegion || signingRegion;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        };
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports2.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else {
        signer = (0, util_middleware_1.normalizeProvider)(new signature_v4_1.SignatureV4({
          credentials: normalizedCreds,
          region: input.region,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        }));
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports2.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === "function") {
        return (0, property_provider_1.memoize)(credentials, (credentials2) => credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials2) => credentials2.expiration !== void 0);
      }
      return (0, util_middleware_1.normalizeProvider)(credentials);
    };
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js
var require_getSkewCorrectedDate = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
    exports2.getSkewCorrectedDate = getSkewCorrectedDate;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js
var require_isClockSkewed = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var isClockSkewed = (clockTime, systemClockOffset) => Math.abs((0, getSkewCorrectedDate_1.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 3e5;
    exports2.isClockSkewed = isClockSkewed;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js
var require_getUpdatedSystemClockOffset = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed();
    var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if ((0, isClockSkewed_1.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
    exports2.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js
var require_middleware = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSigV4AuthPlugin = exports2.getAwsAuthPlugin = exports2.awsAuthMiddlewareOptions = exports2.awsAuthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset();
    var awsAuthMiddleware = (options) => (next, context) => async function(args) {
      var _a, _b, _c, _d;
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const authScheme = (_c = (_b = (_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.authSchemes) === null || _c === void 0 ? void 0 : _c[0];
      const multiRegionOverride = (authScheme === null || authScheme === void 0 ? void 0 : authScheme.name) === "sigv4a" ? (_d = authScheme === null || authScheme === void 0 ? void 0 : authScheme.signingRegionSet) === null || _d === void 0 ? void 0 : _d.join(",") : void 0;
      const signer = await options.signer(authScheme);
      const output = await next({
        ...args,
        request: await signer.sign(args.request, {
          signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(options.systemClockOffset),
          signingRegion: multiRegionOverride || context["signing_region"],
          signingService: context["signing_service"]
        })
      }).catch((error) => {
        var _a2;
        const serverTime = (_a2 = error.ServerTime) !== null && _a2 !== void 0 ? _a2 : getDateHeader(error.$response);
        if (serverTime) {
          options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
        }
        throw error;
      });
      const dateHeader = getDateHeader(output.response);
      if (dateHeader) {
        options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
      }
      return output;
    };
    exports2.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = (response) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response) ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0 ? _b : (_c = response.headers) === null || _c === void 0 ? void 0 : _c.Date : void 0;
    };
    exports2.awsAuthMiddlewareOptions = {
      name: "awsAuthMiddleware",
      tags: ["SIGNATURE", "AWSAUTH"],
      relation: "after",
      toMiddleware: "retryMiddleware",
      override: true
    };
    var getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports2.awsAuthMiddleware)(options), exports2.awsAuthMiddlewareOptions);
      }
    });
    exports2.getAwsAuthPlugin = getAwsAuthPlugin;
    exports2.getSigV4AuthPlugin = exports2.getAwsAuthPlugin;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations2(), exports2);
    tslib_1.__exportStar(require_middleware(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js
var require_configurations3 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
      };
    }
    exports2.resolveUserAgentConfig = resolveUserAgentConfig;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js
var require_constants4 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UA_ESCAPE_REGEX = exports2.SPACE = exports2.X_AMZ_USER_AGENT = exports2.USER_AGENT = void 0;
    exports2.USER_AGENT = "user-agent";
    exports2.X_AMZ_USER_AGENT = "x-amz-user-agent";
    exports2.SPACE = " ";
    exports2.UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js
var require_user_agent_middleware = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getUserAgentPlugin = exports2.getUserAgentMiddlewareOptions = exports2.userAgentMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var constants_1 = require_constants4();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
      const { headers } = request;
      const userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
      const sdkUserAgentValue = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(constants_1.SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT] ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request
      });
    };
    exports2.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = ([name, version2]) => {
      const prefixSeparatorIndex = name.indexOf("/");
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version2].filter((item) => item && item.length > 0).map((item) => item === null || item === void 0 ? void 0 : item.replace(constants_1.UA_ESCAPE_REGEX, "_")).join("/");
    };
    exports2.getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.userAgentMiddleware)(config), exports2.getUserAgentMiddlewareOptions);
      }
    });
    exports2.getUserAgentPlugin = getUserAgentPlugin;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations3(), exports2);
    tslib_1.__exportStar(require_user_agent_middleware(), exports2);
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/NoOpLogger.js
var require_NoOpLogger = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/NoOpLogger.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NoOpLogger = void 0;
    var NoOpLogger = class {
      trace() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    };
    exports2.NoOpLogger = NoOpLogger;
  }
});

// node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js
var require_MiddlewareStack = __commonJS({
  "node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.constructStack = void 0;
    var constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.name && entry.name === toRemove) {
            isRemoved = true;
            entriesNameSet.delete(toRemove);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            if (entry.name)
              entriesNameSet.delete(entry.name);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = (debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug) {
                return;
              }
              throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expendedMiddlewareList) => {
          wholeList.push(...expendedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain;
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override } = options;
          const entry = {
            step: "initialize",
            priority: "normal",
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = absoluteEntries[toOverrideIndex];
              if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
                throw new Error(`"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override } = options;
          const entry = {
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = relativeEntries[toOverrideIndex];
              if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                throw new Error(`"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo((0, exports2.constructStack)()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name } = entry;
            if (tags && tags.includes(toRemove)) {
              if (name)
                entriesNameSet.delete(name);
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo((0, exports2.constructStack)());
          cloned.use(from);
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            return mw.name + ": " + (mw.tags || []).join(",");
          });
        },
        resolve: (handler, context) => {
          for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
            handler = middleware(handler, context);
          }
          return handler;
        }
      };
      return stack;
    };
    exports2.constructStack = constructStack;
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

// node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  "node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_MiddlewareStack(), exports2);
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/client.js
var require_client = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Client = void 0;
    var middleware_stack_1 = require_dist_cjs25();
    var Client = class {
      constructor(config) {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
          handler(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
    exports2.Client = Client;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/command.js
var require_command = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/command.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Command = void 0;
    var middleware_stack_1 = require_dist_cjs25();
    var Command = class {
      constructor() {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
      }
    };
    exports2.Command = Command;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js
var require_constants5 = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SENSITIVE_STRING = void 0;
    exports2.SENSITIVE_STRING = "***SensitiveInformation***";
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js
var require_parse_utils = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.logger = exports2.strictParseByte = exports2.strictParseShort = exports2.strictParseInt32 = exports2.strictParseInt = exports2.strictParseLong = exports2.limitedParseFloat32 = exports2.limitedParseFloat = exports2.handleFloat = exports2.limitedParseDouble = exports2.strictParseFloat32 = exports2.strictParseFloat = exports2.strictParseDouble = exports2.expectUnion = exports2.expectString = exports2.expectObject = exports2.expectNonNull = exports2.expectByte = exports2.expectShort = exports2.expectInt32 = exports2.expectInt = exports2.expectLong = exports2.expectFloat32 = exports2.expectNumber = exports2.expectBoolean = exports2.parseBoolean = void 0;
    var parseBoolean = (value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    };
    exports2.parseBoolean = parseBoolean;
    var expectBoolean = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "number") {
        if (value === 0 || value === 1) {
          exports2.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (value === 0) {
          return false;
        }
        if (value === 1) {
          return true;
        }
      }
      if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") {
          exports2.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (lower === "false") {
          return false;
        }
        if (lower === "true") {
          return true;
        }
      }
      if (typeof value === "boolean") {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
    };
    exports2.expectBoolean = expectBoolean;
    var expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            exports2.logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
          }
          return parsed;
        }
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    };
    exports2.expectNumber = expectNumber;
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = (value) => {
      const expected = (0, exports2.expectNumber)(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    exports2.expectFloat32 = expectFloat32;
    var expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    };
    exports2.expectLong = expectLong;
    exports2.expectInt = exports2.expectLong;
    var expectInt32 = (value) => expectSizedInt(value, 32);
    exports2.expectInt32 = expectInt32;
    var expectShort = (value) => expectSizedInt(value, 16);
    exports2.expectShort = expectShort;
    var expectByte = (value) => expectSizedInt(value, 8);
    exports2.expectByte = expectByte;
    var expectSizedInt = (value, size) => {
      const expected = (0, exports2.expectLong)(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    var castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    var expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    };
    exports2.expectNonNull = expectNonNull;
    var expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? "array" : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    };
    exports2.expectObject = expectObject;
    var expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      if (["boolean", "number", "bigint"].includes(typeof value)) {
        exports2.logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    };
    exports2.expectString = expectString;
    var expectUnion = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = (0, exports2.expectObject)(value);
      const setKeys = Object.entries(asObject).filter(([, v]) => v != null).map(([k]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    };
    exports2.expectUnion = expectUnion;
    var strictParseDouble = (value) => {
      if (typeof value == "string") {
        return (0, exports2.expectNumber)(parseNumber(value));
      }
      return (0, exports2.expectNumber)(value);
    };
    exports2.strictParseDouble = strictParseDouble;
    exports2.strictParseFloat = exports2.strictParseDouble;
    var strictParseFloat32 = (value) => {
      if (typeof value == "string") {
        return (0, exports2.expectFloat32)(parseNumber(value));
      }
      return (0, exports2.expectFloat32)(value);
    };
    exports2.strictParseFloat32 = strictParseFloat32;
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    var limitedParseDouble = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports2.expectNumber)(value);
    };
    exports2.limitedParseDouble = limitedParseDouble;
    exports2.handleFloat = exports2.limitedParseDouble;
    exports2.limitedParseFloat = exports2.limitedParseDouble;
    var limitedParseFloat32 = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports2.expectFloat32)(value);
    };
    exports2.limitedParseFloat32 = limitedParseFloat32;
    var parseFloatString = (value) => {
      switch (value) {
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    };
    var strictParseLong = (value) => {
      if (typeof value === "string") {
        return (0, exports2.expectLong)(parseNumber(value));
      }
      return (0, exports2.expectLong)(value);
    };
    exports2.strictParseLong = strictParseLong;
    exports2.strictParseInt = exports2.strictParseLong;
    var strictParseInt32 = (value) => {
      if (typeof value === "string") {
        return (0, exports2.expectInt32)(parseNumber(value));
      }
      return (0, exports2.expectInt32)(value);
    };
    exports2.strictParseInt32 = strictParseInt32;
    var strictParseShort = (value) => {
      if (typeof value === "string") {
        return (0, exports2.expectShort)(parseNumber(value));
      }
      return (0, exports2.expectShort)(value);
    };
    exports2.strictParseShort = strictParseShort;
    var strictParseByte = (value) => {
      if (typeof value === "string") {
        return (0, exports2.expectByte)(parseNumber(value));
      }
      return (0, exports2.expectByte)(value);
    };
    exports2.strictParseByte = strictParseByte;
    var stackTraceWarning = (message) => {
      return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s) => !s.includes("stackTraceWarning")).join("\n");
    };
    exports2.logger = {
      warn: console.warn
    };
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js
var require_date_utils = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseEpochTimestamp = exports2.parseRfc7231DateTime = exports2.parseRfc3339DateTimeWithOffset = exports2.parseRfc3339DateTime = exports2.dateToUtcString = void 0;
    var parse_utils_1 = require_parse_utils();
    var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    exports2.dateToUtcString = dateToUtcString;
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    };
    exports2.parseRfc3339DateTime = parseRfc3339DateTime;
    var RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
    var parseRfc3339DateTimeWithOffset = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339_WITH_OFFSET.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
      if (offsetStr.toUpperCase() != "Z") {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
      }
      return date;
    };
    exports2.parseRfc3339DateTimeWithOffset = parseRfc3339DateTimeWithOffset;
    var IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
    var parseRfc7231DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
          hours,
          minutes,
          seconds,
          fractionalMilliseconds
        }));
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    };
    exports2.parseRfc7231DateTime = parseRfc7231DateTime;
    var parseEpochTimestamp = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === "number") {
        valueAsDouble = value;
      } else if (typeof value === "string") {
        valueAsDouble = (0, parse_utils_1.strictParseDouble)(value);
      } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    };
    exports2.parseEpochTimestamp = parseEpochTimestamp;
    var buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
    };
    var parseTwoDigitYear = (value) => {
      const thisYear = new Date().getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = (input) => {
      if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
      }
      return input;
    };
    var parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    };
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    };
    var isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    var parseDateValue = (value, type, lower, upper) => {
      const dateVal = (0, parse_utils_1.strictParseByte)(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    };
    var parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return (0, parse_utils_1.strictParseFloat32)("0." + value) * 1e3;
    };
    var parseOffsetToMilliseconds = (value) => {
      const directionStr = value[0];
      let direction = 1;
      if (directionStr == "+") {
        direction = 1;
      } else if (directionStr == "-") {
        direction = -1;
      } else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
      }
      const hour = Number(value.substring(1, 3));
      const minute = Number(value.substring(4, 6));
      return direction * (hour * 60 + minute) * 60 * 1e3;
    };
    var stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js
var require_exceptions = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decorateServiceException = exports2.ServiceException = void 0;
    var ServiceException = class extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    exports2.ServiceException = ServiceException;
    var decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions).filter(([, v]) => v !== void 0).forEach(([k, v]) => {
        if (exception[k] == void 0 || exception[k] === "") {
          exception[k] = v;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    };
    exports2.decorateServiceException = decorateServiceException;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/default-error-handler.js
var require_default_error_handler = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/default-error-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.throwDefaultError = void 0;
    var exceptions_1 = require_exceptions();
    var throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
      const response = new exceptionCtor({
        name: (parsedBody === null || parsedBody === void 0 ? void 0 : parsedBody.code) || (parsedBody === null || parsedBody === void 0 ? void 0 : parsedBody.Code) || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
      });
      throw (0, exceptions_1.decorateServiceException)(response, parsedBody);
    };
    exports2.throwDefaultError = throwDefaultError;
    var deserializeMetadata = (output) => {
      var _a, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"]) !== null && _b !== void 0 ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js
var require_defaults_mode = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadConfigsForDefaultMode = void 0;
    var loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    };
    exports2.loadConfigsForDefaultMode = loadConfigsForDefaultMode;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js
var require_emitWarningIfUnsupportedVersion = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.emitWarningIfUnsupportedVersion = void 0;
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion = (version2) => {
      if (version2 && !warningEmitted && parseInt(version2.substring(1, version2.indexOf("."))) < 14) {
        warningEmitted = true;
      }
    };
    exports2.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js
var require_extended_encode_uri_component = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extendedEncodeURIComponent = void 0;
    function extendedEncodeURIComponent(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    exports2.extendedEncodeURIComponent = extendedEncodeURIComponent;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js
var require_get_array_if_single_item = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getArrayIfSingleItem = void 0;
    var getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
    exports2.getArrayIfSingleItem = getArrayIfSingleItem;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js
var require_get_value_from_text_node = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getValueFromTextNode = void 0;
    var getValueFromTextNode = (obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = (0, exports2.getValueFromTextNode)(obj[key]);
        }
      }
      return obj;
    };
    exports2.getValueFromTextNode = getValueFromTextNode;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js
var require_lazy_json = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LazyJsonString = exports2.StringWrapper = void 0;
    var StringWrapper = function() {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    };
    exports2.StringWrapper = StringWrapper;
    exports2.StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: exports2.StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(exports2.StringWrapper, String);
    var LazyJsonString = class extends exports2.StringWrapper {
      deserializeJSON() {
        return JSON.parse(super.toString());
      }
      toJSON() {
        return super.toString();
      }
      static fromObject(object) {
        if (object instanceof LazyJsonString) {
          return object;
        } else if (object instanceof String || typeof object === "string") {
          return new LazyJsonString(object);
        }
        return new LazyJsonString(JSON.stringify(object));
      }
    };
    exports2.LazyJsonString = LazyJsonString;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/object-mapping.js
var require_object_mapping = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/object-mapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.convertMap = exports2.map = void 0;
    function map(arg0, arg1, arg2) {
      let target;
      let filter;
      let instructions;
      if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
      } else {
        target = arg0;
        if (typeof arg1 === "function") {
          filter = arg1;
          instructions = arg2;
          return mapWithFilter(target, filter, instructions);
        } else {
          instructions = arg1;
        }
      }
      for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
          target[key] = instructions[key];
          continue;
        }
        let [filter2, value] = instructions[key];
        if (typeof value === "function") {
          let _value;
          const defaultFilterPassed = filter2 === void 0 && (_value = value()) != null;
          const customFilterPassed = typeof filter2 === "function" && !!filter2(void 0) || typeof filter2 !== "function" && !!filter2;
          if (defaultFilterPassed) {
            target[key] = _value;
          } else if (customFilterPassed) {
            target[key] = value();
          }
        } else {
          const defaultFilterPassed = filter2 === void 0 && value != null;
          const customFilterPassed = typeof filter2 === "function" && !!filter2(value) || typeof filter2 !== "function" && !!filter2;
          if (defaultFilterPassed || customFilterPassed) {
            target[key] = value;
          }
        }
      }
      return target;
    }
    exports2.map = map;
    var convertMap = (target) => {
      const output = {};
      for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
      }
      return output;
    };
    exports2.convertMap = convertMap;
    var mapWithFilter = (target, filter, instructions) => {
      return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
        if (Array.isArray(value)) {
          _instructions[key] = value;
        } else {
          if (typeof value === "function") {
            _instructions[key] = [filter, value()];
          } else {
            _instructions[key] = [filter, value];
          }
        }
        return _instructions;
      }, {}));
    };
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/resolve-path.js
var require_resolve_path = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/resolve-path.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolvedPath = void 0;
    var extended_encode_uri_component_1 = require_extended_encode_uri_component();
    var resolvedPath = (resolvedPath2, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath2 = resolvedPath2.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment) => (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(segment)).join("/") : (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(labelValue));
      } else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
      }
      return resolvedPath2;
    };
    exports2.resolvedPath = resolvedPath;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js
var require_ser_utils = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializeFloat = void 0;
    var serializeFloat = (value) => {
      if (value !== value) {
        return "NaN";
      }
      switch (value) {
        case Infinity:
          return "Infinity";
        case -Infinity:
          return "-Infinity";
        default:
          return value;
      }
    };
    exports2.serializeFloat = serializeFloat;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js
var require_split_every = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.splitEvery = void 0;
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = "";
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === "") {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = "";
        }
      }
      if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    exports2.splitEvery = splitEvery;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NoOpLogger(), exports2);
    tslib_1.__exportStar(require_client(), exports2);
    tslib_1.__exportStar(require_command(), exports2);
    tslib_1.__exportStar(require_constants5(), exports2);
    tslib_1.__exportStar(require_date_utils(), exports2);
    tslib_1.__exportStar(require_default_error_handler(), exports2);
    tslib_1.__exportStar(require_defaults_mode(), exports2);
    tslib_1.__exportStar(require_emitWarningIfUnsupportedVersion(), exports2);
    tslib_1.__exportStar(require_exceptions(), exports2);
    tslib_1.__exportStar(require_extended_encode_uri_component(), exports2);
    tslib_1.__exportStar(require_get_array_if_single_item(), exports2);
    tslib_1.__exportStar(require_get_value_from_text_node(), exports2);
    tslib_1.__exportStar(require_lazy_json(), exports2);
    tslib_1.__exportStar(require_object_mapping(), exports2);
    tslib_1.__exportStar(require_parse_utils(), exports2);
    tslib_1.__exportStar(require_resolve_path(), exports2);
    tslib_1.__exportStar(require_ser_utils(), exports2);
    tslib_1.__exportStar(require_split_every(), exports2);
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/endpoint/EndpointParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "codedeploy"
      };
    };
    exports2.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// node_modules/@aws-sdk/client-codedeploy/package.json
var require_package = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-codedeploy",
      description: "AWS SDK for JavaScript Codedeploy Client for Node.js, Browser and React Native",
      version: "3.288.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo codedeploy"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.288.0",
        "@aws-sdk/config-resolver": "3.287.0",
        "@aws-sdk/credential-provider-node": "3.288.0",
        "@aws-sdk/fetch-http-handler": "3.282.0",
        "@aws-sdk/hash-node": "3.272.0",
        "@aws-sdk/invalid-dependency": "3.272.0",
        "@aws-sdk/middleware-content-length": "3.282.0",
        "@aws-sdk/middleware-endpoint": "3.282.0",
        "@aws-sdk/middleware-host-header": "3.282.0",
        "@aws-sdk/middleware-logger": "3.288.0",
        "@aws-sdk/middleware-recursion-detection": "3.282.0",
        "@aws-sdk/middleware-retry": "3.287.0",
        "@aws-sdk/middleware-serde": "3.272.0",
        "@aws-sdk/middleware-signing": "3.282.0",
        "@aws-sdk/middleware-stack": "3.272.0",
        "@aws-sdk/middleware-user-agent": "3.282.0",
        "@aws-sdk/node-config-provider": "3.287.0",
        "@aws-sdk/node-http-handler": "3.282.0",
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/smithy-client": "3.279.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.279.0",
        "@aws-sdk/util-defaults-mode-node": "3.287.0",
        "@aws-sdk/util-endpoints": "3.272.0",
        "@aws-sdk/util-retry": "3.272.0",
        "@aws-sdk/util-user-agent-browser": "3.282.0",
        "@aws-sdk/util-user-agent-node": "3.287.0",
        "@aws-sdk/util-utf8": "3.254.0",
        "@aws-sdk/util-waiter": "3.272.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-codedeploy",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-codedeploy"
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js
var require_STSServiceException = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STSServiceException = void 0;
    var smithy_client_1 = require_dist_cjs26();
    var STSServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, STSServiceException.prototype);
      }
    };
    exports2.STSServiceException = STSServiceException;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js
var require_models_0 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetSessionTokenResponseFilterSensitiveLog = exports2.GetSessionTokenRequestFilterSensitiveLog = exports2.GetFederationTokenResponseFilterSensitiveLog = exports2.FederatedUserFilterSensitiveLog = exports2.GetFederationTokenRequestFilterSensitiveLog = exports2.GetCallerIdentityResponseFilterSensitiveLog = exports2.GetCallerIdentityRequestFilterSensitiveLog = exports2.GetAccessKeyInfoResponseFilterSensitiveLog = exports2.GetAccessKeyInfoRequestFilterSensitiveLog = exports2.DecodeAuthorizationMessageResponseFilterSensitiveLog = exports2.DecodeAuthorizationMessageRequestFilterSensitiveLog = exports2.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = exports2.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = exports2.AssumeRoleWithSAMLResponseFilterSensitiveLog = exports2.AssumeRoleWithSAMLRequestFilterSensitiveLog = exports2.AssumeRoleResponseFilterSensitiveLog = exports2.CredentialsFilterSensitiveLog = exports2.AssumeRoleRequestFilterSensitiveLog = exports2.TagFilterSensitiveLog = exports2.PolicyDescriptorTypeFilterSensitiveLog = exports2.AssumedRoleUserFilterSensitiveLog = exports2.InvalidAuthorizationMessageException = exports2.IDPCommunicationErrorException = exports2.InvalidIdentityTokenException = exports2.IDPRejectedClaimException = exports2.RegionDisabledException = exports2.PackedPolicyTooLargeException = exports2.MalformedPolicyDocumentException = exports2.ExpiredTokenException = void 0;
    var STSServiceException_1 = require_STSServiceException();
    var ExpiredTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
      }
    };
    exports2.ExpiredTokenException = ExpiredTokenException;
    var MalformedPolicyDocumentException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
      }
    };
    exports2.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var PackedPolicyTooLargeException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "PackedPolicyTooLargeException",
          $fault: "client",
          ...opts
        });
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PackedPolicyTooLargeException.prototype);
      }
    };
    exports2.PackedPolicyTooLargeException = PackedPolicyTooLargeException;
    var RegionDisabledException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "RegionDisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RegionDisabledException.prototype);
      }
    };
    exports2.RegionDisabledException = RegionDisabledException;
    var IDPRejectedClaimException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPRejectedClaimException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPRejectedClaimException.prototype);
      }
    };
    exports2.IDPRejectedClaimException = IDPRejectedClaimException;
    var InvalidIdentityTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidIdentityTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidIdentityTokenException.prototype);
      }
    };
    exports2.InvalidIdentityTokenException = InvalidIdentityTokenException;
    var IDPCommunicationErrorException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPCommunicationErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPCommunicationErrorException.prototype);
      }
    };
    exports2.IDPCommunicationErrorException = IDPCommunicationErrorException;
    var InvalidAuthorizationMessageException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidAuthorizationMessageException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAuthorizationMessageException.prototype);
      }
    };
    exports2.InvalidAuthorizationMessageException = InvalidAuthorizationMessageException;
    var AssumedRoleUserFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumedRoleUserFilterSensitiveLog = AssumedRoleUserFilterSensitiveLog;
    var PolicyDescriptorTypeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PolicyDescriptorTypeFilterSensitiveLog = PolicyDescriptorTypeFilterSensitiveLog;
    var TagFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var AssumeRoleRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumeRoleRequestFilterSensitiveLog = AssumeRoleRequestFilterSensitiveLog;
    var CredentialsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CredentialsFilterSensitiveLog = CredentialsFilterSensitiveLog;
    var AssumeRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumeRoleResponseFilterSensitiveLog = AssumeRoleResponseFilterSensitiveLog;
    var AssumeRoleWithSAMLRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumeRoleWithSAMLRequestFilterSensitiveLog = AssumeRoleWithSAMLRequestFilterSensitiveLog;
    var AssumeRoleWithSAMLResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumeRoleWithSAMLResponseFilterSensitiveLog = AssumeRoleWithSAMLResponseFilterSensitiveLog;
    var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = AssumeRoleWithWebIdentityRequestFilterSensitiveLog;
    var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = AssumeRoleWithWebIdentityResponseFilterSensitiveLog;
    var DecodeAuthorizationMessageRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DecodeAuthorizationMessageRequestFilterSensitiveLog = DecodeAuthorizationMessageRequestFilterSensitiveLog;
    var DecodeAuthorizationMessageResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DecodeAuthorizationMessageResponseFilterSensitiveLog = DecodeAuthorizationMessageResponseFilterSensitiveLog;
    var GetAccessKeyInfoRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetAccessKeyInfoRequestFilterSensitiveLog = GetAccessKeyInfoRequestFilterSensitiveLog;
    var GetAccessKeyInfoResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetAccessKeyInfoResponseFilterSensitiveLog = GetAccessKeyInfoResponseFilterSensitiveLog;
    var GetCallerIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetCallerIdentityRequestFilterSensitiveLog = GetCallerIdentityRequestFilterSensitiveLog;
    var GetCallerIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetCallerIdentityResponseFilterSensitiveLog = GetCallerIdentityResponseFilterSensitiveLog;
    var GetFederationTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetFederationTokenRequestFilterSensitiveLog = GetFederationTokenRequestFilterSensitiveLog;
    var FederatedUserFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.FederatedUserFilterSensitiveLog = FederatedUserFilterSensitiveLog;
    var GetFederationTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetFederationTokenResponseFilterSensitiveLog = GetFederationTokenResponseFilterSensitiveLog;
    var GetSessionTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetSessionTokenRequestFilterSensitiveLog = GetSessionTokenRequestFilterSensitiveLog;
    var GetSessionTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetSessionTokenResponseFilterSensitiveLog = GetSessionTokenResponseFilterSensitiveLog;
  }
});

// node_modules/fast-xml-parser/src/util.js
var require_util2 = __commonJS({
  "node_modules/fast-xml-parser/src/util.js"(exports2) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports2.isExist = function(v) {
      return typeof v !== "undefined";
    };
    exports2.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports2.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === "strict") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports2.getValue = function(v) {
      if (exports2.isExist(v)) {
        return v;
      } else {
        return "";
      }
    };
    exports2.isName = isName;
    exports2.getAllMatches = getAllMatches;
    exports2.nameRegexp = nameRegexp;
  }
});

// node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "node_modules/fast-xml-parser/src/validator.js"(exports2) {
    "use strict";
    var util = require_util2();
    var defaultOptions = {
      allowBooleanAttributes: false,
      //A tag can have attributes without any value
      unpairedTags: []
    };
    exports2.validate = function(xmlData, options) {
      options = Object.assign({}, defaultOptions, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err)
            return i;
        } else if (xmlData[i] === "<") {
          let tagStartPos = i;
          i++;
          if (xmlData[i] === "!") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === "/") {
              closingTag = true;
              i++;
            }
            let tagName = "";
            for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              const attrStrStart = i - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                  return getErrorObject(
                    "InvalidTag",
                    "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                    getLineNumberForPosition(xmlData, tagStartPos)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === "<") {
                if (xmlData[i + 1] === "!") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === "?") {
                  i = readPI(xmlData, ++i);
                  if (i.err)
                    return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === "&") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
                  return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i));
                }
              }
            }
            if (xmlData[i] === "<") {
              i--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i])) {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length == 1) {
        return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t) => t.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === " " || char === "	" || char === "\n" || char === "\r";
    }
    function readPI(xmlData, i) {
      const start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == "?" || xmlData[i] == " ") {
          const tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
          } else {
            startChar = "";
          }
        } else if (xmlData[i] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] !== void 0 && matches[i][4] === void 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ";")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ";")
        return -1;
      if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ";")
          break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      const lines = xmlData.substring(0, index).split(/\r?\n/);
      return {
        line: lines.length,
        // column number is last line's length + 1, because column numbering starts at 1:
        col: lines[lines.length - 1].length + 1
      };
    }
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
  }
});

// node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
var require_OptionsBuilder = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"(exports2) {
    var defaultOptions = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      // remove NS from tag name or attribute name if true
      allowBooleanAttributes: false,
      //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      //Trim string values of tag and attributes
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
      },
      tagValueProcessor: function(tagName, val) {
        return val;
      },
      attributeValueProcessor: function(attrName, val) {
        return val;
      },
      stopNodes: [],
      //nested tags will not be parsed even for errors
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false
    };
    var buildOptions = function(options) {
      return Object.assign({}, defaultOptions, options);
    };
    exports2.buildOptions = buildOptions;
    exports2.defaultOptions = defaultOptions;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
var require_xmlNode = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"(exports2, module2) {
    "use strict";
    var XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val) {
        if (key === "__proto__")
          key = "#__proto__";
        this.child.push({ [key]: val });
      }
      addChild(node) {
        if (node.tagname === "__proto__")
          node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    module2.exports = XmlNode;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
var require_DocTypeReader = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"(exports2, module2) {
    function readDocType(xmlData, i) {
      const entities = {};
      if (xmlData[i + 3] === "O" && xmlData[i + 4] === "C" && xmlData[i + 5] === "T" && xmlData[i + 6] === "Y" && xmlData[i + 7] === "P" && xmlData[i + 8] === "E") {
        i = i + 9;
        let angleBracketsCount = 1;
        let hasBody = false, entity = false, comment = false;
        let exp = "";
        for (; i < xmlData.length; i++) {
          if (xmlData[i] === "<" && !comment) {
            if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "N" && xmlData[i + 4] === "T" && xmlData[i + 5] === "I" && xmlData[i + 6] === "T" && xmlData[i + 7] === "Y") {
              i += 7;
              entity = true;
            } else if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "L" && xmlData[i + 4] === "E" && xmlData[i + 5] === "M" && xmlData[i + 6] === "E" && xmlData[i + 7] === "N" && xmlData[i + 8] === "T") {
              i += 8;
            } else if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "A" && xmlData[i + 3] === "T" && xmlData[i + 4] === "T" && xmlData[i + 5] === "L" && xmlData[i + 6] === "I" && xmlData[i + 7] === "S" && xmlData[i + 8] === "T") {
              i += 8;
            } else if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "N" && xmlData[i + 3] === "O" && xmlData[i + 4] === "T" && xmlData[i + 5] === "A" && xmlData[i + 6] === "T" && xmlData[i + 7] === "I" && xmlData[i + 8] === "O" && xmlData[i + 9] === "N") {
              i += 9;
            } else if (
              //comment
              xmlData[i + 1] === "!" && xmlData[i + 2] === "-" && xmlData[i + 3] === "-"
            ) {
              comment = true;
            } else {
              throw new Error("Invalid DOCTYPE");
            }
            angleBracketsCount++;
            exp = "";
          } else if (xmlData[i] === ">") {
            if (comment) {
              if (xmlData[i - 1] === "-" && xmlData[i - 2] === "-") {
                comment = false;
                angleBracketsCount--;
              }
            } else {
              if (entity) {
                parseEntityExp(exp, entities);
                entity = false;
              }
              angleBracketsCount--;
            }
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i] === "[") {
            hasBody = true;
          } else {
            exp += xmlData[i];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i };
    }
    var entityRegex = RegExp(`^\\s([a-zA-z0-0]+)[ 	](['"])([^&]+)\\2`);
    function parseEntityExp(exp, entities) {
      const match = entityRegex.exec(exp);
      if (match) {
        entities[match[1]] = {
          regx: RegExp(`&${match[1]};`, "g"),
          val: match[3]
        };
      }
    }
    module2.exports = readDocType;
  }
});

// node_modules/strnum/strnum.js
var require_strnum = __commonJS({
  "node_modules/strnum/strnum.js"(exports2, module2) {
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var consider = {
      hex: true,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
      //skipLike: /regex/
    };
    function toNumber(str, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str || typeof str !== "string")
        return str;
      let trimmedStr = str.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr))
        return str;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          const eNotation = match[4] || match[6];
          if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".")
            return str;
          else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".")
            return str;
          else {
            const num = Number(trimmedStr);
            const numStr = "" + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (eNotation) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (trimmedStr.indexOf(".") !== -1) {
              if (numStr === "0" && numTrimmedByZeros === "")
                return num;
              else if (numStr === numTrimmedByZeros)
                return num;
              else if (sign && numStr === "-" + numTrimmedByZeros)
                return num;
              else
                return str;
            }
            if (leadingZeros) {
              if (numTrimmedByZeros === numStr)
                return num;
              else if (sign + numTrimmedByZeros === numStr)
                return num;
              else
                return str;
            }
            if (trimmedStr === numStr)
              return num;
            else if (trimmedStr === sign + numStr)
              return num;
            return str;
          }
        } else {
          return str;
        }
      }
    }
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, "");
        if (numStr === ".")
          numStr = "0";
        else if (numStr[0] === ".")
          numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".")
          numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    module2.exports = toNumber;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
var require_OrderedObjParser = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"(exports2, module2) {
    "use strict";
    var util = require_util2();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          // "lt" : { regex: /&(lt|#60);/g, val: "<" },
          // "gt" : { regex: /&(gt|#62);/g, val: ">" },
          // "amp" : { regex: /&(amp|#38);/g, val: "&" },
          // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
          // "apos" : { regex: /&(apos|#39);/g, val: "'" },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
      }
    };
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i = 0; i < entKeys.length; i++) {
        const ent = entKeys[i];
        this.lastEntities[ent] = {
          regex: new RegExp("&" + ent + ";", "g"),
          val: externalEntities[ent]
        };
      }
    }
    function parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
      if (val !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val = val.trim();
        }
        if (val.length > 0) {
          if (!escapeEntities)
            val = this.replaceEntitiesValue(val);
          const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);
          if (newval === null || newval === void 0) {
            return val;
          } else if (typeof newval !== typeof val || newval !== val) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            const trimmedVal = val.trim();
            if (trimmedVal === val) {
              return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
            } else {
              return val;
            }
          }
        }
      }
    }
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    function buildAttributesMap(attrStr, jPath) {
      if (!this.options.ignoreAttributes && typeof attrStr === "string") {
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = this.resolveNameSpace(matches[i][1]);
          let oldVal = matches[i][4];
          let aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (this.options.transformAttributeName) {
              aName = this.options.transformAttributeName(aName);
            }
            if (aName === "__proto__")
              aName = "#__proto__";
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(
                  oldVal,
                  this.options.parseAttributeValue,
                  this.options.numberParseOptions
                );
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var parseXml = function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            jPath = jPath.substr(0, jPath.lastIndexOf("."));
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            let tagData = readTagExp(xmlData, i, false, "?>");
            if (!tagData)
              throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath);
              }
              currentNode.addChild(childNode);
            }
            i = tagData.closeIndex + 1;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i = endIndex;
          } else if (xmlData.substr(i + 1, 2) === "!D") {
            const result = readDocType(xmlData, i);
            this.docTypeEntities = result.entities;
            i = result.i;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
              if (val == void 0)
                val = "";
              currentNode.add(this.options.textNodeName, val);
            }
            i = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
            let tagName = result.tagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                i = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
                if (!result2)
                  throw new Error(`Unexpected end of ${tagName}`);
                i = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              currentNode.addChild(childNode);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
                }
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
                currentNode.addChild(childNode);
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
                }
                currentNode.addChild(childNode);
                currentNode = childNode;
              }
              textData = "";
              i = closeIndex;
            }
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj.child;
    };
    var replaceEntitiesValue = function(val) {
      if (this.options.processEntities) {
        for (let entityName in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName];
          val = val.replace(entity.regx, entity.val);
        }
        for (let entityName in this.lastEntities) {
          const entity = this.lastEntities[entityName];
          val = val.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName in this.htmlEntities) {
            const entity = this.htmlEntities[entityName];
            val = val.replace(entity.regex, entity.val);
          }
        }
        val = val.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val;
    };
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0)
          isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(
          textData,
          currentNode.tagname,
          jPath,
          false,
          currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
          isLeafNode
        );
        if (textData !== void 0 && textData !== "")
          currentNode.add(this.options.textNodeName, textData);
        textData = "";
      }
      return textData;
    }
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = "*." + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp)
          return true;
      }
      return false;
    }
    function tagExpWithClosingIndex(xmlData, i, closingChar = ">") {
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < xmlData.length; index++) {
        let ch = xmlData[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index
              };
            }
          } else {
            return {
              data: tagExp,
              index
            };
          }
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    function readTagExp(xmlData, i, removeNSPrefix, closingChar = ">") {
      const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
      if (!result)
        return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
        tagExp = tagExp.substr(separatorIndex + 1);
      }
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent
      };
    }
    function readStopNodeData(xmlData, tagName, i) {
      const startIndex = i;
      let openTagCount = 1;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i),
                  i: closeIndex
                };
              }
            }
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            const closeIndex = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const closeIndex = findClosingIndex(xmlData, "-->", i + 3, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
            i = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i, ">");
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
                openTagCount++;
              }
              i = tagData.closeIndex;
            }
          }
        }
      }
    }
    function parseValue(val, shouldParse, options) {
      if (shouldParse && typeof val === "string") {
        const newval = val.trim();
        if (newval === "true")
          return true;
        else if (newval === "false")
          return false;
        else
          return toNumber(val, options);
      } else {
        if (util.isExist(val)) {
          return val;
        } else {
          return "";
        }
      }
    }
    module2.exports = OrderedObjParser;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/node2json.js
var require_node2json = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/node2json.js"(exports2) {
    "use strict";
    function prettify(node, options) {
      return compress(node, options);
    }
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === void 0)
          newJpath = property;
        else
          newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
          if (text === void 0)
            text = tagObj[property];
          else
            text += "" + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val, options);
          if (tagObj[":@"]) {
            assignAttributes(val, tagObj[":@"], newJpath, options);
          } else if (Object.keys(val).length === 1 && val[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
            val = val[options.textNodeName];
          } else if (Object.keys(val).length === 0) {
            if (options.alwaysCreateTextNode)
              val[options.textNodeName] = "";
            else
              val = "";
          }
          if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val];
            } else {
              compressedObj[property] = val;
            }
          }
        }
      }
      if (typeof text === "string") {
        if (text.length > 0)
          compressedObj[options.textNodeName] = text;
      } else if (text !== void 0)
        compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          const atrrName = keys[i];
          if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    function isLeafTag(obj, options) {
      const propCount = Object.keys(obj).length;
      if (propCount === 0 || propCount === 1 && obj[options.textNodeName])
        return true;
      return false;
    }
    exports2.prettify = prettify;
  }
});

// node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
var require_XMLParser = __commonJS({
  "node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"(exports2, module2) {
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator();
    var XMLParser = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      /**
       * Parse XML dats to JS object 
       * @param {string|Buffer} xmlData 
       * @param {boolean|Object} validationOption 
       */
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true)
            validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0)
          return orderedResult;
        else
          return prettify(orderedResult, this.options);
      }
      /**
       * Add Entity which is not by default supported by this library
       * @param {string} key 
       * @param {string} value 
       */
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    module2.exports = XMLParser;
  }
});

// node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
var require_orderedJs2Xml = __commonJS({
  "node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"(exports2, module2) {
    var EOL = "\n";
    function toXml(jArray, options) {
      let indentation = "";
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL;
      }
      return arrToStr(jArray, options, "", indentation);
    }
    function arrToStr(arr, options, jPath, indentation) {
      let xmlStr = "";
      let isPreviousElementTag = false;
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const tagName = propName(tagObj);
        let newJPath = "";
        if (jPath.length === 0)
          newJPath = tagName;
        else
          newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += tagText;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.cdataPropName) {
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          isPreviousElementTag = true;
          continue;
        } else if (tagName[0] === "?") {
          const attStr2 = attr_to_str(tagObj[":@"], options);
          const tempInd = tagName === "?xml" ? "" : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          isPreviousElementTag = true;
          continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== "") {
          newIdentation += options.indentBy;
        }
        const attStr = attr_to_str(tagObj[":@"], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode)
            xmlStr += tagStart + ">";
          else
            xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
          xmlStr += tagStart + "/>";
        } else if (tagValue && tagValue.endsWith(">")) {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        } else {
          xmlStr += tagStart + ">";
          if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
            xmlStr += indentation + options.indentBy + tagValue + indentation;
          } else {
            xmlStr += tagValue;
          }
          xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
      }
      return xmlStr;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function attr_to_str(attrMap, options) {
      let attrStr = "";
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
      for (let index in options.stopNodes) {
        if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName)
          return true;
      }
      return false;
    }
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i = 0; i < options.entities.length; i++) {
          const entity = options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    module2.exports = toXml;
  }
});

// node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
var require_json2xml = __commonJS({
  "node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"(exports2, module2) {
    "use strict";
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: "  ",
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function(key, a) {
        return a;
      },
      attributeValueProcessor: function(attrName, a) {
        return a;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp("&", "g"), val: "&amp;" },
        //it must be on top
        { regex: new RegExp(">", "g"), val: "&gt;" },
        { regex: new RegExp("<", "g"), val: "&lt;" },
        { regex: new RegExp("'", "g"), val: "&apos;" },
        { regex: new RegExp('"', "g"), val: "&quot;" }
      ],
      processEntities: true,
      stopNodes: []
      // transformTagName: false,
      // transformAttributeName: false,
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
    }
    Builder.prototype.build = function(jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
          jObj = {
            [this.options.arrayNodeName]: jObj
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val = "";
      for (let key in jObj) {
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          if (key[0] === "?")
            val += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
          else
            val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val += this.buildTextValNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
              val += this.replaceEntitiesValue(newval);
            } else {
              val += this.buildTextValNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          for (let j = 0; j < arrLen; j++) {
            const item = jObj[key][j];
            if (typeof item === "undefined") {
            } else if (item === null) {
              if (key[0] === "?")
                val += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
              else
                val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              val += this.processTextOrObjNode(item, key, level);
            } else {
              val += this.buildTextValNode(item, key, "", level);
            }
          }
        } else {
          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += this.buildAttrPairStr(Ks[j], "" + jObj[key][Ks[j]]);
            }
          } else {
            val += this.processTextOrObjNode(jObj[key], key, level);
          }
        }
      }
      return { attrStr, val };
    };
    Builder.prototype.buildAttrPairStr = function(attrName, val) {
      val = this.options.attributeValueProcessor(attrName, "" + val);
      val = this.replaceEntitiesValue(val);
      if (this.options.suppressBooleanAttributes && val === "true") {
        return " " + attrName;
      } else
        return " " + attrName + '="' + val + '"';
    };
    function processTextOrObjNode(object, key, level) {
      const result = this.j2x(object, level + 1);
      if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
        return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
      } else {
        return this.buildObjectNode(result.val, key, result.attrStr, level);
      }
    }
    Builder.prototype.buildObjectNode = function(val, key, attrStr, level) {
      if (val === "") {
        if (key[0] === "?")
          return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        }
      } else {
        let tagEndExp = "</" + key + this.tagEndChar;
        let piClosingChar = "";
        if (key[0] === "?") {
          piClosingChar = "?";
          tagEndExp = "";
        }
        if (attrStr && val.indexOf("<") === -1) {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val + tagEndExp;
        } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
          return this.indentate(level) + `<!--${val}-->` + this.newLine;
        } else {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val + this.indentate(level) + tagEndExp;
        }
      }
    };
    Builder.prototype.closeTag = function(key) {
      let closeTag = "";
      if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode)
          closeTag = "/";
      } else if (this.options.suppressEmptyNode) {
        closeTag = "/";
      } else {
        closeTag = `></${key}`;
      }
      return closeTag;
    };
    Builder.prototype.buildTextValNode = function(val, key, attrStr, level) {
      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
        return this.indentate(level) + `<![CDATA[${val}]]>` + this.newLine;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
        return this.indentate(level) + `<!--${val}-->` + this.newLine;
      } else if (key[0] === "?") {
        return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
      } else {
        let textValue = this.options.tagValueProcessor(key, val);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "") {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        } else {
          return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
        }
      }
    };
    Builder.prototype.replaceEntitiesValue = function(textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i = 0; i < this.options.entities.length; i++) {
          const entity = this.options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    };
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    module2.exports = Builder;
  }
});

// node_modules/fast-xml-parser/src/fxp.js
var require_fxp = __commonJS({
  "node_modules/fast-xml-parser/src/fxp.js"(exports2, module2) {
    "use strict";
    var validator = require_validator();
    var XMLParser = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module2.exports = {
      XMLParser,
      XMLValidator: validator,
      XMLBuilder
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js
var require_Aws_query = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deserializeAws_queryGetSessionTokenCommand = exports2.deserializeAws_queryGetFederationTokenCommand = exports2.deserializeAws_queryGetCallerIdentityCommand = exports2.deserializeAws_queryGetAccessKeyInfoCommand = exports2.deserializeAws_queryDecodeAuthorizationMessageCommand = exports2.deserializeAws_queryAssumeRoleWithWebIdentityCommand = exports2.deserializeAws_queryAssumeRoleWithSAMLCommand = exports2.deserializeAws_queryAssumeRoleCommand = exports2.serializeAws_queryGetSessionTokenCommand = exports2.serializeAws_queryGetFederationTokenCommand = exports2.serializeAws_queryGetCallerIdentityCommand = exports2.serializeAws_queryGetAccessKeyInfoCommand = exports2.serializeAws_queryDecodeAuthorizationMessageCommand = exports2.serializeAws_queryAssumeRoleWithWebIdentityCommand = exports2.serializeAws_queryAssumeRoleWithSAMLCommand = exports2.serializeAws_queryAssumeRoleCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs26();
    var fast_xml_parser_1 = require_fxp();
    var models_0_1 = require_models_0();
    var STSServiceException_1 = require_STSServiceException();
    var serializeAws_queryAssumeRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleRequest(input, context),
        Action: "AssumeRole",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryAssumeRoleCommand = serializeAws_queryAssumeRoleCommand;
    var serializeAws_queryAssumeRoleWithSAMLCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleWithSAMLRequest(input, context),
        Action: "AssumeRoleWithSAML",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryAssumeRoleWithSAMLCommand = serializeAws_queryAssumeRoleWithSAMLCommand;
    var serializeAws_queryAssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context),
        Action: "AssumeRoleWithWebIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryAssumeRoleWithWebIdentityCommand = serializeAws_queryAssumeRoleWithWebIdentityCommand;
    var serializeAws_queryDecodeAuthorizationMessageCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDecodeAuthorizationMessageRequest(input, context),
        Action: "DecodeAuthorizationMessage",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryDecodeAuthorizationMessageCommand = serializeAws_queryDecodeAuthorizationMessageCommand;
    var serializeAws_queryGetAccessKeyInfoCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetAccessKeyInfoRequest(input, context),
        Action: "GetAccessKeyInfo",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetAccessKeyInfoCommand = serializeAws_queryGetAccessKeyInfoCommand;
    var serializeAws_queryGetCallerIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetCallerIdentityRequest(input, context),
        Action: "GetCallerIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetCallerIdentityCommand = serializeAws_queryGetCallerIdentityCommand;
    var serializeAws_queryGetFederationTokenCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetFederationTokenRequest(input, context),
        Action: "GetFederationToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetFederationTokenCommand = serializeAws_queryGetFederationTokenCommand;
    var serializeAws_queryGetSessionTokenCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetSessionTokenRequest(input, context),
        Action: "GetSessionToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetSessionTokenCommand = serializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryAssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryAssumeRoleCommand = deserializeAws_queryAssumeRoleCommand;
    var deserializeAws_queryAssumeRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryAssumeRoleWithSAMLCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryAssumeRoleWithSAMLCommand = deserializeAws_queryAssumeRoleWithSAMLCommand;
    var deserializeAws_queryAssumeRoleWithSAMLCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryAssumeRoleWithWebIdentityCommand = deserializeAws_queryAssumeRoleWithWebIdentityCommand;
    var deserializeAws_queryAssumeRoleWithWebIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDecodeAuthorizationMessageCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDecodeAuthorizationMessageCommand = deserializeAws_queryDecodeAuthorizationMessageCommand;
    var deserializeAws_queryDecodeAuthorizationMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetAccessKeyInfoCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetAccessKeyInfoCommand = deserializeAws_queryGetAccessKeyInfoCommand;
    var deserializeAws_queryGetAccessKeyInfoCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: STSServiceException_1.STSServiceException,
        errorCode
      });
    };
    var deserializeAws_queryGetCallerIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetCallerIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetCallerIdentityCommand = deserializeAws_queryGetCallerIdentityCommand;
    var deserializeAws_queryGetCallerIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: STSServiceException_1.STSServiceException,
        errorCode
      });
    };
    var deserializeAws_queryGetFederationTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetFederationTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetFederationTokenCommand = deserializeAws_queryGetFederationTokenCommand;
    var deserializeAws_queryGetFederationTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetSessionTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetSessionTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetSessionTokenCommand = deserializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryGetSessionTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryExpiredTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIDPCommunicationErrorExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);
      const exception = new models_0_1.IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIDPRejectedClaimExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);
      const exception = new models_0_1.IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);
      const exception = new models_0_1.InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidIdentityTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);
      const exception = new models_0_1.InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);
      const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryPackedPolicyTooLargeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);
      const exception = new models_0_1.PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryRegionDisabledExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);
      const exception = new models_0_1.RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_queryAssumeRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TransitiveTagKeys != null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);
        if (input.TransitiveTagKeys?.length === 0) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExternalId != null) {
        entries["ExternalId"] = input.ExternalId;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      if (input.SourceIdentity != null) {
        entries["SourceIdentity"] = input.SourceIdentity;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithSAMLRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.PrincipalArn != null) {
        entries["PrincipalArn"] = input.PrincipalArn;
      }
      if (input.SAMLAssertion != null) {
        entries["SAMLAssertion"] = input.SAMLAssertion;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithWebIdentityRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.WebIdentityToken != null) {
        entries["WebIdentityToken"] = input.WebIdentityToken;
      }
      if (input.ProviderId != null) {
        entries["ProviderId"] = input.ProviderId;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryDecodeAuthorizationMessageRequest = (input, context) => {
      const entries = {};
      if (input.EncodedMessage != null) {
        entries["EncodedMessage"] = input.EncodedMessage;
      }
      return entries;
    };
    var serializeAws_queryGetAccessKeyInfoRequest = (input, context) => {
      const entries = {};
      if (input.AccessKeyId != null) {
        entries["AccessKeyId"] = input.AccessKeyId;
      }
      return entries;
    };
    var serializeAws_queryGetCallerIdentityRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var serializeAws_queryGetFederationTokenRequest = (input, context) => {
      const entries = {};
      if (input.Name != null) {
        entries["Name"] = input.Name;
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryGetSessionTokenRequest = (input, context) => {
      const entries = {};
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      return entries;
    };
    var serializeAws_querypolicyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryPolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input.arn != null) {
        entries["arn"] = input.arn;
      }
      return entries;
    };
    var serializeAws_queryTag = (input, context) => {
      const entries = {};
      if (input.Key != null) {
        entries["Key"] = input.Key;
      }
      if (input.Value != null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var serializeAws_querytagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_querytagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var deserializeAws_queryAssumedRoleUser = (output, context) => {
      const contents = {
        AssumedRoleId: void 0,
        Arn: void 0
      };
      if (output["AssumedRoleId"] !== void 0) {
        contents.AssumedRoleId = (0, smithy_client_1.expectString)(output["AssumedRoleId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithSAMLResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Subject: void 0,
        SubjectType: void 0,
        Issuer: void 0,
        Audience: void 0,
        NameQualifier: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Subject"] !== void 0) {
        contents.Subject = (0, smithy_client_1.expectString)(output["Subject"]);
      }
      if (output["SubjectType"] !== void 0) {
        contents.SubjectType = (0, smithy_client_1.expectString)(output["SubjectType"]);
      }
      if (output["Issuer"] !== void 0) {
        contents.Issuer = (0, smithy_client_1.expectString)(output["Issuer"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["NameQualifier"] !== void 0) {
        contents.NameQualifier = (0, smithy_client_1.expectString)(output["NameQualifier"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        SubjectFromWebIdentityToken: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Provider: void 0,
        Audience: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["SubjectFromWebIdentityToken"] !== void 0) {
        contents.SubjectFromWebIdentityToken = (0, smithy_client_1.expectString)(output["SubjectFromWebIdentityToken"]);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Provider"] !== void 0) {
        contents.Provider = (0, smithy_client_1.expectString)(output["Provider"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryCredentials = (output, context) => {
      const contents = {
        AccessKeyId: void 0,
        SecretAccessKey: void 0,
        SessionToken: void 0,
        Expiration: void 0
      };
      if (output["AccessKeyId"] !== void 0) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(output["AccessKeyId"]);
      }
      if (output["SecretAccessKey"] !== void 0) {
        contents.SecretAccessKey = (0, smithy_client_1.expectString)(output["SecretAccessKey"]);
      }
      if (output["SessionToken"] !== void 0) {
        contents.SessionToken = (0, smithy_client_1.expectString)(output["SessionToken"]);
      }
      if (output["Expiration"] !== void 0) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["Expiration"]));
      }
      return contents;
    };
    var deserializeAws_queryDecodeAuthorizationMessageResponse = (output, context) => {
      const contents = {
        DecodedMessage: void 0
      };
      if (output["DecodedMessage"] !== void 0) {
        contents.DecodedMessage = (0, smithy_client_1.expectString)(output["DecodedMessage"]);
      }
      return contents;
    };
    var deserializeAws_queryExpiredTokenException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryFederatedUser = (output, context) => {
      const contents = {
        FederatedUserId: void 0,
        Arn: void 0
      };
      if (output["FederatedUserId"] !== void 0) {
        contents.FederatedUserId = (0, smithy_client_1.expectString)(output["FederatedUserId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryGetAccessKeyInfoResponse = (output, context) => {
      const contents = {
        Account: void 0
      };
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      return contents;
    };
    var deserializeAws_queryGetCallerIdentityResponse = (output, context) => {
      const contents = {
        UserId: void 0,
        Account: void 0,
        Arn: void 0
      };
      if (output["UserId"] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output["UserId"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryGetFederationTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        FederatedUser: void 0,
        PackedPolicySize: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["FederatedUser"] !== void 0) {
        contents.FederatedUser = deserializeAws_queryFederatedUser(output["FederatedUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      return contents;
    };
    var deserializeAws_queryGetSessionTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      return contents;
    };
    var deserializeAws_queryIDPCommunicationErrorException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryIDPRejectedClaimException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidAuthorizationMessageException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidIdentityTokenException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryPackedPolicyTooLargeException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryRegionDisabledException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val) => val.trim() === "" && val.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join("&");
    var loadQueryErrorCode = (output, data) => {
      if (data.Error?.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js
var require_AssumeRoleCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssumeRoleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var middleware_signing_1 = require_dist_cjs23();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AssumeRoleCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleCommand)(output, context);
      }
    };
    exports2.AssumeRoleCommand = AssumeRoleCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js
var require_AssumeRoleWithSAMLCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssumeRoleWithSAMLCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithSAMLCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AssumeRoleWithSAMLCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithSAMLCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithSAMLCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithSAMLCommand)(output, context);
      }
    };
    exports2.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js
var require_AssumeRoleWithWebIdentityCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssumeRoleWithWebIdentityCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithWebIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AssumeRoleWithWebIdentityCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithWebIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithWebIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithWebIdentityCommand)(output, context);
      }
    };
    exports2.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js
var require_DecodeAuthorizationMessageCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DecodeAuthorizationMessageCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var middleware_signing_1 = require_dist_cjs23();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var DecodeAuthorizationMessageCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DecodeAuthorizationMessageCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "DecodeAuthorizationMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDecodeAuthorizationMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDecodeAuthorizationMessageCommand)(output, context);
      }
    };
    exports2.DecodeAuthorizationMessageCommand = DecodeAuthorizationMessageCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js
var require_GetAccessKeyInfoCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetAccessKeyInfoCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var middleware_signing_1 = require_dist_cjs23();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetAccessKeyInfoCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetAccessKeyInfoCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetAccessKeyInfoCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetAccessKeyInfoRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetAccessKeyInfoResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetAccessKeyInfoCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetAccessKeyInfoCommand)(output, context);
      }
    };
    exports2.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js
var require_GetCallerIdentityCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetCallerIdentityCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var middleware_signing_1 = require_dist_cjs23();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetCallerIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetCallerIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetCallerIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetCallerIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetCallerIdentityResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetCallerIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetCallerIdentityCommand)(output, context);
      }
    };
    exports2.GetCallerIdentityCommand = GetCallerIdentityCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js
var require_GetFederationTokenCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetFederationTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var middleware_signing_1 = require_dist_cjs23();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetFederationTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFederationTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetFederationTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFederationTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFederationTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetFederationTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetFederationTokenCommand)(output, context);
      }
    };
    exports2.GetFederationTokenCommand = GetFederationTokenCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js
var require_GetSessionTokenCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetSessionTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var middleware_signing_1 = require_dist_cjs23();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_0();
    var Aws_query_1 = require_Aws_query();
    var GetSessionTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetSessionTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetSessionTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetSessionTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetSessionTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetSessionTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetSessionTokenCommand)(output, context);
      }
    };
    exports2.GetSessionTokenCommand = GetSessionTokenCommand;
  }
});

// node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  "node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveStsAuthConfig = void 0;
    var middleware_signing_1 = require_dist_cjs23();
    var resolveStsAuthConfig = (input, { stsClientCtor }) => (0, middleware_signing_1.resolveAwsAuthConfig)({
      ...input,
      stsClientCtor
    });
    exports2.resolveStsAuthConfig = resolveStsAuthConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: "sts"
      };
    };
    exports2.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// node_modules/@aws-sdk/client-sts/package.json
var require_package2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.288.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sts",
        test: "yarn test:unit",
        "test:unit": "jest"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/config-resolver": "3.287.0",
        "@aws-sdk/credential-provider-node": "3.288.0",
        "@aws-sdk/fetch-http-handler": "3.282.0",
        "@aws-sdk/hash-node": "3.272.0",
        "@aws-sdk/invalid-dependency": "3.272.0",
        "@aws-sdk/middleware-content-length": "3.282.0",
        "@aws-sdk/middleware-endpoint": "3.282.0",
        "@aws-sdk/middleware-host-header": "3.282.0",
        "@aws-sdk/middleware-logger": "3.288.0",
        "@aws-sdk/middleware-recursion-detection": "3.282.0",
        "@aws-sdk/middleware-retry": "3.287.0",
        "@aws-sdk/middleware-sdk-sts": "3.282.0",
        "@aws-sdk/middleware-serde": "3.272.0",
        "@aws-sdk/middleware-signing": "3.282.0",
        "@aws-sdk/middleware-stack": "3.272.0",
        "@aws-sdk/middleware-user-agent": "3.282.0",
        "@aws-sdk/node-config-provider": "3.287.0",
        "@aws-sdk/node-http-handler": "3.282.0",
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/smithy-client": "3.279.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.279.0",
        "@aws-sdk/util-defaults-mode-node": "3.287.0",
        "@aws-sdk/util-endpoints": "3.272.0",
        "@aws-sdk/util-retry": "3.272.0",
        "@aws-sdk/util-user-agent-browser": "3.282.0",
        "@aws-sdk/util-user-agent-node": "3.287.0",
        "@aws-sdk/util-utf8": "3.254.0",
        "fast-xml-parser": "4.1.2",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js
var require_defaultStsRoleAssumers = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decorateDefaultCredentialProvider = exports2.getDefaultRoleAssumerWithWebIdentity = exports2.getDefaultRoleAssumer = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    var decorateDefaultRegion = (region) => {
      if (typeof region !== "function") {
        return region === void 0 ? ASSUME_ROLE_DEFAULT_REGION : region;
      }
      return async () => {
        try {
          return await region();
        } catch (e) {
          return ASSUME_ROLE_DEFAULT_REGION;
        }
      };
    };
    var getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports2.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports2.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports2.getDefaultRoleAssumer)(input, input.stsClientCtor),
      roleAssumerWithWebIdentity: (0, exports2.getDefaultRoleAssumerWithWebIdentity)(input, input.stsClientCtor),
      ...input
    });
    exports2.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js
var require_fromEnv = __commonJS({
  "node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromEnv = exports2.ENV_EXPIRATION = exports2.ENV_SESSION = exports2.ENV_SECRET = exports2.ENV_KEY = void 0;
    var property_provider_1 = require_dist_cjs16();
    exports2.ENV_KEY = "AWS_ACCESS_KEY_ID";
    exports2.ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    exports2.ENV_SESSION = "AWS_SESSION_TOKEN";
    exports2.ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var fromEnv = () => async () => {
      const accessKeyId = process.env[exports2.ENV_KEY];
      const secretAccessKey = process.env[exports2.ENV_SECRET];
      const sessionToken = process.env[exports2.ENV_SESSION];
      const expiry = process.env[exports2.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) }
        };
      }
      throw new property_provider_1.CredentialsProviderError("Unable to find environment variable credentials.");
    };
    exports2.fromEnv = fromEnv;
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromEnv(), exports2);
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHomeDir = void 0;
    var os_1 = require("os");
    var path_1 = require("path");
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      return (0, os_1.homedir)();
    };
    exports2.getHomeDir = getHomeDir;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js
var require_getProfileName = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getProfileName = exports2.DEFAULT_PROFILE = exports2.ENV_PROFILE = void 0;
    exports2.ENV_PROFILE = "AWS_PROFILE";
    exports2.DEFAULT_PROFILE = "default";
    var getProfileName = (init) => init.profile || process.env[exports2.ENV_PROFILE] || exports2.DEFAULT_PROFILE;
    exports2.getProfileName = getProfileName;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSSOTokenFilepath = void 0;
    var crypto_1 = require("crypto");
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath = (id) => {
      const hasher = (0, crypto_1.createHash)("sha1");
      const cacheName = hasher.update(id).digest("hex");
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
    exports2.getSSOTokenFilepath = getSSOTokenFilepath;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSSOTokenFromFile = void 0;
    var fs_1 = require("fs");
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (id) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    };
    exports2.getSSOTokenFromFile = getSSOTokenFromFile;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js
var require_getConfigFilepath = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getConfigFilepath = exports2.ENV_CONFIG_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports2.ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    var getConfigFilepath = () => process.env[exports2.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "config");
    exports2.getConfigFilepath = getConfigFilepath;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js
var require_getCredentialsFilepath = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCredentialsFilepath = exports2.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports2.ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    var getCredentialsFilepath = () => process.env[exports2.ENV_CREDENTIALS_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "credentials");
    exports2.getCredentialsFilepath = getCredentialsFilepath;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js
var require_getProfileData = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = (data) => Object.entries(data).filter(([key]) => profileKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {
      ...data.default && { default: data.default }
    });
    exports2.getProfileData = getProfileData;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseIni = void 0;
    var profileNameBlockList = ["__proto__", "profile __proto__"];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === "[" && line[line.length - 1] === "]";
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf("=");
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim()
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    };
    exports2.parseIni = parseIni;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.slurpFile = void 0;
    var fs_1 = require("fs");
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path, options) => {
      if (!filePromisesHash[path] || (options === null || options === void 0 ? void 0 : options.ignoreCache)) {
        filePromisesHash[path] = readFile(path, "utf8");
      }
      return filePromisesHash[path];
    };
    exports2.slurpFile = slurpFile;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath();
    var getProfileData_1 = require_getProfileData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const { filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(), configFilepath = (0, getConfigFilepath_1.getConfigFilepath)() } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni_1.parseIni).then(getProfileData_1.getProfileData).catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni_1.parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    };
    exports2.loadSharedConfigFiles = loadSharedConfigFiles;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSsoSessionData.js
var require_getSsoSessionData = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSsoSessionData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSsoSessionData = void 0;
    var ssoSessionKeyRegex = /^sso-session\s(["'])?([^\1]+)\1$/;
    var getSsoSessionData = (data) => Object.entries(data).filter(([key]) => ssoSessionKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [ssoSessionKeyRegex.exec(key)[2]]: value }), {});
    exports2.getSsoSessionData = getSsoSessionData;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js
var require_loadSsoSessionData = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadSsoSessionData = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getSsoSessionData_1 = require_getSsoSessionData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSsoSessionData = async (init = {}) => {
      var _a;
      return (0, slurpFile_1.slurpFile)((_a = init.configFilepath) !== null && _a !== void 0 ? _a : (0, getConfigFilepath_1.getConfigFilepath)()).then(parseIni_1.parseIni).then(getSsoSessionData_1.getSsoSessionData).catch(swallowError);
    };
    exports2.loadSsoSessionData = loadSsoSessionData;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js
var require_parseKnownFiles = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return {
        ...parsedFiles.configFile,
        ...parsedFiles.credentialsFile
      };
    };
    exports2.parseKnownFiles = parseKnownFiles;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js
var require_types3 = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getHomeDir(), exports2);
    tslib_1.__exportStar(require_getProfileName(), exports2);
    tslib_1.__exportStar(require_getSSOTokenFilepath(), exports2);
    tslib_1.__exportStar(require_getSSOTokenFromFile(), exports2);
    tslib_1.__exportStar(require_loadSharedConfigFiles(), exports2);
    tslib_1.__exportStar(require_loadSsoSessionData(), exports2);
    tslib_1.__exportStar(require_parseKnownFiles(), exports2);
    tslib_1.__exportStar(require_types3(), exports2);
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js
var require_httpRequest2 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs16();
    var buffer_1 = require("buffer");
    var http_1 = require("http");
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)({
          method: "GET",
          ...options,
          hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
        });
        req.on("error", (err) => {
          reject(Object.assign(new property_provider_1.ProviderError("Unable to connect to instance metadata service"), err));
          req.destroy();
        });
        req.on("timeout", () => {
          reject(new property_provider_1.ProviderError("TimeoutError from instance metadata service"));
          req.destroy();
        });
        req.on("response", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(Object.assign(new property_provider_1.ProviderError("Error response received from instance metadata service"), { statusCode }));
            req.destroy();
          }
          const chunks = [];
          res.on("data", (chunk) => {
            chunks.push(chunk);
          });
          res.on("end", () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports2.httpRequest = httpRequest;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js
var require_ImdsCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromImdsCredentials = exports2.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
    exports2.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration)
    });
    exports2.fromImdsCredentials = fromImdsCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js
var require_RemoteProviderInit = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.providerConfigFromInit = exports2.DEFAULT_MAX_RETRIES = exports2.DEFAULT_TIMEOUT = void 0;
    exports2.DEFAULT_TIMEOUT = 1e3;
    exports2.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({ maxRetries = exports2.DEFAULT_MAX_RETRIES, timeout = exports2.DEFAULT_TIMEOUT }) => ({ maxRetries, timeout });
    exports2.providerConfigFromInit = providerConfigFromInit;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js
var require_retry = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports2.retry = retry;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js
var require_fromContainerMetadata = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromContainerMetadata = exports2.ENV_CMDS_AUTH_TOKEN = exports2.ENV_CMDS_RELATIVE_URI = exports2.ENV_CMDS_FULL_URI = void 0;
    var property_provider_1 = require_dist_cjs16();
    var url_1 = require("url");
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    exports2.ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    exports2.ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    exports2.ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      return () => (0, retry_1.retry)(async () => {
        const requestOptions = await getCmdsUri();
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
          throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
        }
        return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
      }, maxRetries);
    };
    exports2.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports2.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[exports2.ENV_CMDS_AUTH_TOKEN]
        };
      }
      const buffer = await (0, httpRequest_1.httpRequest)({
        ...options,
        timeout
      });
      return buffer.toString();
    };
    var CMDS_IP = "169.254.170.2";
    var GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    var GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    var getCmdsUri = async () => {
      if (process.env[exports2.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports2.ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[exports2.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports2.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new property_provider_1.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${exports2.ENV_CMDS_RELATIVE_URI} or ${exports2.ENV_CMDS_FULL_URI} environment variable is set`, false);
    };
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js
var require_fromEnv2 = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs16();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
      }
    };
    exports2.fromEnv = fromEnv;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs16();
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
      const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const configValue = configSelector(mergedProfile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
      }
    };
    exports2.fromSharedConfigFiles = fromSharedConfigFiles;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js
var require_fromStatic2 = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs16();
    var isFunction = (func) => typeof func === "function";
    var fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue);
    exports2.fromStatic = fromStatic;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js
var require_configLoader = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs16();
    var fromEnv_1 = require_fromEnv2();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
    var fromStatic_1 = require_fromStatic2();
    var loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromEnv_1.fromEnv)(environmentVariableSelector), (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration), (0, fromStatic_1.fromStatic)(defaultValue)));
    exports2.loadConfig = loadConfig;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configLoader(), exports2);
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js
var require_Endpoint = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Endpoint = void 0;
    var Endpoint;
    (function(Endpoint2) {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
    })(Endpoint = exports2.Endpoint || (exports2.Endpoint = {}));
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js
var require_EndpointConfigOptions = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ENDPOINT_CONFIG_OPTIONS = exports2.CONFIG_ENDPOINT_NAME = exports2.ENV_ENDPOINT_NAME = void 0;
    exports2.ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    exports2.CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    exports2.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports2.CONFIG_ENDPOINT_NAME],
      default: void 0
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js
var require_EndpointMode = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EndpointMode = void 0;
    var EndpointMode;
    (function(EndpointMode2) {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
    })(EndpointMode = exports2.EndpointMode || (exports2.EndpointMode = {}));
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js
var require_EndpointModeConfigOptions = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ENDPOINT_MODE_CONFIG_OPTIONS = exports2.CONFIG_ENDPOINT_MODE_NAME = exports2.ENV_ENDPOINT_MODE_NAME = void 0;
    var EndpointMode_1 = require_EndpointMode();
    exports2.ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    exports2.CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    exports2.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[exports2.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js
var require_getInstanceMetadataEndpoint = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs30();
    var url_parser_1 = require_dist_cjs7();
    var Endpoint_1 = require_Endpoint();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions();
    var EndpointMode_1 = require_EndpointMode();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions();
    var getInstanceMetadataEndpoint = async () => (0, url_parser_1.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig());
    exports2.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () => (0, node_config_provider_1.loadConfig)(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode_1.EndpointMode)}`);
      }
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js
var require_getExtendedInstanceMetadataCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    var getExtendedInstanceMetadataCredentials = (credentials, logger) => {
      var _a;
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: " + STATIC_STABILITY_DOC_URL);
      const originalExpiration = (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    };
    exports2.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js
var require_staticStabilityProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 = require_getExtendedInstanceMetadataCredentials();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(credentials, logger);
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn("Credential renew failed: ", e);
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(pastCredentials, logger);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports2.staticStabilityProvider = staticStabilityProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js
var require_fromInstanceMetadata = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs16();
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    var staticStabilityProvider_1 = require_staticStabilityProvider();
    var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    var IMDS_TOKEN_PATH = "/latest/api/token";
    var fromInstanceMetadata = (init = {}) => (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), { logger: init.logger });
    exports2.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (await (0, retry_1.retry)(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              "x-aws-ec2-metadata-token": token
            },
            timeout
          });
        }
      };
    };
    var getMetadataToken = async (options) => (0, httpRequest_1.httpRequest)({
      ...options,
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    });
    var getProfile = async (options) => (await (0, httpRequest_1.httpRequest)({ ...options, path: IMDS_PATH })).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse((await (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_PATH + profile
      })).toString());
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js
var require_types4 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getInstanceMetadataEndpoint = exports2.httpRequest = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromContainerMetadata(), exports2);
    tslib_1.__exportStar(require_fromInstanceMetadata(), exports2);
    tslib_1.__exportStar(require_RemoteProviderInit(), exports2);
    tslib_1.__exportStar(require_types4(), exports2);
    var httpRequest_1 = require_httpRequest2();
    Object.defineProperty(exports2, "httpRequest", { enumerable: true, get: function() {
      return httpRequest_1.httpRequest;
    } });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    Object.defineProperty(exports2, "getInstanceMetadataEndpoint", { enumerable: true, get: function() {
      return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
    } });
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js
var require_resolveCredentialSource = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs28();
    var credential_provider_imds_1 = require_dist_cjs31();
    var property_provider_1 = require_dist_cjs16();
    var resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`);
      }
    };
    exports2.resolveCredentialSource = resolveCredentialSource;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js
var require_resolveAssumeRoleCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveAssumeRoleCredentials = exports2.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs16();
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var resolveCredentialSource_1 = require_resolveCredentialSource();
    var resolveProfileData_1 = require_resolveProfileData();
    var isAssumeRoleProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
    exports2.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
    var isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
    var resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${(0, shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
      }
      const sourceCredsProvider = source_profile ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, {
        ...visitedProfiles,
        [source_profile]: true
      }) : (0, resolveCredentialSource_1.resolveCredentialSource)(data.credential_source, profileName)();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
    exports2.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js
var require_getValidatedProcessCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) }
      };
    };
    exports2.getValidatedProcessCredentials = getValidatedProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs16();
    var child_process_1 = require("child_process");
    var util_1 = require("util");
    var getValidatedProcessCredentials_1 = require_getValidatedProcessCredentials();
    var resolveProcessCredentials = async (profileName, profiles) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, util_1.promisify)(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return (0, getValidatedProcessCredentials_1.getValidatedProcessCredentials)(profileName, data);
          } catch (error) {
            throw new property_provider_1.CredentialsProviderError(error.message);
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
      }
    };
    exports2.resolveProcessCredentials = resolveProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js
var require_fromProcess = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromProcess = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials();
    var fromProcess = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProcessCredentials_1.resolveProcessCredentials)((0, shared_ini_file_loader_1.getProfileName)(init), profiles);
    };
    exports2.fromProcess = fromProcess;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromProcess(), exports2);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials2 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveProcessCredentials = exports2.isProcessProfile = void 0;
    var credential_provider_process_1 = require_dist_cjs32();
    var isProcessProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string";
    exports2.isProcessProfile = isProcessProfile;
    var resolveProcessCredentials = async (options, profile) => (0, credential_provider_process_1.fromProcess)({
      ...options,
      profile
    })();
    exports2.resolveProcessCredentials = resolveProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js
var require_isSsoProfile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isSsoProfile = void 0;
    var isSsoProfile = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
    exports2.isSsoProfile = isSsoProfile;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js
var require_SSOServiceException = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOServiceException = void 0;
    var smithy_client_1 = require_dist_cjs26();
    var SSOServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOServiceException.prototype);
      }
    };
    exports2.SSOServiceException = SSOServiceException;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js
var require_models_02 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LogoutRequestFilterSensitiveLog = exports2.ListAccountsResponseFilterSensitiveLog = exports2.ListAccountsRequestFilterSensitiveLog = exports2.ListAccountRolesResponseFilterSensitiveLog = exports2.RoleInfoFilterSensitiveLog = exports2.ListAccountRolesRequestFilterSensitiveLog = exports2.GetRoleCredentialsResponseFilterSensitiveLog = exports2.RoleCredentialsFilterSensitiveLog = exports2.GetRoleCredentialsRequestFilterSensitiveLog = exports2.AccountInfoFilterSensitiveLog = exports2.UnauthorizedException = exports2.TooManyRequestsException = exports2.ResourceNotFoundException = exports2.InvalidRequestException = void 0;
    var smithy_client_1 = require_dist_cjs26();
    var SSOServiceException_1 = require_SSOServiceException();
    var InvalidRequestException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
      }
    };
    exports2.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
      }
    };
    exports2.ResourceNotFoundException = ResourceNotFoundException;
    var TooManyRequestsException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
      }
    };
    exports2.TooManyRequestsException = TooManyRequestsException;
    var UnauthorizedException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
      }
    };
    exports2.UnauthorizedException = UnauthorizedException;
    var AccountInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AccountInfoFilterSensitiveLog = AccountInfoFilterSensitiveLog;
    var GetRoleCredentialsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.GetRoleCredentialsRequestFilterSensitiveLog = GetRoleCredentialsRequestFilterSensitiveLog;
    var RoleCredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.secretAccessKey && { secretAccessKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.sessionToken && { sessionToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.RoleCredentialsFilterSensitiveLog = RoleCredentialsFilterSensitiveLog;
    var GetRoleCredentialsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.roleCredentials && { roleCredentials: (0, exports2.RoleCredentialsFilterSensitiveLog)(obj.roleCredentials) }
    });
    exports2.GetRoleCredentialsResponseFilterSensitiveLog = GetRoleCredentialsResponseFilterSensitiveLog;
    var ListAccountRolesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.ListAccountRolesRequestFilterSensitiveLog = ListAccountRolesRequestFilterSensitiveLog;
    var RoleInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RoleInfoFilterSensitiveLog = RoleInfoFilterSensitiveLog;
    var ListAccountRolesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListAccountRolesResponseFilterSensitiveLog = ListAccountRolesResponseFilterSensitiveLog;
    var ListAccountsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.ListAccountsRequestFilterSensitiveLog = ListAccountsRequestFilterSensitiveLog;
    var ListAccountsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListAccountsResponseFilterSensitiveLog = ListAccountsResponseFilterSensitiveLog;
    var LogoutRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.LogoutRequestFilterSensitiveLog = LogoutRequestFilterSensitiveLog;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson1 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deserializeAws_restJson1LogoutCommand = exports2.deserializeAws_restJson1ListAccountsCommand = exports2.deserializeAws_restJson1ListAccountRolesCommand = exports2.deserializeAws_restJson1GetRoleCredentialsCommand = exports2.serializeAws_restJson1LogoutCommand = exports2.serializeAws_restJson1ListAccountsCommand = exports2.serializeAws_restJson1ListAccountRolesCommand = exports2.serializeAws_restJson1GetRoleCredentialsCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_02();
    var SSOServiceException_1 = require_SSOServiceException();
    var serializeAws_restJson1GetRoleCredentialsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/federation/credentials`;
      const query = map({
        role_name: [, (0, smithy_client_1.expectNonNull)(input.roleName, `roleName`)],
        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1GetRoleCredentialsCommand = serializeAws_restJson1GetRoleCredentialsCommand;
    var serializeAws_restJson1ListAccountRolesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/assignment/roles`;
      const query = map({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],
        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListAccountRolesCommand = serializeAws_restJson1ListAccountRolesCommand;
    var serializeAws_restJson1ListAccountsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/assignment/accounts`;
      const query = map({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListAccountsCommand = serializeAws_restJson1ListAccountsCommand;
    var serializeAws_restJson1LogoutCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/logout`;
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1LogoutCommand = serializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRoleCredentialsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.roleCredentials != null) {
        contents.roleCredentials = deserializeAws_restJson1RoleCredentials(data.roleCredentials, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetRoleCredentialsCommand = deserializeAws_restJson1GetRoleCredentialsCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountRolesCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.nextToken != null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      if (data.roleList != null) {
        contents.roleList = deserializeAws_restJson1RoleListType(data.roleList, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1ListAccountRolesCommand = deserializeAws_restJson1ListAccountRolesCommand;
    var deserializeAws_restJson1ListAccountRolesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.accountList != null) {
        contents.accountList = deserializeAws_restJson1AccountListType(data.accountList, context);
      }
      if (data.nextToken != null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1ListAccountsCommand = deserializeAws_restJson1ListAccountsCommand;
    var deserializeAws_restJson1ListAccountsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1LogoutCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restJson1LogoutCommand = deserializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1LogoutCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var map = smithy_client_1.map;
    var deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnauthorizedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1AccountInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        accountName: (0, smithy_client_1.expectString)(output.accountName),
        emailAddress: (0, smithy_client_1.expectString)(output.emailAddress)
      };
    };
    var deserializeAws_restJson1AccountListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1AccountInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1RoleCredentials = (output, context) => {
      return {
        accessKeyId: (0, smithy_client_1.expectString)(output.accessKeyId),
        expiration: (0, smithy_client_1.expectLong)(output.expiration),
        secretAccessKey: (0, smithy_client_1.expectString)(output.secretAccessKey),
        sessionToken: (0, smithy_client_1.expectString)(output.sessionToken)
      };
    };
    var deserializeAws_restJson1RoleInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        roleName: (0, smithy_client_1.expectString)(output.roleName)
      };
    };
    var deserializeAws_restJson1RoleListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1RoleInfo(entry, context);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js
var require_GetRoleCredentialsCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetRoleCredentialsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetRoleCredentialsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetRoleCredentialsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "GetRoleCredentialsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRoleCredentialsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRoleCredentialsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetRoleCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetRoleCredentialsCommand)(output, context);
      }
    };
    exports2.GetRoleCredentialsCommand = GetRoleCredentialsCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js
var require_ListAccountRolesCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListAccountRolesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountRolesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAccountRolesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountRolesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountRolesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountRolesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountRolesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountRolesCommand)(output, context);
      }
    };
    exports2.ListAccountRolesCommand = ListAccountRolesCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js
var require_ListAccountsCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListAccountsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAccountsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountsCommand)(output, context);
      }
    };
    exports2.ListAccountsCommand = ListAccountsCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js
var require_LogoutCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LogoutCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_02();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var LogoutCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, LogoutCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "LogoutCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.LogoutRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1LogoutCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1LogoutCommand)(output, context);
      }
    };
    exports2.LogoutCommand = LogoutCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters3 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
      };
    };
    exports2.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// node_modules/@aws-sdk/client-sso/package.json
var require_package3 = __commonJS({
  "node_modules/@aws-sdk/client-sso/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.288.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/config-resolver": "3.287.0",
        "@aws-sdk/fetch-http-handler": "3.282.0",
        "@aws-sdk/hash-node": "3.272.0",
        "@aws-sdk/invalid-dependency": "3.272.0",
        "@aws-sdk/middleware-content-length": "3.282.0",
        "@aws-sdk/middleware-endpoint": "3.282.0",
        "@aws-sdk/middleware-host-header": "3.282.0",
        "@aws-sdk/middleware-logger": "3.288.0",
        "@aws-sdk/middleware-recursion-detection": "3.282.0",
        "@aws-sdk/middleware-retry": "3.287.0",
        "@aws-sdk/middleware-serde": "3.272.0",
        "@aws-sdk/middleware-stack": "3.272.0",
        "@aws-sdk/middleware-user-agent": "3.282.0",
        "@aws-sdk/node-config-provider": "3.287.0",
        "@aws-sdk/node-http-handler": "3.282.0",
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/smithy-client": "3.279.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.279.0",
        "@aws-sdk/util-defaults-mode-node": "3.287.0",
        "@aws-sdk/util-endpoints": "3.272.0",
        "@aws-sdk/util-retry": "3.272.0",
        "@aws-sdk/util-user-agent-browser": "3.282.0",
        "@aws-sdk/util-user-agent-node": "3.287.0",
        "@aws-sdk/util-utf8": "3.254.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

// node_modules/@aws-sdk/hash-node/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  "node_modules/@aws-sdk/hash-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs19();
    var util_utf8_1 = require_dist_cjs20();
    var buffer_1 = require("buffer");
    var crypto_1 = require("crypto");
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update((0, util_utf8_1.toUint8Array)(castSourceData(toHash, encoding)));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret ? (0, crypto_1.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, crypto_1.createHash)(this.algorithmIdentifier);
      }
    };
    exports2.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === "string") {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
  }
});

// node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  "node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs21();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === "string") {
            qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join("&");
    }
    exports2.buildQueryString = buildQueryString;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js
var require_constants6 = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports2.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js
var require_get_transformed_headers = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    };
    exports2.getTransformedHeaders = getTransformedHeaders;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js
var require_set_connection_timeout = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      request.on("socket", (socket) => {
        if (socket.connecting) {
          const timeoutId = setTimeout(() => {
            request.destroy();
            reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
              name: "TimeoutError"
            }));
          }, timeoutInMs);
          socket.on("connect", () => {
            clearTimeout(timeoutId);
          });
        }
      });
    };
    exports2.setConnectionTimeout = setConnectionTimeout;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js
var require_set_socket_timeout = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
      });
    };
    exports2.setSocketTimeout = setSocketTimeout;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js
var require_write_request_body = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.writeRequestBody = void 0;
    var stream_1 = require("stream");
    function writeRequestBody(httpRequest, request) {
      const expect = request.headers["Expect"] || request.headers["expect"];
      if (expect === "100-continue") {
        httpRequest.on("continue", () => {
          writeBody(httpRequest, request.body);
        });
      } else {
        writeBody(httpRequest, request.body);
      }
    }
    exports2.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
      } else if (body) {
        httpRequest.end(Buffer.from(body));
      } else {
        httpRequest.end();
      }
    }
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js
var require_node_http_handler = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeHttpHandler = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var querystring_builder_1 = require_dist_cjs34();
    var http_1 = require("http");
    var https_1 = require("https");
    var constants_1 = require_constants6();
    var get_transformed_headers_1 = require_get_transformed_headers();
    var set_connection_timeout_1 = require_set_connection_timeout();
    var set_socket_timeout_1 = require_set_socket_timeout();
    var write_request_body_1 = require_write_request_body();
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets })
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0 ? void 0 : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0 ? void 0 : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((resolve, reject) => {
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === "https:";
          const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path: queryString ? `${request.path}?${queryString}` : request.path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
          (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.socketTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
    };
    exports2.NodeHttpHandler = NodeHttpHandler;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js
var require_node_http2_handler = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var querystring_builder_1 = require_dist_cjs34();
    var http2_1 = require("http2");
    var get_transformed_headers_1 = require_get_transformed_headers();
    var write_request_body_1 = require_write_request_body();
    var NodeHttp2Handler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "h2" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((opts) => {
              resolve(opts || {});
            }).catch(reject);
          } else {
            resolve(options || {});
          }
        });
        this.sessionCache = /* @__PURE__ */ new Map();
      }
      destroy() {
        for (const sessions of this.sessionCache.values()) {
          sessions.forEach((session) => this.destroySession(session));
        }
        this.sessionCache.clear();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((resolve, rejectOriginal) => {
          let fulfilled = false;
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            rejectOriginal(abortError);
            return;
          }
          const { hostname, method, port, protocol, path, query } = request;
          const authority = `${protocol}//${hostname}${port ? `:${port}` : ""}`;
          const session = this.getSession(authority, disableConcurrentStreams || false);
          const reject = (err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            rejectOriginal(err);
          };
          const queryString = (0, querystring_builder_1.buildQueryString)(query || {});
          const req = session.request({
            ...request.headers,
            [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? `${path}?${queryString}` : path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method
          });
          session.ref();
          req.on("response", (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[":status"] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.deleteSessionFromCache(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = "TimeoutError";
              reject(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          req.on("frameError", (type, code, id) => {
            reject(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on("error", reject);
          req.on("aborted", () => {
            reject(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
          });
          req.on("close", () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              reject(new Error("Unexpected error: http2 request did not get a response"));
            }
          });
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
      getSession(authority, disableConcurrentStreams) {
        var _a;
        const sessionCache = this.sessionCache;
        const existingSessions = sessionCache.get(authority) || [];
        if (existingSessions.length > 0 && !disableConcurrentStreams)
          return existingSessions[0];
        const newSession = (0, http2_1.connect)(authority);
        newSession.unref();
        const destroySessionCb = () => {
          this.destroySession(newSession);
          this.deleteSessionFromCache(authority, newSession);
        };
        newSession.on("goaway", destroySessionCb);
        newSession.on("error", destroySessionCb);
        newSession.on("frameError", destroySessionCb);
        newSession.on("close", () => this.deleteSessionFromCache(authority, newSession));
        if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.sessionTimeout) {
          newSession.setTimeout(this.config.sessionTimeout, destroySessionCb);
        }
        existingSessions.push(newSession);
        sessionCache.set(authority, existingSessions);
        return newSession;
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
      deleteSessionFromCache(authority, session) {
        const existingSessions = this.sessionCache.get(authority) || [];
        if (!existingSessions.includes(session)) {
          return;
        }
        this.sessionCache.set(authority, existingSessions.filter((s) => s !== session));
      }
    };
    exports2.NodeHttp2Handler = NodeHttp2Handler;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js
var require_collector = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Collector = void 0;
    var stream_1 = require("stream");
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports2.Collector = Collector;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js
var require_stream_collector = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.streamCollector = void 0;
    var collector_1 = require_collector();
    var streamCollector = (stream) => new Promise((resolve, reject) => {
      const collector = new collector_1.Collector();
      stream.pipe(collector);
      stream.on("error", (err) => {
        collector.end();
        reject(err);
      });
      collector.on("error", reject);
      collector.on("finish", function() {
        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
        resolve(bytes);
      });
    });
    exports2.streamCollector = streamCollector;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_node_http_handler(), exports2);
    tslib_1.__exportStar(require_node_http2_handler(), exports2);
    tslib_1.__exportStar(require_stream_collector(), exports2);
  }
});

// node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js
var require_calculateBodyLength = __commonJS({
  "node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.calculateBodyLength = void 0;
    var fs_1 = require("fs");
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
    exports2.calculateBodyLength = calculateBodyLength;
  }
});

// node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  "node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_calculateBodyLength(), exports2);
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js
var require_is_crt_available = __commonJS({
  "node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (typeof require === "function" && typeof module2 !== "undefined" && module2.require && require("aws-crt")) {
          return ["md/crt-avail"];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports2.isCrtAvailable = isCrtAvailable;
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  "node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultUserAgent = exports2.UA_APP_ID_INI_NAME = exports2.UA_APP_ID_ENV_NAME = void 0;
    var node_config_provider_1 = require_dist_cjs30();
    var os_1 = require("os");
    var process_1 = require("process");
    var is_crt_available_1 = require_is_crt_available();
    exports2.UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    exports2.UA_APP_ID_INI_NAME = "sdk-ua-app-id";
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ["aws-sdk-js", clientVersion],
        [`os/${(0, os_1.platform)()}`, (0, os_1.release)()],
        ["lang/js"],
        ["md/nodejs", `${process_1.versions.node}`]
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env) => env[exports2.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports2.UA_APP_ID_INI_NAME],
        default: void 0
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports2.defaultUserAgent = defaultUserAgent;
  }
});

// node_modules/@aws-sdk/util-base64/dist-cjs/fromBase64.js
var require_fromBase64 = __commonJS({
  "node_modules/@aws-sdk/util-base64/dist-cjs/fromBase64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs19();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    var fromBase64 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
    exports2.fromBase64 = fromBase64;
  }
});

// node_modules/@aws-sdk/util-base64/dist-cjs/toBase64.js
var require_toBase64 = __commonJS({
  "node_modules/@aws-sdk/util-base64/dist-cjs/toBase64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs19();
    var toBase64 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    exports2.toBase64 = toBase64;
  }
});

// node_modules/@aws-sdk/util-base64/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  "node_modules/@aws-sdk/util-base64/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromBase64(), exports2);
    tslib_1.__exportStar(require_toBase64(), exports2);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json
var require_partitions = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json"(exports2, module2) {
    module2.exports = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "ap-southeast-4": {
            description: "Asia Pacific (Melbourne)"
          },
          "aws-global": {
            description: "AWS Standard global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "AWS China global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "AWS GovCloud (US) global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "c2s.ic.gov",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "AWS ISO (US) global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "sc2s.sgov.gov",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "AWS ISOB (US) global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }],
      version: "1.1"
    };
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js
var require_partition = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.partition = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var partitions_json_1 = tslib_1.__importDefault(require_partitions());
    var { partitions } = partitions_json_1.default;
    var DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
    var partition = (value) => {
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    };
    exports2.partition = partition;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js
var require_debugId = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.debugId = void 0;
    exports2.debugId = "endpoints";
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js
var require_toDebugString = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toDebugString = void 0;
    function toDebugString(input) {
      if (typeof input !== "object" || input == null) {
        return input;
      }
      if ("ref" in input) {
        return `$${toDebugString(input.ref)}`;
      }
      if ("fn" in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
      }
      return JSON.stringify(input, null, 2);
    }
    exports2.toDebugString = toDebugString;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js
var require_debug = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_debugId(), exports2);
    tslib_1.__exportStar(require_toDebugString(), exports2);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js
var require_EndpointError = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EndpointError = void 0;
    var EndpointError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "EndpointError";
      }
    };
    exports2.EndpointError = EndpointError;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js
var require_EndpointRuleObject = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js
var require_ErrorRuleObject = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js
var require_RuleSetObject = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js
var require_TreeRuleObject = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js
var require_shared = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js
var require_types5 = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EndpointError(), exports2);
    tslib_1.__exportStar(require_EndpointRuleObject(), exports2);
    tslib_1.__exportStar(require_ErrorRuleObject(), exports2);
    tslib_1.__exportStar(require_RuleSetObject(), exports2);
    tslib_1.__exportStar(require_TreeRuleObject(), exports2);
    tslib_1.__exportStar(require_shared(), exports2);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js
var require_isIpAddress = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isIpAddress = void 0;
    var IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
    var isIpAddress = (value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]");
    exports2.isIpAddress = isIpAddress;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js
var require_isValidHostLabel = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isValidHostLabel = void 0;
    var VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    var isValidHostLabel = (value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split(".");
      for (const label of labels) {
        if (!(0, exports2.isValidHostLabel)(label)) {
          return false;
        }
      }
      return true;
    };
    exports2.isValidHostLabel = isValidHostLabel;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js
var require_isVirtualHostableS3Bucket = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isVirtualHostableS3Bucket = void 0;
    var isIpAddress_1 = require_isIpAddress();
    var isValidHostLabel_1 = require_isValidHostLabel();
    var isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!(0, exports2.isVirtualHostableS3Bucket)(label)) {
            return false;
          }
        }
        return true;
      }
      if (!(0, isValidHostLabel_1.isValidHostLabel)(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if ((0, isIpAddress_1.isIpAddress)(value)) {
        return false;
      }
      return true;
    };
    exports2.isVirtualHostableS3Bucket = isVirtualHostableS3Bucket;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js
var require_parseArn = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseArn = void 0;
    var parseArn = (value) => {
      const segments = value.split(":");
      if (segments.length < 6)
        return null;
      const [arn, partition, service, region, accountId, ...resourceId] = segments;
      if (arn !== "arn" || partition === "" || service === "" || resourceId[0] === "")
        return null;
      return {
        partition,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
      };
    };
    exports2.parseArn = parseArn;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js
var require_aws = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_isVirtualHostableS3Bucket(), exports2);
    tslib_1.__exportStar(require_parseArn(), exports2);
    tslib_1.__exportStar(require_partition(), exports2);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js
var require_booleanEquals = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.booleanEquals = void 0;
    var booleanEquals = (value1, value2) => value1 === value2;
    exports2.booleanEquals = booleanEquals;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js
var require_getAttrPathList = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAttrPathList = void 0;
    var types_1 = require_types5();
    var getAttrPathList = (path) => {
      const parts = path.split(".");
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
          if (part.indexOf("]") !== part.length - 1) {
            throw new types_1.EndpointError(`Path: '${path}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new types_1.EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    };
    exports2.getAttrPathList = getAttrPathList;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js
var require_getAttr = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAttr = void 0;
    var types_1 = require_types5();
    var getAttrPathList_1 = require_getAttrPathList();
    var getAttr = (value, path) => (0, getAttrPathList_1.getAttrPathList)(path).reduce((acc, index) => {
      if (typeof acc !== "object") {
        throw new types_1.EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
      } else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
      }
      return acc[index];
    }, value);
    exports2.getAttr = getAttr;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js
var require_isSet = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isSet = void 0;
    var isSet = (value) => value != null;
    exports2.isSet = isSet;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js
var require_not = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.not = void 0;
    var not = (value) => !value;
    exports2.not = not;
  }
});

// node_modules/@aws-sdk/types/dist-cjs/abort.js
var require_abort = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/abort.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/auth.js
var require_auth = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/auth.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpAuthLocation = void 0;
    var HttpAuthLocation;
    (function(HttpAuthLocation2) {
      HttpAuthLocation2["HEADER"] = "header";
      HttpAuthLocation2["QUERY"] = "query";
    })(HttpAuthLocation = exports2.HttpAuthLocation || (exports2.HttpAuthLocation = {}));
  }
});

// node_modules/@aws-sdk/types/dist-cjs/checksum.js
var require_checksum = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/checksum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/client.js
var require_client2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/command.js
var require_command2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/command.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/credentials.js
var require_credentials = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/credentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/crypto.js
var require_crypto = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/dns.js
var require_dns = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/dns.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HostAddressType = void 0;
    var HostAddressType;
    (function(HostAddressType2) {
      HostAddressType2["AAAA"] = "AAAA";
      HostAddressType2["A"] = "A";
    })(HostAddressType = exports2.HostAddressType || (exports2.HostAddressType = {}));
  }
});

// node_modules/@aws-sdk/types/dist-cjs/endpoint.js
var require_endpoint = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/endpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EndpointURLScheme = void 0;
    var EndpointURLScheme;
    (function(EndpointURLScheme2) {
      EndpointURLScheme2["HTTP"] = "http";
      EndpointURLScheme2["HTTPS"] = "https";
    })(EndpointURLScheme = exports2.EndpointURLScheme || (exports2.EndpointURLScheme = {}));
  }
});

// node_modules/@aws-sdk/types/dist-cjs/eventStream.js
var require_eventStream = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/eventStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/http.js
var require_http = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/http.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js
var require_AnonymousIdentity = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js
var require_AwsCredentialIdentity = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js
var require_Identity = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js
var require_LoginIdentity = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js
var require_TokenIdentity = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/identity/index.js
var require_identity = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/identity/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AnonymousIdentity(), exports2);
    tslib_1.__exportStar(require_AwsCredentialIdentity(), exports2);
    tslib_1.__exportStar(require_Identity(), exports2);
    tslib_1.__exportStar(require_LoginIdentity(), exports2);
    tslib_1.__exportStar(require_TokenIdentity(), exports2);
  }
});

// node_modules/@aws-sdk/types/dist-cjs/logger.js
var require_logger = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/logger.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/middleware.js
var require_middleware2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/middleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/pagination.js
var require_pagination = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/pagination.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/profile.js
var require_profile = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/profile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/request.js
var require_request = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/request.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/response.js
var require_response = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/response.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/retry.js
var require_retry2 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/retry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/serde.js
var require_serde = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/serde.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/shapes.js
var require_shapes = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/shapes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/signature.js
var require_signature = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/signature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/stream.js
var require_stream = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/stream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/token.js
var require_token = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/token.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/transfer.js
var require_transfer = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/transfer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/util.js
var require_util3 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/waiter.js
var require_waiter = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/waiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/types/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  "node_modules/@aws-sdk/types/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_abort(), exports2);
    tslib_1.__exportStar(require_auth(), exports2);
    tslib_1.__exportStar(require_checksum(), exports2);
    tslib_1.__exportStar(require_client2(), exports2);
    tslib_1.__exportStar(require_command2(), exports2);
    tslib_1.__exportStar(require_credentials(), exports2);
    tslib_1.__exportStar(require_crypto(), exports2);
    tslib_1.__exportStar(require_dns(), exports2);
    tslib_1.__exportStar(require_endpoint(), exports2);
    tslib_1.__exportStar(require_eventStream(), exports2);
    tslib_1.__exportStar(require_http(), exports2);
    tslib_1.__exportStar(require_identity(), exports2);
    tslib_1.__exportStar(require_logger(), exports2);
    tslib_1.__exportStar(require_middleware2(), exports2);
    tslib_1.__exportStar(require_pagination(), exports2);
    tslib_1.__exportStar(require_profile(), exports2);
    tslib_1.__exportStar(require_request(), exports2);
    tslib_1.__exportStar(require_response(), exports2);
    tslib_1.__exportStar(require_retry2(), exports2);
    tslib_1.__exportStar(require_serde(), exports2);
    tslib_1.__exportStar(require_shapes(), exports2);
    tslib_1.__exportStar(require_signature(), exports2);
    tslib_1.__exportStar(require_stream(), exports2);
    tslib_1.__exportStar(require_token(), exports2);
    tslib_1.__exportStar(require_transfer(), exports2);
    tslib_1.__exportStar(require_util3(), exports2);
    tslib_1.__exportStar(require_waiter(), exports2);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js
var require_parseURL = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseURL = void 0;
    var types_1 = require_dist_cjs39();
    var isIpAddress_1 = require_isIpAddress();
    var DEFAULT_PORTS = {
      [types_1.EndpointURLScheme.HTTP]: 80,
      [types_1.EndpointURLScheme.HTTPS]: 443
    };
    var parseURL = (value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === "object" && "hostname" in value) {
            const { hostname: hostname2, port, protocol: protocol2 = "", path = "", query = {} } = value;
            const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path}`);
            url.search = Object.entries(query).map(([k, v]) => `${k}=${v}`).join("&");
            return url;
          }
          return new URL(value);
        } catch (error) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(types_1.EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = (0, isIpAddress_1.isIpAddress)(hostname);
      const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
      };
    };
    exports2.parseURL = parseURL;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js
var require_stringEquals = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringEquals = void 0;
    var stringEquals = (value1, value2) => value1 === value2;
    exports2.stringEquals = stringEquals;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js
var require_substring = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.substring = void 0;
    var substring = (input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    };
    exports2.substring = substring;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js
var require_uriEncode = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uriEncode = void 0;
    var uriEncode = (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);
    exports2.uriEncode = uriEncode;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js
var require_lib = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.aws = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    exports2.aws = tslib_1.__importStar(require_aws());
    tslib_1.__exportStar(require_booleanEquals(), exports2);
    tslib_1.__exportStar(require_getAttr(), exports2);
    tslib_1.__exportStar(require_isSet(), exports2);
    tslib_1.__exportStar(require_isValidHostLabel(), exports2);
    tslib_1.__exportStar(require_not(), exports2);
    tslib_1.__exportStar(require_parseURL(), exports2);
    tslib_1.__exportStar(require_stringEquals(), exports2);
    tslib_1.__exportStar(require_substring(), exports2);
    tslib_1.__exportStar(require_uriEncode(), exports2);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js
var require_evaluateTemplate = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateTemplate = void 0;
    var lib_1 = require_lib();
    var evaluateTemplate = (template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
          const [refName, attrName] = parameterName.split("#");
          evaluatedTemplateArr.push((0, lib_1.getAttr)(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join("");
    };
    exports2.evaluateTemplate = evaluateTemplate;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js
var require_getReferenceValue = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getReferenceValue = void 0;
    var getReferenceValue = ({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      return referenceRecord[ref];
    };
    exports2.getReferenceValue = getReferenceValue;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js
var require_evaluateExpression = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateExpression = void 0;
    var types_1 = require_types5();
    var callFunction_1 = require_callFunction();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getReferenceValue_1 = require_getReferenceValue();
    var evaluateExpression = (obj, keyName, options) => {
      if (typeof obj === "string") {
        return (0, evaluateTemplate_1.evaluateTemplate)(obj, options);
      } else if (obj["fn"]) {
        return (0, callFunction_1.callFunction)(obj, options);
      } else if (obj["ref"]) {
        return (0, getReferenceValue_1.getReferenceValue)(obj, options);
      }
      throw new types_1.EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    };
    exports2.evaluateExpression = evaluateExpression;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js
var require_callFunction = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.callFunction = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var lib = tslib_1.__importStar(require_lib());
    var evaluateExpression_1 = require_evaluateExpression();
    var callFunction = ({ fn, argv }, options) => {
      const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : (0, evaluateExpression_1.evaluateExpression)(arg, "arg", options));
      return fn.split(".").reduce((acc, key) => acc[key], lib)(...evaluatedArgs);
    };
    exports2.callFunction = callFunction;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js
var require_evaluateCondition = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateCondition = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types5();
    var callFunction_1 = require_callFunction();
    var evaluateCondition = ({ assign, ...fnArgs }, options) => {
      var _a, _b;
      if (assign && assign in options.referenceRecord) {
        throw new types_1.EndpointError(`'${assign}' is already defined in Reference Record.`);
      }
      const value = (0, callFunction_1.callFunction)(fnArgs, options);
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `evaluateCondition: ${(0, debug_1.toDebugString)(fnArgs)} = ${(0, debug_1.toDebugString)(value)}`);
      return {
        result: value === "" ? true : !!value,
        ...assign != null && { toAssign: { name: assign, value } }
      };
    };
    exports2.evaluateCondition = evaluateCondition;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js
var require_evaluateConditions = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateConditions = void 0;
    var debug_1 = require_debug();
    var evaluateCondition_1 = require_evaluateCondition();
    var evaluateConditions = (conditions = [], options) => {
      var _a, _b;
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = (0, evaluateCondition_1.evaluateCondition)(condition, {
          ...options,
          referenceRecord: {
            ...options.referenceRecord,
            ...conditionsReferenceRecord
          }
        });
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `assign: ${toAssign.name} := ${(0, debug_1.toDebugString)(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    };
    exports2.evaluateConditions = evaluateConditions;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js
var require_getEndpointHeaders = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointHeaders = void 0;
    var types_1 = require_types5();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
      ...acc,
      [headerKey]: headerVal.map((headerValEntry) => {
        const processedExpr = (0, evaluateExpression_1.evaluateExpression)(headerValEntry, "Header value entry", options);
        if (typeof processedExpr !== "string") {
          throw new types_1.EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
        }
        return processedExpr;
      })
    }), {});
    exports2.getEndpointHeaders = getEndpointHeaders;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js
var require_getEndpointProperty = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointProperty = void 0;
    var types_1 = require_types5();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointProperty = (property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => (0, exports2.getEndpointProperty)(propertyEntry, options));
      }
      switch (typeof property) {
        case "string":
          return (0, evaluateTemplate_1.evaluateTemplate)(property, options);
        case "object":
          if (property === null) {
            throw new types_1.EndpointError(`Unexpected endpoint property: ${property}`);
          }
          return (0, getEndpointProperties_1.getEndpointProperties)(property, options);
        case "boolean":
          return property;
        default:
          throw new types_1.EndpointError(`Unexpected endpoint property type: ${typeof property}`);
      }
    };
    exports2.getEndpointProperty = getEndpointProperty;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js
var require_getEndpointProperties = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointProperties = void 0;
    var getEndpointProperty_1 = require_getEndpointProperty();
    var getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
      ...acc,
      [propertyKey]: (0, getEndpointProperty_1.getEndpointProperty)(propertyVal, options)
    }), {});
    exports2.getEndpointProperties = getEndpointProperties;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js
var require_getEndpointUrl = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointUrl = void 0;
    var types_1 = require_types5();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointUrl = (endpointUrl, options) => {
      const expression = (0, evaluateExpression_1.evaluateExpression)(endpointUrl, "Endpoint URL", options);
      if (typeof expression === "string") {
        try {
          return new URL(expression);
        } catch (error) {
          console.error(`Failed to construct URL with ${expression}`, error);
          throw error;
        }
      }
      throw new types_1.EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
    };
    exports2.getEndpointUrl = getEndpointUrl;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js
var require_evaluateEndpointRule = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateEndpointRule = void 0;
    var debug_1 = require_debug();
    var evaluateConditions_1 = require_evaluateConditions();
    var getEndpointHeaders_1 = require_getEndpointHeaders();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointUrl_1 = require_getEndpointUrl();
    var evaluateEndpointRule = (endpointRule, options) => {
      var _a, _b;
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      };
      const { url, properties, headers } = endpoint;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `Resolving endpoint from template: ${(0, debug_1.toDebugString)(endpoint)}`);
      return {
        ...headers != void 0 && {
          headers: (0, getEndpointHeaders_1.getEndpointHeaders)(headers, endpointRuleOptions)
        },
        ...properties != void 0 && {
          properties: (0, getEndpointProperties_1.getEndpointProperties)(properties, endpointRuleOptions)
        },
        url: (0, getEndpointUrl_1.getEndpointUrl)(url, endpointRuleOptions)
      };
    };
    exports2.evaluateEndpointRule = evaluateEndpointRule;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js
var require_evaluateErrorRule = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateErrorRule = void 0;
    var types_1 = require_types5();
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateExpression_1 = require_evaluateExpression();
    var evaluateErrorRule = (errorRule, options) => {
      const { conditions, error } = errorRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      throw new types_1.EndpointError((0, evaluateExpression_1.evaluateExpression)(error, "Error", {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      }));
    };
    exports2.evaluateErrorRule = evaluateErrorRule;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js
var require_evaluateTreeRule = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateTreeRule = void 0;
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateRules_1 = require_evaluateRules();
    var evaluateTreeRule = (treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      return (0, evaluateRules_1.evaluateRules)(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      });
    };
    exports2.evaluateTreeRule = evaluateTreeRule;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js
var require_evaluateRules = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateRules = void 0;
    var types_1 = require_types5();
    var evaluateEndpointRule_1 = require_evaluateEndpointRule();
    var evaluateErrorRule_1 = require_evaluateErrorRule();
    var evaluateTreeRule_1 = require_evaluateTreeRule();
    var evaluateRules = (rules, options) => {
      for (const rule of rules) {
        if (rule.type === "endpoint") {
          const endpointOrUndefined = (0, evaluateEndpointRule_1.evaluateEndpointRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === "error") {
          (0, evaluateErrorRule_1.evaluateErrorRule)(rule, options);
        } else if (rule.type === "tree") {
          const endpointOrUndefined = (0, evaluateTreeRule_1.evaluateTreeRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new types_1.EndpointError(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new types_1.EndpointError(`Rules evaluation failed`);
    };
    exports2.evaluateRules = evaluateRules;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js
var require_utils = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_evaluateRules(), exports2);
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js
var require_resolveEndpoint = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEndpoint = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types5();
    var utils_1 = require_utils();
    var resolveEndpoint = (ruleSetObject, options) => {
      var _a, _b, _c, _d, _e, _f;
      const { endpointParams, logger } = options;
      const { parameters, rules } = ruleSetObject;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `Initial EndpointParams: ${(0, debug_1.toDebugString)(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters).filter(([, v]) => v.default != null).map(([k, v]) => [k, v.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = (_c = endpointParams[paramKey]) !== null && _c !== void 0 ? _c : paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters).filter(([, v]) => v.required).map(([k]) => k);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new types_1.EndpointError(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = (0, utils_1.evaluateRules)(rules, { endpointParams, logger, referenceRecord: {} });
      if ((_d = options.endpointParams) === null || _d === void 0 ? void 0 : _d.Endpoint) {
        try {
          const givenEndpoint = new URL(options.endpointParams.Endpoint);
          const { protocol, port } = givenEndpoint;
          endpoint.url.protocol = protocol;
          endpoint.url.port = port;
        } catch (e) {
        }
      }
      (_f = (_e = options.logger) === null || _e === void 0 ? void 0 : _e.debug) === null || _f === void 0 ? void 0 : _f.call(_e, debug_1.debugId, `Resolved endpoint: ${(0, debug_1.toDebugString)(endpoint)}`);
      return endpoint;
    };
    exports2.resolveEndpoint = resolveEndpoint;
  }
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  "node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_partition(), exports2);
    tslib_1.__exportStar(require_resolveEndpoint(), exports2);
    tslib_1.__exportStar(require_types5(), exports2);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_ruleset = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ruleSet = void 0;
    var p = "required";
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = "PartitionResult";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = { [p]: false, "type": "String" };
    var f = { [p]: true, "default": false, "type": "Boolean" };
    var g = { [s]: "Endpoint" };
    var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var j = {};
    var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
    var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
    exports2.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs40();
    var ruleset_1 = require_ruleset();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports2.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs26();
    var url_parser_1 = require_dist_cjs7();
    var util_base64_1 = require_dist_cjs38();
    var util_utf8_1 = require_dist_cjs20();
    var endpointResolver_1 = require_endpointResolver();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2019-06-10",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "SSO",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js
var require_constants7 = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IMDS_REGION_PATH = exports2.DEFAULTS_MODE_OPTIONS = exports2.ENV_IMDS_DISABLED = exports2.AWS_DEFAULT_REGION_ENV = exports2.AWS_REGION_ENV = exports2.AWS_EXECUTION_ENV = void 0;
    exports2.AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    exports2.AWS_REGION_ENV = "AWS_REGION";
    exports2.AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    exports2.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    exports2.DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    exports2.IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js
var require_defaultsModeConfig = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
    var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    exports2.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js
var require_resolveDefaultsModeConfig = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveDefaultsModeConfig = void 0;
    var config_resolver_1 = require_dist_cjs3();
    var credential_provider_imds_1 = require_dist_cjs31();
    var node_config_provider_1 = require_dist_cjs30();
    var property_provider_1 = require_dist_cjs16();
    var constants_1 = require_constants7();
    var defaultsModeConfig_1 = require_defaultsModeConfig();
    var resolveDefaultsModeConfig = ({ region = (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0, node_config_provider_1.loadConfig)(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {}) => (0, property_provider_1.memoize)(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
      }
    });
    exports2.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
    var resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    };
    var inferPhysicalRegion = async () => {
      var _a;
      if (process.env[constants_1.AWS_EXECUTION_ENV] && (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0 ? _a : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
          const endpoint = await (0, credential_provider_imds_1.getInstanceMetadataEndpoint)();
          return (await (0, credential_provider_imds_1.httpRequest)({ ...endpoint, path: constants_1.IMDS_REGION_PATH })).toString();
        } catch (e) {
        }
      }
    };
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_resolveDefaultsModeConfig(), exports2);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var config_resolver_1 = require_dist_cjs3();
    var hash_node_1 = require_dist_cjs33();
    var middleware_retry_1 = require_dist_cjs15();
    var node_config_provider_1 = require_dist_cjs30();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs36();
    var util_retry_1 = require_dist_cjs14();
    var util_user_agent_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs26();
    var util_defaults_mode_node_1 = require_dist_cjs41();
    var smithy_client_2 = require_dist_cjs26();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js
var require_SSOClient = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOClient = void 0;
    var config_resolver_1 = require_dist_cjs3();
    var middleware_content_length_1 = require_dist_cjs5();
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_host_header_1 = require_dist_cjs10();
    var middleware_logger_1 = require_dist_cjs11();
    var middleware_recursion_detection_1 = require_dist_cjs12();
    var middleware_retry_1 = require_dist_cjs15();
    var middleware_user_agent_1 = require_dist_cjs24();
    var smithy_client_1 = require_dist_cjs26();
    var EndpointParameters_1 = require_EndpointParameters3();
    var runtimeConfig_1 = require_runtimeConfig();
    var SSOClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.SSOClient = SSOClient;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js
var require_SSO = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSO = void 0;
    var GetRoleCredentialsCommand_1 = require_GetRoleCredentialsCommand();
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var LogoutCommand_1 = require_LogoutCommand();
    var SSOClient_1 = require_SSOClient();
    var SSO = class extends SSOClient_1.SSOClient {
      getRoleCredentials(args, optionsOrCb, cb) {
        const command = new GetRoleCredentialsCommand_1.GetRoleCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccountRoles(args, optionsOrCb, cb) {
        const command = new ListAccountRolesCommand_1.ListAccountRolesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccounts(args, optionsOrCb, cb) {
        const command = new ListAccountsCommand_1.ListAccountsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      logout(args, optionsOrCb, cb) {
        const command = new LogoutCommand_1.LogoutCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports2.SSO = SSO;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js
var require_commands = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_GetRoleCredentialsCommand(), exports2);
    tslib_1.__exportStar(require_ListAccountRolesCommand(), exports2);
    tslib_1.__exportStar(require_ListAccountsCommand(), exports2);
    tslib_1.__exportStar(require_LogoutCommand(), exports2);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js
var require_models = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_02(), exports2);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js
var require_Interfaces = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js
var require_ListAccountRolesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListAccountRoles = void 0;
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountRolesCommand_1.ListAccountRolesCommand(input), ...args);
    };
    async function* paginateListAccountRoles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListAccountRoles = paginateListAccountRoles;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js
var require_ListAccountsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListAccounts = void 0;
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);
    };
    async function* paginateListAccounts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListAccounts = paginateListAccounts;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js
var require_pagination2 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces(), exports2);
    tslib_1.__exportStar(require_ListAccountRolesPaginator(), exports2);
    tslib_1.__exportStar(require_ListAccountsPaginator(), exports2);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSO(), exports2);
    tslib_1.__exportStar(require_SSOClient(), exports2);
    tslib_1.__exportStar(require_commands(), exports2);
    tslib_1.__exportStar(require_models(), exports2);
    tslib_1.__exportStar(require_pagination2(), exports2);
    var SSOServiceException_1 = require_SSOServiceException();
    Object.defineProperty(exports2, "SSOServiceException", { enumerable: true, get: function() {
      return SSOServiceException_1.SSOServiceException;
    } });
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/constants.js
var require_constants8 = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.REFRESH_MESSAGE = exports2.EXPIRE_WINDOW_MS = void 0;
    exports2.EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    exports2.REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/SSOOIDCServiceException.js
var require_SSOOIDCServiceException = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/SSOOIDCServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOOIDCServiceException = void 0;
    var smithy_client_1 = require_dist_cjs26();
    var SSOOIDCServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOOIDCServiceException.prototype);
      }
    };
    exports2.SSOOIDCServiceException = SSOOIDCServiceException;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/models_0.js
var require_models_03 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StartDeviceAuthorizationResponseFilterSensitiveLog = exports2.StartDeviceAuthorizationRequestFilterSensitiveLog = exports2.RegisterClientResponseFilterSensitiveLog = exports2.RegisterClientRequestFilterSensitiveLog = exports2.CreateTokenResponseFilterSensitiveLog = exports2.CreateTokenRequestFilterSensitiveLog = exports2.InvalidClientMetadataException = exports2.UnsupportedGrantTypeException = exports2.UnauthorizedClientException = exports2.SlowDownException = exports2.InvalidScopeException = exports2.InvalidRequestException = exports2.InvalidGrantException = exports2.InvalidClientException = exports2.InternalServerException = exports2.ExpiredTokenException = exports2.AuthorizationPendingException = exports2.AccessDeniedException = void 0;
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    var AccessDeniedException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.AccessDeniedException = AccessDeniedException;
    var AuthorizationPendingException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AuthorizationPendingException",
          $fault: "client",
          ...opts
        });
        this.name = "AuthorizationPendingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AuthorizationPendingException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.AuthorizationPendingException = AuthorizationPendingException;
    var ExpiredTokenException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.ExpiredTokenException = ExpiredTokenException;
    var InternalServerException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InternalServerException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InternalServerException = InternalServerException;
    var InvalidClientException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InvalidClientException = InvalidClientException;
    var InvalidGrantException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidGrantException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGrantException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidGrantException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InvalidGrantException = InvalidGrantException;
    var InvalidRequestException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InvalidRequestException = InvalidRequestException;
    var InvalidScopeException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidScopeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidScopeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidScopeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InvalidScopeException = InvalidScopeException;
    var SlowDownException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "SlowDownException",
          $fault: "client",
          ...opts
        });
        this.name = "SlowDownException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SlowDownException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.SlowDownException = SlowDownException;
    var UnauthorizedClientException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.UnauthorizedClientException = UnauthorizedClientException;
    var UnsupportedGrantTypeException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedGrantTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedGrantTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedGrantTypeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.UnsupportedGrantTypeException = UnsupportedGrantTypeException;
    var InvalidClientMetadataException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientMetadataException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientMetadataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidClientMetadataException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InvalidClientMetadataException = InvalidClientMetadataException;
    var CreateTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateTokenRequestFilterSensitiveLog = CreateTokenRequestFilterSensitiveLog;
    var CreateTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateTokenResponseFilterSensitiveLog = CreateTokenResponseFilterSensitiveLog;
    var RegisterClientRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RegisterClientRequestFilterSensitiveLog = RegisterClientRequestFilterSensitiveLog;
    var RegisterClientResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RegisterClientResponseFilterSensitiveLog = RegisterClientResponseFilterSensitiveLog;
    var StartDeviceAuthorizationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.StartDeviceAuthorizationRequestFilterSensitiveLog = StartDeviceAuthorizationRequestFilterSensitiveLog;
    var StartDeviceAuthorizationResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.StartDeviceAuthorizationResponseFilterSensitiveLog = StartDeviceAuthorizationResponseFilterSensitiveLog;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson12 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/protocols/Aws_restJson1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deserializeAws_restJson1StartDeviceAuthorizationCommand = exports2.deserializeAws_restJson1RegisterClientCommand = exports2.deserializeAws_restJson1CreateTokenCommand = exports2.serializeAws_restJson1StartDeviceAuthorizationCommand = exports2.serializeAws_restJson1RegisterClientCommand = exports2.serializeAws_restJson1CreateTokenCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_03();
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    var serializeAws_restJson1CreateTokenCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/token`;
      let body;
      body = JSON.stringify({
        ...input.clientId != null && { clientId: input.clientId },
        ...input.clientSecret != null && { clientSecret: input.clientSecret },
        ...input.code != null && { code: input.code },
        ...input.deviceCode != null && { deviceCode: input.deviceCode },
        ...input.grantType != null && { grantType: input.grantType },
        ...input.redirectUri != null && { redirectUri: input.redirectUri },
        ...input.refreshToken != null && { refreshToken: input.refreshToken },
        ...input.scope != null && { scope: serializeAws_restJson1Scopes(input.scope, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1CreateTokenCommand = serializeAws_restJson1CreateTokenCommand;
    var serializeAws_restJson1RegisterClientCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/client/register`;
      let body;
      body = JSON.stringify({
        ...input.clientName != null && { clientName: input.clientName },
        ...input.clientType != null && { clientType: input.clientType },
        ...input.scopes != null && { scopes: serializeAws_restJson1Scopes(input.scopes, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1RegisterClientCommand = serializeAws_restJson1RegisterClientCommand;
    var serializeAws_restJson1StartDeviceAuthorizationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/device_authorization`;
      let body;
      body = JSON.stringify({
        ...input.clientId != null && { clientId: input.clientId },
        ...input.clientSecret != null && { clientSecret: input.clientSecret },
        ...input.startUrl != null && { startUrl: input.startUrl }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1StartDeviceAuthorizationCommand = serializeAws_restJson1StartDeviceAuthorizationCommand;
    var deserializeAws_restJson1CreateTokenCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateTokenCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.accessToken != null) {
        contents.accessToken = (0, smithy_client_1.expectString)(data.accessToken);
      }
      if (data.expiresIn != null) {
        contents.expiresIn = (0, smithy_client_1.expectInt32)(data.expiresIn);
      }
      if (data.idToken != null) {
        contents.idToken = (0, smithy_client_1.expectString)(data.idToken);
      }
      if (data.refreshToken != null) {
        contents.refreshToken = (0, smithy_client_1.expectString)(data.refreshToken);
      }
      if (data.tokenType != null) {
        contents.tokenType = (0, smithy_client_1.expectString)(data.tokenType);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1CreateTokenCommand = deserializeAws_restJson1CreateTokenCommand;
    var deserializeAws_restJson1CreateTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
          throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
          throw await deserializeAws_restJson1AuthorizationPendingExceptionResponse(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
          throw await deserializeAws_restJson1ExpiredTokenExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await deserializeAws_restJson1InvalidClientExceptionResponse(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
          throw await deserializeAws_restJson1InvalidGrantExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await deserializeAws_restJson1InvalidScopeExceptionResponse(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await deserializeAws_restJson1SlowDownExceptionResponse(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
          throw await deserializeAws_restJson1UnsupportedGrantTypeExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOOIDCServiceException_1.SSOOIDCServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1RegisterClientCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1RegisterClientCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.authorizationEndpoint != null) {
        contents.authorizationEndpoint = (0, smithy_client_1.expectString)(data.authorizationEndpoint);
      }
      if (data.clientId != null) {
        contents.clientId = (0, smithy_client_1.expectString)(data.clientId);
      }
      if (data.clientIdIssuedAt != null) {
        contents.clientIdIssuedAt = (0, smithy_client_1.expectLong)(data.clientIdIssuedAt);
      }
      if (data.clientSecret != null) {
        contents.clientSecret = (0, smithy_client_1.expectString)(data.clientSecret);
      }
      if (data.clientSecretExpiresAt != null) {
        contents.clientSecretExpiresAt = (0, smithy_client_1.expectLong)(data.clientSecretExpiresAt);
      }
      if (data.tokenEndpoint != null) {
        contents.tokenEndpoint = (0, smithy_client_1.expectString)(data.tokenEndpoint);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1RegisterClientCommand = deserializeAws_restJson1RegisterClientCommand;
    var deserializeAws_restJson1RegisterClientCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidClientMetadataException":
        case "com.amazonaws.ssooidc#InvalidClientMetadataException":
          throw await deserializeAws_restJson1InvalidClientMetadataExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await deserializeAws_restJson1InvalidScopeExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOOIDCServiceException_1.SSOOIDCServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1StartDeviceAuthorizationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1StartDeviceAuthorizationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.deviceCode != null) {
        contents.deviceCode = (0, smithy_client_1.expectString)(data.deviceCode);
      }
      if (data.expiresIn != null) {
        contents.expiresIn = (0, smithy_client_1.expectInt32)(data.expiresIn);
      }
      if (data.interval != null) {
        contents.interval = (0, smithy_client_1.expectInt32)(data.interval);
      }
      if (data.userCode != null) {
        contents.userCode = (0, smithy_client_1.expectString)(data.userCode);
      }
      if (data.verificationUri != null) {
        contents.verificationUri = (0, smithy_client_1.expectString)(data.verificationUri);
      }
      if (data.verificationUriComplete != null) {
        contents.verificationUriComplete = (0, smithy_client_1.expectString)(data.verificationUriComplete);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1StartDeviceAuthorizationCommand = deserializeAws_restJson1StartDeviceAuthorizationCommand;
    var deserializeAws_restJson1StartDeviceAuthorizationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await deserializeAws_restJson1InvalidClientExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await deserializeAws_restJson1SlowDownExceptionResponse(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOOIDCServiceException_1.SSOOIDCServiceException,
            errorCode
          });
      }
    };
    var map = smithy_client_1.map;
    var deserializeAws_restJson1AccessDeniedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1AuthorizationPendingExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.AuthorizationPendingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ExpiredTokenExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InternalServerExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidClientExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidClientMetadataExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidClientMetadataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidGrantExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidGrantException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidScopeExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidScopeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1SlowDownExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.SlowDownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnauthorizedClientExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnsupportedGrantTypeExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.UnsupportedGrantTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var serializeAws_restJson1Scopes = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/CreateTokenCommand.js
var require_CreateTokenCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/CreateTokenCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var CreateTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateTokenCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "CreateTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1CreateTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1CreateTokenCommand)(output, context);
      }
    };
    exports2.CreateTokenCommand = CreateTokenCommand;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/RegisterClientCommand.js
var require_RegisterClientCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/RegisterClientCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RegisterClientCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var RegisterClientCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterClientCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "RegisterClientCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RegisterClientRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.RegisterClientResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1RegisterClientCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1RegisterClientCommand)(output, context);
      }
    };
    exports2.RegisterClientCommand = RegisterClientCommand;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/StartDeviceAuthorizationCommand.js
var require_StartDeviceAuthorizationCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/StartDeviceAuthorizationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StartDeviceAuthorizationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var StartDeviceAuthorizationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StartDeviceAuthorizationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "StartDeviceAuthorizationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.StartDeviceAuthorizationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.StartDeviceAuthorizationResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1StartDeviceAuthorizationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1StartDeviceAuthorizationCommand)(output, context);
      }
    };
    exports2.StartDeviceAuthorizationCommand = StartDeviceAuthorizationCommand;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters4 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/EndpointParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssooidc"
      };
    };
    exports2.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/package.json
var require_package4 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sso-oidc",
      description: "AWS SDK for JavaScript Sso Oidc Client for Node.js, Browser and React Native",
      version: "3.288.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso-oidc"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/config-resolver": "3.287.0",
        "@aws-sdk/fetch-http-handler": "3.282.0",
        "@aws-sdk/hash-node": "3.272.0",
        "@aws-sdk/invalid-dependency": "3.272.0",
        "@aws-sdk/middleware-content-length": "3.282.0",
        "@aws-sdk/middleware-endpoint": "3.282.0",
        "@aws-sdk/middleware-host-header": "3.282.0",
        "@aws-sdk/middleware-logger": "3.288.0",
        "@aws-sdk/middleware-recursion-detection": "3.282.0",
        "@aws-sdk/middleware-retry": "3.287.0",
        "@aws-sdk/middleware-serde": "3.272.0",
        "@aws-sdk/middleware-stack": "3.272.0",
        "@aws-sdk/middleware-user-agent": "3.282.0",
        "@aws-sdk/node-config-provider": "3.287.0",
        "@aws-sdk/node-http-handler": "3.282.0",
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/smithy-client": "3.279.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.279.0",
        "@aws-sdk/util-defaults-mode-node": "3.287.0",
        "@aws-sdk/util-endpoints": "3.272.0",
        "@aws-sdk/util-retry": "3.272.0",
        "@aws-sdk/util-user-agent-browser": "3.282.0",
        "@aws-sdk/util-user-agent-node": "3.287.0",
        "@aws-sdk/util-utf8": "3.254.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso-oidc",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso-oidc"
      }
    };
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js
var require_ruleset2 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ruleSet = void 0;
    var p = "required";
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = "PartitionResult";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = { [p]: false, "type": "String" };
    var f = { [p]: true, "default": false, "type": "Boolean" };
    var g = { [s]: "Endpoint" };
    var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var j = {};
    var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
    var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
    exports2.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver2 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs40();
    var ruleset_1 = require_ruleset2();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports2.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs26();
    var url_parser_1 = require_dist_cjs7();
    var util_base64_1 = require_dist_cjs38();
    var util_utf8_1 = require_dist_cjs20();
    var endpointResolver_1 = require_endpointResolver2();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2019-06-10",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "SSO OIDC",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package4());
    var config_resolver_1 = require_dist_cjs3();
    var hash_node_1 = require_dist_cjs33();
    var middleware_retry_1 = require_dist_cjs15();
    var node_config_provider_1 = require_dist_cjs30();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs36();
    var util_retry_1 = require_dist_cjs14();
    var util_user_agent_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs26();
    var util_defaults_mode_node_1 = require_dist_cjs41();
    var smithy_client_2 = require_dist_cjs26();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDCClient.js
var require_SSOOIDCClient = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDCClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOOIDCClient = void 0;
    var config_resolver_1 = require_dist_cjs3();
    var middleware_content_length_1 = require_dist_cjs5();
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_host_header_1 = require_dist_cjs10();
    var middleware_logger_1 = require_dist_cjs11();
    var middleware_recursion_detection_1 = require_dist_cjs12();
    var middleware_retry_1 = require_dist_cjs15();
    var middleware_user_agent_1 = require_dist_cjs24();
    var smithy_client_1 = require_dist_cjs26();
    var EndpointParameters_1 = require_EndpointParameters4();
    var runtimeConfig_1 = require_runtimeConfig2();
    var SSOOIDCClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.SSOOIDCClient = SSOOIDCClient;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDC.js
var require_SSOOIDC = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDC.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOOIDC = void 0;
    var CreateTokenCommand_1 = require_CreateTokenCommand();
    var RegisterClientCommand_1 = require_RegisterClientCommand();
    var StartDeviceAuthorizationCommand_1 = require_StartDeviceAuthorizationCommand();
    var SSOOIDCClient_1 = require_SSOOIDCClient();
    var SSOOIDC = class extends SSOOIDCClient_1.SSOOIDCClient {
      createToken(args, optionsOrCb, cb) {
        const command = new CreateTokenCommand_1.CreateTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerClient(args, optionsOrCb, cb) {
        const command = new RegisterClientCommand_1.RegisterClientCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startDeviceAuthorization(args, optionsOrCb, cb) {
        const command = new StartDeviceAuthorizationCommand_1.StartDeviceAuthorizationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports2.SSOOIDC = SSOOIDC;
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/index.js
var require_commands2 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CreateTokenCommand(), exports2);
    tslib_1.__exportStar(require_RegisterClientCommand(), exports2);
    tslib_1.__exportStar(require_StartDeviceAuthorizationCommand(), exports2);
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/index.js
var require_models2 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_03(), exports2);
  }
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  "node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOOIDCServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSOOIDC(), exports2);
    tslib_1.__exportStar(require_SSOOIDCClient(), exports2);
    tslib_1.__exportStar(require_commands2(), exports2);
    tslib_1.__exportStar(require_models2(), exports2);
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    Object.defineProperty(exports2, "SSOOIDCServiceException", { enumerable: true, get: function() {
      return SSOOIDCServiceException_1.SSOOIDCServiceException;
    } });
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js
var require_getSsoOidcClient = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSsoOidcClient = void 0;
    var client_sso_oidc_1 = require_dist_cjs43();
    var ssoOidcClientsHash = {};
    var getSsoOidcClient = (ssoRegion) => {
      if (ssoOidcClientsHash[ssoRegion]) {
        return ssoOidcClientsHash[ssoRegion];
      }
      const ssoOidcClient = new client_sso_oidc_1.SSOOIDCClient({ region: ssoRegion });
      ssoOidcClientsHash[ssoRegion] = ssoOidcClient;
      return ssoOidcClient;
    };
    exports2.getSsoOidcClient = getSsoOidcClient;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js
var require_getNewSsoOidcToken = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getNewSsoOidcToken = void 0;
    var client_sso_oidc_1 = require_dist_cjs43();
    var getSsoOidcClient_1 = require_getSsoOidcClient();
    var getNewSsoOidcToken = (ssoToken, ssoRegion) => {
      const ssoOidcClient = (0, getSsoOidcClient_1.getSsoOidcClient)(ssoRegion);
      return ssoOidcClient.send(new client_sso_oidc_1.CreateTokenCommand({
        clientId: ssoToken.clientId,
        clientSecret: ssoToken.clientSecret,
        refreshToken: ssoToken.refreshToken,
        grantType: "refresh_token"
      }));
    };
    exports2.getNewSsoOidcToken = getNewSsoOidcToken;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js
var require_validateTokenExpiry = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateTokenExpiry = void 0;
    var property_provider_1 = require_dist_cjs16();
    var constants_1 = require_constants8();
    var validateTokenExpiry = (token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new property_provider_1.TokenProviderError(`Token is expired. ${constants_1.REFRESH_MESSAGE}`, false);
      }
    };
    exports2.validateTokenExpiry = validateTokenExpiry;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js
var require_validateTokenKey = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateTokenKey = void 0;
    var property_provider_1 = require_dist_cjs16();
    var constants_1 = require_constants8();
    var validateTokenKey = (key, value, forRefresh = false) => {
      if (typeof value === "undefined") {
        throw new property_provider_1.TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${constants_1.REFRESH_MESSAGE}`, false);
      }
    };
    exports2.validateTokenKey = validateTokenKey;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js
var require_writeSSOTokenToFile = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.writeSSOTokenToFile = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var fs_1 = require("fs");
    var { writeFile } = fs_1.promises;
    var writeSSOTokenToFile = (id, ssoToken) => {
      const tokenFilepath = (0, shared_ini_file_loader_1.getSSOTokenFilepath)(id);
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    };
    exports2.writeSSOTokenToFile = writeSSOTokenToFile;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js
var require_fromSso = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromSso = void 0;
    var property_provider_1 = require_dist_cjs16();
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var constants_1 = require_constants8();
    var getNewSsoOidcToken_1 = require_getNewSsoOidcToken();
    var validateTokenExpiry_1 = require_validateTokenExpiry();
    var validateTokenKey_1 = require_validateTokenKey();
    var writeSSOTokenToFile_1 = require_writeSSOTokenToFile();
    var lastRefreshAttemptTime = new Date(0);
    var fromSso = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
      const profile = profiles[profileName];
      if (!profile) {
        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
      } else if (!profile["sso_session"]) {
        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
      }
      const ssoSessionName = profile["sso_session"];
      const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
      const ssoSession = ssoSessions[ssoSessionName];
      if (!ssoSession) {
        throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);
      }
      for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
        if (!ssoSession[ssoSessionRequiredKey]) {
          throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);
        }
      }
      const ssoStartUrl = ssoSession["sso_start_url"];
      const ssoRegion = ssoSession["sso_region"];
      let ssoToken;
      try {
        ssoToken = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoSessionName);
      } catch (e) {
        throw new property_provider_1.TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${constants_1.REFRESH_MESSAGE}`, false);
      }
      (0, validateTokenKey_1.validateTokenKey)("accessToken", ssoToken.accessToken);
      (0, validateTokenKey_1.validateTokenKey)("expiresAt", ssoToken.expiresAt);
      const { accessToken, expiresAt } = ssoToken;
      const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
      if (existingToken.expiration.getTime() - Date.now() > constants_1.EXPIRE_WINDOW_MS) {
        return existingToken;
      }
      if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
        return existingToken;
      }
      (0, validateTokenKey_1.validateTokenKey)("clientId", ssoToken.clientId, true);
      (0, validateTokenKey_1.validateTokenKey)("clientSecret", ssoToken.clientSecret, true);
      (0, validateTokenKey_1.validateTokenKey)("refreshToken", ssoToken.refreshToken, true);
      try {
        lastRefreshAttemptTime.setTime(Date.now());
        const newSsoOidcToken = await (0, getNewSsoOidcToken_1.getNewSsoOidcToken)(ssoToken, ssoRegion);
        (0, validateTokenKey_1.validateTokenKey)("accessToken", newSsoOidcToken.accessToken);
        (0, validateTokenKey_1.validateTokenKey)("expiresIn", newSsoOidcToken.expiresIn);
        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);
        try {
          await (0, writeSSOTokenToFile_1.writeSSOTokenToFile)(ssoSessionName, {
            ...ssoToken,
            accessToken: newSsoOidcToken.accessToken,
            expiresAt: newTokenExpiration.toISOString(),
            refreshToken: newSsoOidcToken.refreshToken
          });
        } catch (error) {
        }
        return {
          token: newSsoOidcToken.accessToken,
          expiration: newTokenExpiration
        };
      } catch (error) {
        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
        return existingToken;
      }
    };
    exports2.fromSso = fromSso;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js
var require_fromStatic3 = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs16();
    var fromStatic = ({ token }) => async () => {
      if (!token || !token.token) {
        throw new property_provider_1.TokenProviderError(`Please pass a valid token to fromStatic`, false);
      }
      return token;
    };
    exports2.fromStatic = fromStatic;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js
var require_nodeProvider = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.nodeProvider = void 0;
    var property_provider_1 = require_dist_cjs16();
    var fromSso_1 = require_fromSso();
    var nodeProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromSso_1.fromSso)(init), async () => {
      throw new property_provider_1.TokenProviderError("Could not load token from any providers", false);
    }), (token) => token.expiration !== void 0 && token.expiration.getTime() - Date.now() < 3e5, (token) => token.expiration !== void 0);
    exports2.nodeProvider = nodeProvider;
  }
});

// node_modules/@aws-sdk/token-providers/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  "node_modules/@aws-sdk/token-providers/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromSso(), exports2);
    tslib_1.__exportStar(require_fromStatic3(), exports2);
    tslib_1.__exportStar(require_nodeProvider(), exports2);
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js
var require_resolveSSOCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveSSOCredentials = void 0;
    var client_sso_1 = require_dist_cjs42();
    var property_provider_1 = require_dist_cjs16();
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var token_providers_1 = require_dist_cjs44();
    var EXPIRE_WINDOW_MS = 15 * 60 * 1e3;
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, profile }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = await (0, token_providers_1.fromSso)({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString()
          };
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      } else {
        try {
          token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoStartUrl);
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { accessToken } = token;
      const sso = ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({
          accountId: ssoAccountId,
          roleName: ssoRoleName,
          accessToken
        }));
      } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };
    };
    exports2.resolveSSOCredentials = resolveSSOCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js
var require_validateSsoProfile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateSsoProfile = void 0;
    var property_provider_1 = require_dist_cjs16();
    var validateSsoProfile = (profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);
      }
      return profile;
    };
    exports2.validateSsoProfile = validateSsoProfile;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js
var require_fromSSO = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromSSO = void 0;
    var property_provider_1 = require_dist_cjs16();
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var isSsoProfile_1 = require_isSsoProfile();
    var resolveSSOCredentials_1 = require_resolveSSOCredentials();
    var validateSsoProfile_1 = require_validateSsoProfile();
    var fromSSO = (init = {}) => async () => {
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, ssoSession } = init;
      const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} was not found.`);
        }
        if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);
        }
        if (profile === null || profile === void 0 ? void 0 : profile.sso_session) {
          const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
          const session = ssoSessions[profile.sso_session];
          const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
          if (ssoRegion && ssoRegion !== session.sso_region) {
            throw new property_provider_1.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);
          }
          if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
            throw new property_provider_1.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);
          }
          profile.sso_region = session.sso_region;
          profile.sso_start_url = session.sso_start_url;
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = (0, validateSsoProfile_1.validateSsoProfile)(profile);
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl: sso_start_url,
          ssoSession: sso_session,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient,
          profile: profileName
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new property_provider_1.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
      } else {
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl,
          ssoSession,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          profile: profileName
        });
      }
    };
    exports2.fromSSO = fromSSO;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js
var require_types6 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs45 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromSSO(), exports2);
    tslib_1.__exportStar(require_isSsoProfile(), exports2);
    tslib_1.__exportStar(require_types6(), exports2);
    tslib_1.__exportStar(require_validateSsoProfile(), exports2);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js
var require_resolveSsoCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveSsoCredentials = exports2.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs45();
    var credential_provider_sso_2 = require_dist_cjs45();
    Object.defineProperty(exports2, "isSsoProfile", { enumerable: true, get: function() {
      return credential_provider_sso_2.isSsoProfile;
    } });
    var resolveSsoCredentials = (data) => {
      const { sso_start_url, sso_account_id, sso_session, sso_region, sso_role_name } = (0, credential_provider_sso_1.validateSsoProfile)(data);
      return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoSession: sso_session,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name
      })();
    };
    exports2.resolveSsoCredentials = resolveSsoCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js
var require_resolveStaticCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveStaticCredentials = exports2.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1;
    exports2.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = (profile) => Promise.resolve({
      accessKeyId: profile.aws_access_key_id,
      secretAccessKey: profile.aws_secret_access_key,
      sessionToken: profile.aws_session_token
    });
    exports2.resolveStaticCredentials = resolveStaticCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromWebToken = void 0;
    var property_provider_1 = require_dist_cjs16();
    var fromWebToken = (init) => () => {
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.`, false);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports2.fromWebToken = fromWebToken;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs16();
    var fs_1 = require("fs");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile = (init = {}) => async () => {
      return resolveTokenFile(init);
    };
    exports2.fromTokenFile = fromTokenFile;
    var resolveTokenFile = (init) => {
      var _a, _b, _c;
      const webIdentityTokenFile = (_a = init === null || init === void 0 ? void 0 : init.webIdentityTokenFile) !== null && _a !== void 0 ? _a : process.env[ENV_TOKEN_FILE];
      const roleArn = (_b = init === null || init === void 0 ? void 0 : init.roleArn) !== null && _b !== void 0 ? _b : process.env[ENV_ROLE_ARN];
      const roleSessionName = (_c = init === null || init === void 0 ? void 0 : init.roleSessionName) !== null && _c !== void 0 ? _c : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified");
      }
      return (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      })();
    };
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs46 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromTokenFile(), exports2);
    tslib_1.__exportStar(require_fromWebToken(), exports2);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js
var require_resolveWebIdentityCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveWebIdentityCredentials = exports2.isWebIdentityProfile = void 0;
    var credential_provider_web_identity_1 = require_dist_cjs46();
    var isWebIdentityProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1;
    exports2.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = async (profile, options) => (0, credential_provider_web_identity_1.fromTokenFile)({
      webIdentityTokenFile: profile.web_identity_token_file,
      roleArn: profile.role_arn,
      roleSessionName: profile.role_session_name,
      roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
    })();
    exports2.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js
var require_resolveProfileData = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs16();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials2();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials();
    var resolveWebIdentityCredentials_1 = require_resolveWebIdentityCredentials();
    var resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && (0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(profileName, profiles, options, visitedProfiles);
      }
      if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data)) {
        return (0, resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(data, options);
      }
      if ((0, resolveProcessCredentials_1.isProcessProfile)(data)) {
        return (0, resolveProcessCredentials_1.resolveProcessCredentials)(options, profileName);
      }
      if ((0, resolveSsoCredentials_1.isSsoProfile)(data)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data);
      }
      throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);
    };
    exports2.resolveProfileData = resolveProfileData;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js
var require_fromIni = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromIni = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var resolveProfileData_1 = require_resolveProfileData();
    var fromIni = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProfileData_1.resolveProfileData)((0, shared_ini_file_loader_1.getProfileName)(init), profiles, init);
    };
    exports2.fromIni = fromIni;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs47 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromIni(), exports2);
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js
var require_remoteProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.remoteProvider = exports2.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs31();
    var property_provider_1 = require_dist_cjs16();
    exports2.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = (init) => {
      if (process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] || process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
      }
      if (process.env[exports2.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError("EC2 Instance Metadata Service access disabled");
        };
      }
      return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
    };
    exports2.remoteProvider = remoteProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js
var require_defaultProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs28();
    var credential_provider_ini_1 = require_dist_cjs47();
    var credential_provider_process_1 = require_dist_cjs32();
    var credential_provider_sso_1 = require_dist_cjs45();
    var credential_provider_web_identity_1 = require_dist_cjs46();
    var property_provider_1 = require_dist_cjs16();
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var remoteProvider_1 = require_remoteProvider();
    var defaultProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)(...init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE] ? [] : [(0, credential_provider_env_1.fromEnv)()], (0, credential_provider_sso_1.fromSSO)(init), (0, credential_provider_ini_1.fromIni)(init), (0, credential_provider_process_1.fromProcess)(init), (0, credential_provider_web_identity_1.fromTokenFile)(init), (0, remoteProvider_1.remoteProvider)(init), async () => {
      throw new property_provider_1.CredentialsProviderError("Could not load credentials from any providers", false);
    }), (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, (credentials) => credentials.expiration !== void 0);
    exports2.defaultProvider = defaultProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs48 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_defaultProvider(), exports2);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js
var require_ruleset3 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ruleSet = void 0;
    var G = "required";
    var H = "type";
    var I = "fn";
    var J = "argv";
    var K = "ref";
    var L = "properties";
    var M = "headers";
    var a = false;
    var b = true;
    var c = "PartitionResult";
    var d = "tree";
    var e = "booleanEquals";
    var f = "stringEquals";
    var g = "sigv4";
    var h = "us-east-1";
    var i = "sts";
    var j = "endpoint";
    var k = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
    var l = "error";
    var m = "getAttr";
    var n = { [G]: false, [H]: "String" };
    var o = { [G]: true, "default": false, [H]: "Boolean" };
    var p = { [K]: "Region" };
    var q = { [K]: "UseFIPS" };
    var r = { [K]: "UseDualStack" };
    var s = { [I]: "isSet", [J]: [{ [K]: "Endpoint" }] };
    var t = { [K]: "Endpoint" };
    var u = { "url": "https://sts.amazonaws.com", [L]: { "authSchemes": [{ "name": g, "signingRegion": h, "signingName": i }] }, [M]: {} };
    var v = {};
    var w = { "conditions": [{ [I]: f, [J]: [p, "aws-global"] }], [j]: u, [H]: j };
    var x = { [I]: e, [J]: [q, true] };
    var y = { [I]: e, [J]: [r, true] };
    var z = { [I]: e, [J]: [true, { [I]: m, [J]: [{ [K]: c }, "supportsFIPS"] }] };
    var A = { [K]: c };
    var B = { [I]: e, [J]: [true, { [I]: m, [J]: [A, "supportsDualStack"] }] };
    var C = { "url": k, [L]: {}, [M]: {} };
    var D = [t];
    var E = [x];
    var F = [y];
    var _data = { version: "1.0", parameters: { Region: n, UseDualStack: o, UseFIPS: o, Endpoint: n, UseGlobalEndpoint: o }, rules: [{ conditions: [{ [I]: "aws.partition", [J]: [p], assign: c }], [H]: d, rules: [{ conditions: [{ [I]: e, [J]: [{ [K]: "UseGlobalEndpoint" }, b] }, { [I]: e, [J]: [q, a] }, { [I]: e, [J]: [r, a] }, { [I]: "not", [J]: [s] }], [H]: d, rules: [{ conditions: [{ [I]: f, [J]: [p, "ap-northeast-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "ap-south-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "ap-southeast-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "ap-southeast-2"] }], endpoint: u, [H]: j }, w, { conditions: [{ [I]: f, [J]: [p, "ca-central-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "eu-central-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "eu-north-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "eu-west-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "eu-west-2"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "eu-west-3"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "sa-east-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, h] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "us-east-2"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "us-west-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "us-west-2"] }], endpoint: u, [H]: j }, { endpoint: { url: k, [L]: { authSchemes: [{ name: g, signingRegion: "{Region}", signingName: i }] }, [M]: v }, [H]: j }] }, { conditions: [s, { [I]: "parseURL", [J]: D, assign: "url" }], [H]: d, rules: [{ conditions: E, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [H]: l }, { [H]: d, rules: [{ conditions: F, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [H]: l }, { endpoint: { url: t, [L]: v, [M]: v }, [H]: j }] }] }, { conditions: [x, y], [H]: d, rules: [{ conditions: [z, B], [H]: d, rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", [L]: v, [M]: v }, [H]: j }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [H]: l }] }, { conditions: E, [H]: d, rules: [{ conditions: [z], [H]: d, rules: [{ [H]: d, rules: [{ conditions: [{ [I]: f, [J]: ["aws-us-gov", { [I]: m, [J]: [A, "name"] }] }], endpoint: C, [H]: j }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", [L]: v, [M]: v }, [H]: j }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", [H]: l }] }, { conditions: F, [H]: d, rules: [{ conditions: [B], [H]: d, rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", [L]: v, [M]: v }, [H]: j }] }, { error: "DualStack is enabled but this partition does not support DualStack", [H]: l }] }, { [H]: d, rules: [w, { endpoint: C, [H]: j }] }] }] };
    exports2.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver3 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs40();
    var ruleset_1 = require_ruleset3();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports2.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs26();
    var url_parser_1 = require_dist_cjs7();
    var util_base64_1 = require_dist_cjs38();
    var util_utf8_1 = require_dist_cjs20();
    var endpointResolver_1 = require_endpointResolver3();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2011-06-15",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "STS",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var config_resolver_1 = require_dist_cjs3();
    var credential_provider_node_1 = require_dist_cjs48();
    var hash_node_1 = require_dist_cjs33();
    var middleware_retry_1 = require_dist_cjs15();
    var node_config_provider_1 = require_dist_cjs30();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs36();
    var util_retry_1 = require_dist_cjs14();
    var util_user_agent_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs26();
    var util_defaults_mode_node_1 = require_dist_cjs41();
    var smithy_client_2 = require_dist_cjs26();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STSClient = void 0;
    var config_resolver_1 = require_dist_cjs3();
    var middleware_content_length_1 = require_dist_cjs5();
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_host_header_1 = require_dist_cjs10();
    var middleware_logger_1 = require_dist_cjs11();
    var middleware_recursion_detection_1 = require_dist_cjs12();
    var middleware_retry_1 = require_dist_cjs15();
    var middleware_sdk_sts_1 = require_dist_cjs27();
    var middleware_user_agent_1 = require_dist_cjs24();
    var smithy_client_1 = require_dist_cjs26();
    var EndpointParameters_1 = require_EndpointParameters2();
    var runtimeConfig_1 = require_runtimeConfig3();
    var STSClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_sdk_sts_1.resolveStsAuthConfig)(_config_5, { stsClientCtor: STSClient });
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.STSClient = STSClient;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STS.js
var require_STS = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/STS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STS = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithSAMLCommand_1 = require_AssumeRoleWithSAMLCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var DecodeAuthorizationMessageCommand_1 = require_DecodeAuthorizationMessageCommand();
    var GetAccessKeyInfoCommand_1 = require_GetAccessKeyInfoCommand();
    var GetCallerIdentityCommand_1 = require_GetCallerIdentityCommand();
    var GetFederationTokenCommand_1 = require_GetFederationTokenCommand();
    var GetSessionTokenCommand_1 = require_GetSessionTokenCommand();
    var STSClient_1 = require_STSClient();
    var STS = class extends STSClient_1.STSClient {
      assumeRole(args, optionsOrCb, cb) {
        const command = new AssumeRoleCommand_1.AssumeRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithSAML(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithWebIdentity(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      decodeAuthorizationMessage(args, optionsOrCb, cb) {
        const command = new DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAccessKeyInfo(args, optionsOrCb, cb) {
        const command = new GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCallerIdentity(args, optionsOrCb, cb) {
        const command = new GetCallerIdentityCommand_1.GetCallerIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFederationToken(args, optionsOrCb, cb) {
        const command = new GetFederationTokenCommand_1.GetFederationTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getSessionToken(args, optionsOrCb, cb) {
        const command = new GetSessionTokenCommand_1.GetSessionTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports2.STS = STS;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js
var require_commands3 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AssumeRoleCommand(), exports2);
    tslib_1.__exportStar(require_AssumeRoleWithSAMLCommand(), exports2);
    tslib_1.__exportStar(require_AssumeRoleWithWebIdentityCommand(), exports2);
    tslib_1.__exportStar(require_DecodeAuthorizationMessageCommand(), exports2);
    tslib_1.__exportStar(require_GetAccessKeyInfoCommand(), exports2);
    tslib_1.__exportStar(require_GetCallerIdentityCommand(), exports2);
    tslib_1.__exportStar(require_GetFederationTokenCommand(), exports2);
    tslib_1.__exportStar(require_GetSessionTokenCommand(), exports2);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js
var require_defaultRoleAssumers = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decorateDefaultCredentialProvider = exports2.getDefaultRoleAssumerWithWebIdentity = exports2.getDefaultRoleAssumer = void 0;
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var STSClient_1 = require_STSClient();
    var getCustomizableStsClientCtor = (baseCtor, customizations) => {
      if (!customizations)
        return baseCtor;
      else
        return class CustomizableSTSClient extends baseCtor {
          constructor(config) {
            super(config);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        };
    };
    var getDefaultRoleAssumer = (stsOptions = {}, stsPlugins) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumer)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins));
    exports2.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins));
    exports2.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports2.getDefaultRoleAssumer)(input),
      roleAssumerWithWebIdentity: (0, exports2.getDefaultRoleAssumerWithWebIdentity)(input),
      ...input
    });
    exports2.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js
var require_models3 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_0(), exports2);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs49 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STSServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_STS(), exports2);
    tslib_1.__exportStar(require_STSClient(), exports2);
    tslib_1.__exportStar(require_commands3(), exports2);
    tslib_1.__exportStar(require_defaultRoleAssumers(), exports2);
    tslib_1.__exportStar(require_models3(), exports2);
    var STSServiceException_1 = require_STSServiceException();
    Object.defineProperty(exports2, "STSServiceException", { enumerable: true, get: function() {
      return STSServiceException_1.STSServiceException;
    } });
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/endpoint/ruleset.js
var require_ruleset4 = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/endpoint/ruleset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ruleSet = void 0;
    var p = "required";
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = "PartitionResult";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = { [p]: false, "type": "String" };
    var f = { [p]: true, "default": false, "type": "Boolean" };
    var g = { [s]: "Endpoint" };
    var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var j = {};
    var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
    var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://codedeploy-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://codedeploy-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://codedeploy.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://codedeploy.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
    exports2.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver4 = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/endpoint/endpointResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs40();
    var ruleset_1 = require_ruleset4();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports2.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared4 = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs26();
    var url_parser_1 = require_dist_cjs7();
    var util_base64_1 = require_dist_cjs38();
    var util_utf8_1 = require_dist_cjs20();
    var endpointResolver_1 = require_endpointResolver4();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2014-10-06",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "CodeDeploy",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/runtimeConfig.js
var require_runtimeConfig4 = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package());
    var client_sts_1 = require_dist_cjs49();
    var config_resolver_1 = require_dist_cjs3();
    var credential_provider_node_1 = require_dist_cjs48();
    var hash_node_1 = require_dist_cjs33();
    var middleware_retry_1 = require_dist_cjs15();
    var node_config_provider_1 = require_dist_cjs30();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs36();
    var util_retry_1 = require_dist_cjs14();
    var util_user_agent_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared4();
    var smithy_client_1 = require_dist_cjs26();
    var util_defaults_mode_node_1 = require_dist_cjs41();
    var smithy_client_2 = require_dist_cjs26();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/CodeDeployClient.js
var require_CodeDeployClient = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/CodeDeployClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CodeDeployClient = void 0;
    var config_resolver_1 = require_dist_cjs3();
    var middleware_content_length_1 = require_dist_cjs5();
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_host_header_1 = require_dist_cjs10();
    var middleware_logger_1 = require_dist_cjs11();
    var middleware_recursion_detection_1 = require_dist_cjs12();
    var middleware_retry_1 = require_dist_cjs15();
    var middleware_signing_1 = require_dist_cjs23();
    var middleware_user_agent_1 = require_dist_cjs24();
    var smithy_client_1 = require_dist_cjs26();
    var EndpointParameters_1 = require_EndpointParameters();
    var runtimeConfig_1 = require_runtimeConfig4();
    var CodeDeployClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.CodeDeployClient = CodeDeployClient;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/models/CodeDeployServiceException.js
var require_CodeDeployServiceException = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/models/CodeDeployServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CodeDeployServiceException = void 0;
    var smithy_client_1 = require_dist_cjs26();
    var CodeDeployServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, CodeDeployServiceException.prototype);
      }
    };
    exports2.CodeDeployServiceException = CodeDeployServiceException;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/models/models_0.js
var require_models_04 = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TargetLabel = exports2.DeploymentTargetType = exports2.TargetStatus = exports2.FileExistsBehavior = exports2.ErrorCode = exports2.DeploymentCreator = exports2.InvalidDeploymentIdException = exports2.InvalidComputePlatformException = exports2.InstanceIdRequiredException = exports2.DeploymentIdRequiredException = exports2.DeploymentDoesNotExistException = exports2.InstanceStatus = exports2.LifecycleEventStatus = exports2.LifecycleErrorCode = exports2._InstanceType = exports2.InvalidDeploymentGroupNameException = exports2.DeploymentGroupNameRequiredException = exports2.DeploymentConfigDoesNotExistException = exports2.TriggerEventType = exports2.OutdatedInstancesStrategy = exports2.TagFilterType = exports2.DeploymentStatus = exports2.EC2TagFilterType = exports2.DeploymentType = exports2.DeploymentOption = exports2.InstanceAction = exports2.GreenFleetProvisioningAction = exports2.DeploymentReadyAction = exports2.RevisionRequiredException = exports2.InvalidRevisionException = exports2.InvalidApplicationNameException = exports2.BatchLimitExceededException = exports2.BundleType = exports2.RevisionLocationType = exports2.AutoRollbackEvent = exports2.ArnNotSupportedException = exports2.ApplicationRevisionSortBy = exports2.ApplicationNameRequiredException = exports2.ApplicationLimitExceededException = exports2.ComputePlatform = exports2.ApplicationDoesNotExistException = exports2.ApplicationAlreadyExistsException = exports2.AlarmsLimitExceededException = exports2.TagRequiredException = exports2.TagLimitExceededException = exports2.InvalidTagException = exports2.InvalidInstanceNameException = exports2.InstanceNotRegisteredException = exports2.InstanceNameRequiredException = exports2.InstanceLimitExceededException = void 0;
    exports2.LifecycleHookLimitExceededException = exports2.InvalidTriggerConfigException = exports2.InvalidTargetGroupPairException = exports2.InvalidOnPremisesTagCombinationException = exports2.InvalidInputException = exports2.InvalidECSServiceException = exports2.InvalidEC2TagException = exports2.InvalidEC2TagCombinationException = exports2.InvalidDeploymentStyleException = exports2.InvalidBlueGreenDeploymentConfigurationException = exports2.ECSServiceMappingLimitExceededException = exports2.DeploymentGroupLimitExceededException = exports2.DeploymentGroupAlreadyExistsException = exports2.InvalidMinimumHealthyHostValueException = exports2.DeploymentConfigNameRequiredException = exports2.DeploymentConfigLimitExceededException = exports2.DeploymentConfigAlreadyExistsException = exports2.TrafficRoutingType = exports2.MinimumHealthyHostsType = exports2.ThrottlingException = exports2.RevisionDoesNotExistException = exports2.InvalidUpdateOutdatedInstancesOnlyValueException = exports2.InvalidTrafficRoutingConfigurationException = exports2.InvalidTargetInstancesException = exports2.InvalidRoleException = exports2.InvalidLoadBalancerInfoException = exports2.InvalidIgnoreApplicationStopFailuresValueException = exports2.InvalidGitHubAccountTokenException = exports2.InvalidFileExistsBehaviorException = exports2.InvalidDeploymentConfigNameException = exports2.InvalidAutoScalingGroupException = exports2.InvalidAutoRollbackConfigException = exports2.InvalidAlarmConfigException = exports2.DescriptionTooLongException = exports2.DeploymentLimitExceededException = exports2.DeploymentGroupDoesNotExistException = exports2.InvalidTagsToAddException = exports2.UnsupportedActionForDeploymentTypeException = exports2.InvalidDeploymentWaitTypeException = exports2.InvalidDeploymentStatusException = exports2.DeploymentIsNotInReadyStateException = exports2.DeploymentAlreadyCompletedException = exports2.DeploymentWaitType = exports2.BucketNameFilterRequiredException = exports2.InvalidDeploymentTargetIdException = exports2.InstanceDoesNotExistException = exports2.DeploymentTargetListSizeExceededException = exports2.DeploymentTargetIdRequiredException = exports2.DeploymentTargetDoesNotExistException = exports2.DeploymentNotStartedException = void 0;
    exports2.AutoScalingGroupFilterSensitiveLog = exports2.AutoRollbackConfigurationFilterSensitiveLog = exports2.AppSpecContentFilterSensitiveLog = exports2.ApplicationInfoFilterSensitiveLog = exports2.AlarmConfigurationFilterSensitiveLog = exports2.AlarmFilterSensitiveLog = exports2.AddTagsToOnPremisesInstancesInputFilterSensitiveLog = exports2.TagFilterSensitiveLog = exports2.StopStatus = exports2.MultipleIamArnsProvidedException = exports2.InvalidIamUserArnException = exports2.InvalidIamSessionArnException = exports2.InstanceNameAlreadyRegisteredException = exports2.IamUserArnRequiredException = exports2.IamUserArnAlreadyRegisteredException = exports2.IamSessionArnAlreadyRegisteredException = exports2.IamArnRequiredException = exports2.LifecycleEventAlreadyCompletedException = exports2.InvalidLifecycleEventHookExecutionStatusException = exports2.InvalidLifecycleEventHookExecutionIdException = exports2.ResourceArnRequiredException = exports2.InvalidArnException = exports2.RegistrationStatus = exports2.InvalidTagFilterException = exports2.InvalidRegistrationStatusException = exports2.TargetFilterName = exports2.InvalidTimeRangeException = exports2.InvalidExternalIdException = exports2.InvalidTargetFilterNameException = exports2.InvalidInstanceTypeException = exports2.InvalidInstanceStatusException = exports2.InvalidDeploymentInstanceTypeException = exports2.SortOrder = exports2.ListStateFilterAction = exports2.InvalidSortOrderException = exports2.InvalidSortByException = exports2.InvalidNextTokenException = exports2.InvalidKeyPrefixFilterException = exports2.InvalidDeployedStateFilterException = exports2.InvalidBucketNameFilterException = exports2.ResourceValidationException = exports2.OperationNotSupportedException = exports2.InvalidGitHubAccountTokenNameException = exports2.GitHubAccountTokenNameRequiredException = exports2.GitHubAccountTokenDoesNotExistException = exports2.InvalidOperationException = exports2.DeploymentConfigInUseException = exports2.TriggerTargetsLimitExceededException = exports2.TagSetListLimitExceededException = exports2.RoleRequiredException = void 0;
    exports2.LambdaTargetFilterSensitiveLog = exports2.LambdaFunctionInfoFilterSensitiveLog = exports2.InstanceTargetFilterSensitiveLog = exports2.ECSTargetFilterSensitiveLog = exports2.ECSTaskSetFilterSensitiveLog = exports2.CloudFormationTargetFilterSensitiveLog = exports2.BatchGetDeploymentTargetsInputFilterSensitiveLog = exports2.BatchGetDeploymentsOutputFilterSensitiveLog = exports2.DeploymentInfoFilterSensitiveLog = exports2.TargetInstancesFilterSensitiveLog = exports2.RollbackInfoFilterSensitiveLog = exports2.RelatedDeploymentsFilterSensitiveLog = exports2.ErrorInformationFilterSensitiveLog = exports2.DeploymentOverviewFilterSensitiveLog = exports2.BatchGetDeploymentsInputFilterSensitiveLog = exports2.BatchGetDeploymentInstancesOutputFilterSensitiveLog = exports2.InstanceSummaryFilterSensitiveLog = exports2.LifecycleEventFilterSensitiveLog = exports2.DiagnosticsFilterSensitiveLog = exports2.BatchGetDeploymentInstancesInputFilterSensitiveLog = exports2.BatchGetDeploymentGroupsOutputFilterSensitiveLog = exports2.DeploymentGroupInfoFilterSensitiveLog = exports2.TriggerConfigFilterSensitiveLog = exports2.OnPremisesTagSetFilterSensitiveLog = exports2.TagFilterFilterSensitiveLog = exports2.LoadBalancerInfoFilterSensitiveLog = exports2.TargetGroupPairInfoFilterSensitiveLog = exports2.TrafficRouteFilterSensitiveLog = exports2.TargetGroupInfoFilterSensitiveLog = exports2.ELBInfoFilterSensitiveLog = exports2.LastDeploymentInfoFilterSensitiveLog = exports2.ECSServiceFilterSensitiveLog = exports2.EC2TagSetFilterSensitiveLog = exports2.EC2TagFilterFilterSensitiveLog = exports2.DeploymentStyleFilterSensitiveLog = exports2.BlueGreenDeploymentConfigurationFilterSensitiveLog = exports2.BlueInstanceTerminationOptionFilterSensitiveLog = exports2.GreenFleetProvisioningOptionFilterSensitiveLog = exports2.DeploymentReadyOptionFilterSensitiveLog = exports2.BatchGetDeploymentGroupsInputFilterSensitiveLog = exports2.BatchGetApplicationsOutputFilterSensitiveLog = exports2.BatchGetApplicationsInputFilterSensitiveLog = exports2.BatchGetApplicationRevisionsOutputFilterSensitiveLog = exports2.RevisionInfoFilterSensitiveLog = exports2.GenericRevisionInfoFilterSensitiveLog = exports2.BatchGetApplicationRevisionsInputFilterSensitiveLog = exports2.RevisionLocationFilterSensitiveLog = exports2.RawStringFilterSensitiveLog = exports2.S3LocationFilterSensitiveLog = exports2.GitHubLocationFilterSensitiveLog = void 0;
    exports2.ListDeploymentConfigsOutputFilterSensitiveLog = exports2.ListDeploymentConfigsInputFilterSensitiveLog = exports2.ListApplicationsOutputFilterSensitiveLog = exports2.ListApplicationsInputFilterSensitiveLog = exports2.ListApplicationRevisionsOutputFilterSensitiveLog = exports2.ListApplicationRevisionsInputFilterSensitiveLog = exports2.GetOnPremisesInstanceOutputFilterSensitiveLog = exports2.GetOnPremisesInstanceInputFilterSensitiveLog = exports2.GetDeploymentTargetOutputFilterSensitiveLog = exports2.GetDeploymentTargetInputFilterSensitiveLog = exports2.GetDeploymentInstanceOutputFilterSensitiveLog = exports2.GetDeploymentInstanceInputFilterSensitiveLog = exports2.GetDeploymentGroupOutputFilterSensitiveLog = exports2.GetDeploymentGroupInputFilterSensitiveLog = exports2.GetDeploymentConfigOutputFilterSensitiveLog = exports2.DeploymentConfigInfoFilterSensitiveLog = exports2.GetDeploymentConfigInputFilterSensitiveLog = exports2.GetDeploymentOutputFilterSensitiveLog = exports2.GetDeploymentInputFilterSensitiveLog = exports2.GetApplicationRevisionOutputFilterSensitiveLog = exports2.GetApplicationRevisionInputFilterSensitiveLog = exports2.GetApplicationOutputFilterSensitiveLog = exports2.GetApplicationInputFilterSensitiveLog = exports2.DeregisterOnPremisesInstanceInputFilterSensitiveLog = exports2.DeleteResourcesByExternalIdOutputFilterSensitiveLog = exports2.DeleteResourcesByExternalIdInputFilterSensitiveLog = exports2.DeleteGitHubAccountTokenOutputFilterSensitiveLog = exports2.DeleteGitHubAccountTokenInputFilterSensitiveLog = exports2.DeleteDeploymentGroupOutputFilterSensitiveLog = exports2.DeleteDeploymentGroupInputFilterSensitiveLog = exports2.DeleteDeploymentConfigInputFilterSensitiveLog = exports2.DeleteApplicationInputFilterSensitiveLog = exports2.CreateDeploymentGroupOutputFilterSensitiveLog = exports2.CreateDeploymentGroupInputFilterSensitiveLog = exports2.CreateDeploymentConfigOutputFilterSensitiveLog = exports2.CreateDeploymentConfigInputFilterSensitiveLog = exports2.TrafficRoutingConfigFilterSensitiveLog = exports2.TimeBasedLinearFilterSensitiveLog = exports2.TimeBasedCanaryFilterSensitiveLog = exports2.MinimumHealthyHostsFilterSensitiveLog = exports2.CreateDeploymentOutputFilterSensitiveLog = exports2.CreateDeploymentInputFilterSensitiveLog = exports2.CreateApplicationOutputFilterSensitiveLog = exports2.CreateApplicationInputFilterSensitiveLog = exports2.ContinueDeploymentInputFilterSensitiveLog = exports2.BatchGetOnPremisesInstancesOutputFilterSensitiveLog = exports2.InstanceInfoFilterSensitiveLog = exports2.BatchGetOnPremisesInstancesInputFilterSensitiveLog = exports2.BatchGetDeploymentTargetsOutputFilterSensitiveLog = exports2.DeploymentTargetFilterSensitiveLog = void 0;
    exports2.UpdateDeploymentGroupOutputFilterSensitiveLog = exports2.UpdateDeploymentGroupInputFilterSensitiveLog = exports2.UpdateApplicationInputFilterSensitiveLog = exports2.UntagResourceOutputFilterSensitiveLog = exports2.UntagResourceInputFilterSensitiveLog = exports2.TagResourceOutputFilterSensitiveLog = exports2.TagResourceInputFilterSensitiveLog = exports2.StopDeploymentOutputFilterSensitiveLog = exports2.StopDeploymentInputFilterSensitiveLog = exports2.SkipWaitTimeForInstanceTerminationInputFilterSensitiveLog = exports2.RemoveTagsFromOnPremisesInstancesInputFilterSensitiveLog = exports2.RegisterOnPremisesInstanceInputFilterSensitiveLog = exports2.RegisterApplicationRevisionInputFilterSensitiveLog = exports2.PutLifecycleEventHookExecutionStatusOutputFilterSensitiveLog = exports2.PutLifecycleEventHookExecutionStatusInputFilterSensitiveLog = exports2.ListTagsForResourceOutputFilterSensitiveLog = exports2.ListTagsForResourceInputFilterSensitiveLog = exports2.ListOnPremisesInstancesOutputFilterSensitiveLog = exports2.ListOnPremisesInstancesInputFilterSensitiveLog = exports2.ListGitHubAccountTokenNamesOutputFilterSensitiveLog = exports2.ListGitHubAccountTokenNamesInputFilterSensitiveLog = exports2.ListDeploymentTargetsOutputFilterSensitiveLog = exports2.ListDeploymentTargetsInputFilterSensitiveLog = exports2.ListDeploymentsOutputFilterSensitiveLog = exports2.ListDeploymentsInputFilterSensitiveLog = exports2.TimeRangeFilterSensitiveLog = exports2.ListDeploymentInstancesOutputFilterSensitiveLog = exports2.ListDeploymentInstancesInputFilterSensitiveLog = exports2.ListDeploymentGroupsOutputFilterSensitiveLog = exports2.ListDeploymentGroupsInputFilterSensitiveLog = void 0;
    var CodeDeployServiceException_1 = require_CodeDeployServiceException();
    var InstanceLimitExceededException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InstanceLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "InstanceLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InstanceLimitExceededException.prototype);
      }
    };
    exports2.InstanceLimitExceededException = InstanceLimitExceededException;
    var InstanceNameRequiredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InstanceNameRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "InstanceNameRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InstanceNameRequiredException.prototype);
      }
    };
    exports2.InstanceNameRequiredException = InstanceNameRequiredException;
    var InstanceNotRegisteredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InstanceNotRegisteredException",
          $fault: "client",
          ...opts
        });
        this.name = "InstanceNotRegisteredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InstanceNotRegisteredException.prototype);
      }
    };
    exports2.InstanceNotRegisteredException = InstanceNotRegisteredException;
    var InvalidInstanceNameException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidInstanceNameException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInstanceNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInstanceNameException.prototype);
      }
    };
    exports2.InvalidInstanceNameException = InvalidInstanceNameException;
    var InvalidTagException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidTagException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTagException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTagException.prototype);
      }
    };
    exports2.InvalidTagException = InvalidTagException;
    var TagLimitExceededException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "TagLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "TagLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TagLimitExceededException.prototype);
      }
    };
    exports2.TagLimitExceededException = TagLimitExceededException;
    var TagRequiredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "TagRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "TagRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TagRequiredException.prototype);
      }
    };
    exports2.TagRequiredException = TagRequiredException;
    var AlarmsLimitExceededException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "AlarmsLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "AlarmsLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlarmsLimitExceededException.prototype);
      }
    };
    exports2.AlarmsLimitExceededException = AlarmsLimitExceededException;
    var ApplicationAlreadyExistsException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "ApplicationAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "ApplicationAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApplicationAlreadyExistsException.prototype);
      }
    };
    exports2.ApplicationAlreadyExistsException = ApplicationAlreadyExistsException;
    var ApplicationDoesNotExistException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "ApplicationDoesNotExistException",
          $fault: "client",
          ...opts
        });
        this.name = "ApplicationDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApplicationDoesNotExistException.prototype);
      }
    };
    exports2.ApplicationDoesNotExistException = ApplicationDoesNotExistException;
    var ComputePlatform;
    (function(ComputePlatform2) {
      ComputePlatform2["ECS"] = "ECS";
      ComputePlatform2["LAMBDA"] = "Lambda";
      ComputePlatform2["SERVER"] = "Server";
    })(ComputePlatform = exports2.ComputePlatform || (exports2.ComputePlatform = {}));
    var ApplicationLimitExceededException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "ApplicationLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ApplicationLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApplicationLimitExceededException.prototype);
      }
    };
    exports2.ApplicationLimitExceededException = ApplicationLimitExceededException;
    var ApplicationNameRequiredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "ApplicationNameRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "ApplicationNameRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ApplicationNameRequiredException.prototype);
      }
    };
    exports2.ApplicationNameRequiredException = ApplicationNameRequiredException;
    var ApplicationRevisionSortBy;
    (function(ApplicationRevisionSortBy2) {
      ApplicationRevisionSortBy2["FirstUsedTime"] = "firstUsedTime";
      ApplicationRevisionSortBy2["LastUsedTime"] = "lastUsedTime";
      ApplicationRevisionSortBy2["RegisterTime"] = "registerTime";
    })(ApplicationRevisionSortBy = exports2.ApplicationRevisionSortBy || (exports2.ApplicationRevisionSortBy = {}));
    var ArnNotSupportedException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "ArnNotSupportedException",
          $fault: "client",
          ...opts
        });
        this.name = "ArnNotSupportedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ArnNotSupportedException.prototype);
      }
    };
    exports2.ArnNotSupportedException = ArnNotSupportedException;
    var AutoRollbackEvent;
    (function(AutoRollbackEvent2) {
      AutoRollbackEvent2["DEPLOYMENT_FAILURE"] = "DEPLOYMENT_FAILURE";
      AutoRollbackEvent2["DEPLOYMENT_STOP_ON_ALARM"] = "DEPLOYMENT_STOP_ON_ALARM";
      AutoRollbackEvent2["DEPLOYMENT_STOP_ON_REQUEST"] = "DEPLOYMENT_STOP_ON_REQUEST";
    })(AutoRollbackEvent = exports2.AutoRollbackEvent || (exports2.AutoRollbackEvent = {}));
    var RevisionLocationType;
    (function(RevisionLocationType2) {
      RevisionLocationType2["AppSpecContent"] = "AppSpecContent";
      RevisionLocationType2["GitHub"] = "GitHub";
      RevisionLocationType2["S3"] = "S3";
      RevisionLocationType2["String"] = "String";
    })(RevisionLocationType = exports2.RevisionLocationType || (exports2.RevisionLocationType = {}));
    var BundleType;
    (function(BundleType2) {
      BundleType2["JSON"] = "JSON";
      BundleType2["Tar"] = "tar";
      BundleType2["TarGZip"] = "tgz";
      BundleType2["YAML"] = "YAML";
      BundleType2["Zip"] = "zip";
    })(BundleType = exports2.BundleType || (exports2.BundleType = {}));
    var BatchLimitExceededException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "BatchLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "BatchLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BatchLimitExceededException.prototype);
      }
    };
    exports2.BatchLimitExceededException = BatchLimitExceededException;
    var InvalidApplicationNameException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidApplicationNameException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidApplicationNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidApplicationNameException.prototype);
      }
    };
    exports2.InvalidApplicationNameException = InvalidApplicationNameException;
    var InvalidRevisionException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidRevisionException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRevisionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRevisionException.prototype);
      }
    };
    exports2.InvalidRevisionException = InvalidRevisionException;
    var RevisionRequiredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "RevisionRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "RevisionRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RevisionRequiredException.prototype);
      }
    };
    exports2.RevisionRequiredException = RevisionRequiredException;
    var DeploymentReadyAction;
    (function(DeploymentReadyAction2) {
      DeploymentReadyAction2["CONTINUE_DEPLOYMENT"] = "CONTINUE_DEPLOYMENT";
      DeploymentReadyAction2["STOP_DEPLOYMENT"] = "STOP_DEPLOYMENT";
    })(DeploymentReadyAction = exports2.DeploymentReadyAction || (exports2.DeploymentReadyAction = {}));
    var GreenFleetProvisioningAction;
    (function(GreenFleetProvisioningAction2) {
      GreenFleetProvisioningAction2["COPY_AUTO_SCALING_GROUP"] = "COPY_AUTO_SCALING_GROUP";
      GreenFleetProvisioningAction2["DISCOVER_EXISTING"] = "DISCOVER_EXISTING";
    })(GreenFleetProvisioningAction = exports2.GreenFleetProvisioningAction || (exports2.GreenFleetProvisioningAction = {}));
    var InstanceAction;
    (function(InstanceAction2) {
      InstanceAction2["KEEP_ALIVE"] = "KEEP_ALIVE";
      InstanceAction2["TERMINATE"] = "TERMINATE";
    })(InstanceAction = exports2.InstanceAction || (exports2.InstanceAction = {}));
    var DeploymentOption;
    (function(DeploymentOption2) {
      DeploymentOption2["WITHOUT_TRAFFIC_CONTROL"] = "WITHOUT_TRAFFIC_CONTROL";
      DeploymentOption2["WITH_TRAFFIC_CONTROL"] = "WITH_TRAFFIC_CONTROL";
    })(DeploymentOption = exports2.DeploymentOption || (exports2.DeploymentOption = {}));
    var DeploymentType;
    (function(DeploymentType2) {
      DeploymentType2["BLUE_GREEN"] = "BLUE_GREEN";
      DeploymentType2["IN_PLACE"] = "IN_PLACE";
    })(DeploymentType = exports2.DeploymentType || (exports2.DeploymentType = {}));
    var EC2TagFilterType;
    (function(EC2TagFilterType2) {
      EC2TagFilterType2["KEY_AND_VALUE"] = "KEY_AND_VALUE";
      EC2TagFilterType2["KEY_ONLY"] = "KEY_ONLY";
      EC2TagFilterType2["VALUE_ONLY"] = "VALUE_ONLY";
    })(EC2TagFilterType = exports2.EC2TagFilterType || (exports2.EC2TagFilterType = {}));
    var DeploymentStatus;
    (function(DeploymentStatus2) {
      DeploymentStatus2["BAKING"] = "Baking";
      DeploymentStatus2["CREATED"] = "Created";
      DeploymentStatus2["FAILED"] = "Failed";
      DeploymentStatus2["IN_PROGRESS"] = "InProgress";
      DeploymentStatus2["QUEUED"] = "Queued";
      DeploymentStatus2["READY"] = "Ready";
      DeploymentStatus2["STOPPED"] = "Stopped";
      DeploymentStatus2["SUCCEEDED"] = "Succeeded";
    })(DeploymentStatus = exports2.DeploymentStatus || (exports2.DeploymentStatus = {}));
    var TagFilterType;
    (function(TagFilterType2) {
      TagFilterType2["KEY_AND_VALUE"] = "KEY_AND_VALUE";
      TagFilterType2["KEY_ONLY"] = "KEY_ONLY";
      TagFilterType2["VALUE_ONLY"] = "VALUE_ONLY";
    })(TagFilterType = exports2.TagFilterType || (exports2.TagFilterType = {}));
    var OutdatedInstancesStrategy;
    (function(OutdatedInstancesStrategy2) {
      OutdatedInstancesStrategy2["Ignore"] = "IGNORE";
      OutdatedInstancesStrategy2["Update"] = "UPDATE";
    })(OutdatedInstancesStrategy = exports2.OutdatedInstancesStrategy || (exports2.OutdatedInstancesStrategy = {}));
    var TriggerEventType;
    (function(TriggerEventType2) {
      TriggerEventType2["DEPLOYMENT_FAILURE"] = "DeploymentFailure";
      TriggerEventType2["DEPLOYMENT_READY"] = "DeploymentReady";
      TriggerEventType2["DEPLOYMENT_ROLLBACK"] = "DeploymentRollback";
      TriggerEventType2["DEPLOYMENT_START"] = "DeploymentStart";
      TriggerEventType2["DEPLOYMENT_STOP"] = "DeploymentStop";
      TriggerEventType2["DEPLOYMENT_SUCCESS"] = "DeploymentSuccess";
      TriggerEventType2["INSTANCE_FAILURE"] = "InstanceFailure";
      TriggerEventType2["INSTANCE_READY"] = "InstanceReady";
      TriggerEventType2["INSTANCE_START"] = "InstanceStart";
      TriggerEventType2["INSTANCE_SUCCESS"] = "InstanceSuccess";
    })(TriggerEventType = exports2.TriggerEventType || (exports2.TriggerEventType = {}));
    var DeploymentConfigDoesNotExistException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DeploymentConfigDoesNotExistException",
          $fault: "client",
          ...opts
        });
        this.name = "DeploymentConfigDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentConfigDoesNotExistException.prototype);
      }
    };
    exports2.DeploymentConfigDoesNotExistException = DeploymentConfigDoesNotExistException;
    var DeploymentGroupNameRequiredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DeploymentGroupNameRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "DeploymentGroupNameRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentGroupNameRequiredException.prototype);
      }
    };
    exports2.DeploymentGroupNameRequiredException = DeploymentGroupNameRequiredException;
    var InvalidDeploymentGroupNameException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidDeploymentGroupNameException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeploymentGroupNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeploymentGroupNameException.prototype);
      }
    };
    exports2.InvalidDeploymentGroupNameException = InvalidDeploymentGroupNameException;
    var _InstanceType;
    (function(_InstanceType2) {
      _InstanceType2["BLUE"] = "Blue";
      _InstanceType2["GREEN"] = "Green";
    })(_InstanceType = exports2._InstanceType || (exports2._InstanceType = {}));
    var LifecycleErrorCode;
    (function(LifecycleErrorCode2) {
      LifecycleErrorCode2["SCRIPT_FAILED"] = "ScriptFailed";
      LifecycleErrorCode2["SCRIPT_MISSING"] = "ScriptMissing";
      LifecycleErrorCode2["SCRIPT_NOT_EXECUTABLE"] = "ScriptNotExecutable";
      LifecycleErrorCode2["SCRIPT_TIMED_OUT"] = "ScriptTimedOut";
      LifecycleErrorCode2["SUCCESS"] = "Success";
      LifecycleErrorCode2["UNKNOWN_ERROR"] = "UnknownError";
    })(LifecycleErrorCode = exports2.LifecycleErrorCode || (exports2.LifecycleErrorCode = {}));
    var LifecycleEventStatus;
    (function(LifecycleEventStatus2) {
      LifecycleEventStatus2["FAILED"] = "Failed";
      LifecycleEventStatus2["IN_PROGRESS"] = "InProgress";
      LifecycleEventStatus2["PENDING"] = "Pending";
      LifecycleEventStatus2["SKIPPED"] = "Skipped";
      LifecycleEventStatus2["SUCCEEDED"] = "Succeeded";
      LifecycleEventStatus2["UNKNOWN"] = "Unknown";
    })(LifecycleEventStatus = exports2.LifecycleEventStatus || (exports2.LifecycleEventStatus = {}));
    var InstanceStatus;
    (function(InstanceStatus2) {
      InstanceStatus2["FAILED"] = "Failed";
      InstanceStatus2["IN_PROGRESS"] = "InProgress";
      InstanceStatus2["PENDING"] = "Pending";
      InstanceStatus2["READY"] = "Ready";
      InstanceStatus2["SKIPPED"] = "Skipped";
      InstanceStatus2["SUCCEEDED"] = "Succeeded";
      InstanceStatus2["UNKNOWN"] = "Unknown";
    })(InstanceStatus = exports2.InstanceStatus || (exports2.InstanceStatus = {}));
    var DeploymentDoesNotExistException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DeploymentDoesNotExistException",
          $fault: "client",
          ...opts
        });
        this.name = "DeploymentDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentDoesNotExistException.prototype);
      }
    };
    exports2.DeploymentDoesNotExistException = DeploymentDoesNotExistException;
    var DeploymentIdRequiredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DeploymentIdRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "DeploymentIdRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentIdRequiredException.prototype);
      }
    };
    exports2.DeploymentIdRequiredException = DeploymentIdRequiredException;
    var InstanceIdRequiredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InstanceIdRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "InstanceIdRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InstanceIdRequiredException.prototype);
      }
    };
    exports2.InstanceIdRequiredException = InstanceIdRequiredException;
    var InvalidComputePlatformException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidComputePlatformException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidComputePlatformException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidComputePlatformException.prototype);
      }
    };
    exports2.InvalidComputePlatformException = InvalidComputePlatformException;
    var InvalidDeploymentIdException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidDeploymentIdException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeploymentIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeploymentIdException.prototype);
      }
    };
    exports2.InvalidDeploymentIdException = InvalidDeploymentIdException;
    var DeploymentCreator;
    (function(DeploymentCreator2) {
      DeploymentCreator2["Autoscaling"] = "autoscaling";
      DeploymentCreator2["CloudFormation"] = "CloudFormation";
      DeploymentCreator2["CloudFormationRollback"] = "CloudFormationRollback";
      DeploymentCreator2["CodeDeploy"] = "CodeDeploy";
      DeploymentCreator2["CodeDeployAutoUpdate"] = "CodeDeployAutoUpdate";
      DeploymentCreator2["CodeDeployRollback"] = "codeDeployRollback";
      DeploymentCreator2["User"] = "user";
    })(DeploymentCreator = exports2.DeploymentCreator || (exports2.DeploymentCreator = {}));
    var ErrorCode;
    (function(ErrorCode2) {
      ErrorCode2["AGENT_ISSUE"] = "AGENT_ISSUE";
      ErrorCode2["ALARM_ACTIVE"] = "ALARM_ACTIVE";
      ErrorCode2["APPLICATION_MISSING"] = "APPLICATION_MISSING";
      ErrorCode2["AUTOSCALING_VALIDATION_ERROR"] = "AUTOSCALING_VALIDATION_ERROR";
      ErrorCode2["AUTO_SCALING_CONFIGURATION"] = "AUTO_SCALING_CONFIGURATION";
      ErrorCode2["AUTO_SCALING_IAM_ROLE_PERMISSIONS"] = "AUTO_SCALING_IAM_ROLE_PERMISSIONS";
      ErrorCode2["CLOUDFORMATION_STACK_FAILURE"] = "CLOUDFORMATION_STACK_FAILURE";
      ErrorCode2["CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND"] = "CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND";
      ErrorCode2["CUSTOMER_APPLICATION_UNHEALTHY"] = "CUSTOMER_APPLICATION_UNHEALTHY";
      ErrorCode2["DEPLOYMENT_GROUP_MISSING"] = "DEPLOYMENT_GROUP_MISSING";
      ErrorCode2["ECS_UPDATE_ERROR"] = "ECS_UPDATE_ERROR";
      ErrorCode2["ELASTIC_LOAD_BALANCING_INVALID"] = "ELASTIC_LOAD_BALANCING_INVALID";
      ErrorCode2["ELB_INVALID_INSTANCE"] = "ELB_INVALID_INSTANCE";
      ErrorCode2["HEALTH_CONSTRAINTS"] = "HEALTH_CONSTRAINTS";
      ErrorCode2["HEALTH_CONSTRAINTS_INVALID"] = "HEALTH_CONSTRAINTS_INVALID";
      ErrorCode2["HOOK_EXECUTION_FAILURE"] = "HOOK_EXECUTION_FAILURE";
      ErrorCode2["IAM_ROLE_MISSING"] = "IAM_ROLE_MISSING";
      ErrorCode2["IAM_ROLE_PERMISSIONS"] = "IAM_ROLE_PERMISSIONS";
      ErrorCode2["INTERNAL_ERROR"] = "INTERNAL_ERROR";
      ErrorCode2["INVALID_ECS_SERVICE"] = "INVALID_ECS_SERVICE";
      ErrorCode2["INVALID_LAMBDA_CONFIGURATION"] = "INVALID_LAMBDA_CONFIGURATION";
      ErrorCode2["INVALID_LAMBDA_FUNCTION"] = "INVALID_LAMBDA_FUNCTION";
      ErrorCode2["INVALID_REVISION"] = "INVALID_REVISION";
      ErrorCode2["MANUAL_STOP"] = "MANUAL_STOP";
      ErrorCode2["MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION"] = "MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION";
      ErrorCode2["MISSING_ELB_INFORMATION"] = "MISSING_ELB_INFORMATION";
      ErrorCode2["MISSING_GITHUB_TOKEN"] = "MISSING_GITHUB_TOKEN";
      ErrorCode2["NO_EC2_SUBSCRIPTION"] = "NO_EC2_SUBSCRIPTION";
      ErrorCode2["NO_INSTANCES"] = "NO_INSTANCES";
      ErrorCode2["OVER_MAX_INSTANCES"] = "OVER_MAX_INSTANCES";
      ErrorCode2["RESOURCE_LIMIT_EXCEEDED"] = "RESOURCE_LIMIT_EXCEEDED";
      ErrorCode2["REVISION_MISSING"] = "REVISION_MISSING";
      ErrorCode2["THROTTLED"] = "THROTTLED";
      ErrorCode2["TIMEOUT"] = "TIMEOUT";
    })(ErrorCode = exports2.ErrorCode || (exports2.ErrorCode = {}));
    var FileExistsBehavior;
    (function(FileExistsBehavior2) {
      FileExistsBehavior2["DISALLOW"] = "DISALLOW";
      FileExistsBehavior2["OVERWRITE"] = "OVERWRITE";
      FileExistsBehavior2["RETAIN"] = "RETAIN";
    })(FileExistsBehavior = exports2.FileExistsBehavior || (exports2.FileExistsBehavior = {}));
    var TargetStatus;
    (function(TargetStatus2) {
      TargetStatus2["FAILED"] = "Failed";
      TargetStatus2["IN_PROGRESS"] = "InProgress";
      TargetStatus2["PENDING"] = "Pending";
      TargetStatus2["READY"] = "Ready";
      TargetStatus2["SKIPPED"] = "Skipped";
      TargetStatus2["SUCCEEDED"] = "Succeeded";
      TargetStatus2["UNKNOWN"] = "Unknown";
    })(TargetStatus = exports2.TargetStatus || (exports2.TargetStatus = {}));
    var DeploymentTargetType;
    (function(DeploymentTargetType2) {
      DeploymentTargetType2["CLOUDFORMATION_TARGET"] = "CloudFormationTarget";
      DeploymentTargetType2["ECS_TARGET"] = "ECSTarget";
      DeploymentTargetType2["INSTANCE_TARGET"] = "InstanceTarget";
      DeploymentTargetType2["LAMBDA_TARGET"] = "LambdaTarget";
    })(DeploymentTargetType = exports2.DeploymentTargetType || (exports2.DeploymentTargetType = {}));
    var TargetLabel;
    (function(TargetLabel2) {
      TargetLabel2["BLUE"] = "Blue";
      TargetLabel2["GREEN"] = "Green";
    })(TargetLabel = exports2.TargetLabel || (exports2.TargetLabel = {}));
    var DeploymentNotStartedException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DeploymentNotStartedException",
          $fault: "client",
          ...opts
        });
        this.name = "DeploymentNotStartedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentNotStartedException.prototype);
      }
    };
    exports2.DeploymentNotStartedException = DeploymentNotStartedException;
    var DeploymentTargetDoesNotExistException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DeploymentTargetDoesNotExistException",
          $fault: "client",
          ...opts
        });
        this.name = "DeploymentTargetDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentTargetDoesNotExistException.prototype);
      }
    };
    exports2.DeploymentTargetDoesNotExistException = DeploymentTargetDoesNotExistException;
    var DeploymentTargetIdRequiredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DeploymentTargetIdRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "DeploymentTargetIdRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentTargetIdRequiredException.prototype);
      }
    };
    exports2.DeploymentTargetIdRequiredException = DeploymentTargetIdRequiredException;
    var DeploymentTargetListSizeExceededException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DeploymentTargetListSizeExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "DeploymentTargetListSizeExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentTargetListSizeExceededException.prototype);
      }
    };
    exports2.DeploymentTargetListSizeExceededException = DeploymentTargetListSizeExceededException;
    var InstanceDoesNotExistException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InstanceDoesNotExistException",
          $fault: "client",
          ...opts
        });
        this.name = "InstanceDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InstanceDoesNotExistException.prototype);
      }
    };
    exports2.InstanceDoesNotExistException = InstanceDoesNotExistException;
    var InvalidDeploymentTargetIdException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidDeploymentTargetIdException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeploymentTargetIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeploymentTargetIdException.prototype);
      }
    };
    exports2.InvalidDeploymentTargetIdException = InvalidDeploymentTargetIdException;
    var BucketNameFilterRequiredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "BucketNameFilterRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "BucketNameFilterRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BucketNameFilterRequiredException.prototype);
      }
    };
    exports2.BucketNameFilterRequiredException = BucketNameFilterRequiredException;
    var DeploymentWaitType;
    (function(DeploymentWaitType2) {
      DeploymentWaitType2["READY_WAIT"] = "READY_WAIT";
      DeploymentWaitType2["TERMINATION_WAIT"] = "TERMINATION_WAIT";
    })(DeploymentWaitType = exports2.DeploymentWaitType || (exports2.DeploymentWaitType = {}));
    var DeploymentAlreadyCompletedException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DeploymentAlreadyCompletedException",
          $fault: "client",
          ...opts
        });
        this.name = "DeploymentAlreadyCompletedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentAlreadyCompletedException.prototype);
      }
    };
    exports2.DeploymentAlreadyCompletedException = DeploymentAlreadyCompletedException;
    var DeploymentIsNotInReadyStateException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DeploymentIsNotInReadyStateException",
          $fault: "client",
          ...opts
        });
        this.name = "DeploymentIsNotInReadyStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentIsNotInReadyStateException.prototype);
      }
    };
    exports2.DeploymentIsNotInReadyStateException = DeploymentIsNotInReadyStateException;
    var InvalidDeploymentStatusException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidDeploymentStatusException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeploymentStatusException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeploymentStatusException.prototype);
      }
    };
    exports2.InvalidDeploymentStatusException = InvalidDeploymentStatusException;
    var InvalidDeploymentWaitTypeException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidDeploymentWaitTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeploymentWaitTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeploymentWaitTypeException.prototype);
      }
    };
    exports2.InvalidDeploymentWaitTypeException = InvalidDeploymentWaitTypeException;
    var UnsupportedActionForDeploymentTypeException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedActionForDeploymentTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedActionForDeploymentTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedActionForDeploymentTypeException.prototype);
      }
    };
    exports2.UnsupportedActionForDeploymentTypeException = UnsupportedActionForDeploymentTypeException;
    var InvalidTagsToAddException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidTagsToAddException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTagsToAddException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTagsToAddException.prototype);
      }
    };
    exports2.InvalidTagsToAddException = InvalidTagsToAddException;
    var DeploymentGroupDoesNotExistException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DeploymentGroupDoesNotExistException",
          $fault: "client",
          ...opts
        });
        this.name = "DeploymentGroupDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentGroupDoesNotExistException.prototype);
      }
    };
    exports2.DeploymentGroupDoesNotExistException = DeploymentGroupDoesNotExistException;
    var DeploymentLimitExceededException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DeploymentLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "DeploymentLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentLimitExceededException.prototype);
      }
    };
    exports2.DeploymentLimitExceededException = DeploymentLimitExceededException;
    var DescriptionTooLongException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DescriptionTooLongException",
          $fault: "client",
          ...opts
        });
        this.name = "DescriptionTooLongException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DescriptionTooLongException.prototype);
      }
    };
    exports2.DescriptionTooLongException = DescriptionTooLongException;
    var InvalidAlarmConfigException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidAlarmConfigException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAlarmConfigException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAlarmConfigException.prototype);
      }
    };
    exports2.InvalidAlarmConfigException = InvalidAlarmConfigException;
    var InvalidAutoRollbackConfigException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidAutoRollbackConfigException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAutoRollbackConfigException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAutoRollbackConfigException.prototype);
      }
    };
    exports2.InvalidAutoRollbackConfigException = InvalidAutoRollbackConfigException;
    var InvalidAutoScalingGroupException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidAutoScalingGroupException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAutoScalingGroupException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAutoScalingGroupException.prototype);
      }
    };
    exports2.InvalidAutoScalingGroupException = InvalidAutoScalingGroupException;
    var InvalidDeploymentConfigNameException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidDeploymentConfigNameException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeploymentConfigNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeploymentConfigNameException.prototype);
      }
    };
    exports2.InvalidDeploymentConfigNameException = InvalidDeploymentConfigNameException;
    var InvalidFileExistsBehaviorException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidFileExistsBehaviorException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFileExistsBehaviorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFileExistsBehaviorException.prototype);
      }
    };
    exports2.InvalidFileExistsBehaviorException = InvalidFileExistsBehaviorException;
    var InvalidGitHubAccountTokenException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidGitHubAccountTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGitHubAccountTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidGitHubAccountTokenException.prototype);
      }
    };
    exports2.InvalidGitHubAccountTokenException = InvalidGitHubAccountTokenException;
    var InvalidIgnoreApplicationStopFailuresValueException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidIgnoreApplicationStopFailuresValueException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIgnoreApplicationStopFailuresValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidIgnoreApplicationStopFailuresValueException.prototype);
      }
    };
    exports2.InvalidIgnoreApplicationStopFailuresValueException = InvalidIgnoreApplicationStopFailuresValueException;
    var InvalidLoadBalancerInfoException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidLoadBalancerInfoException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidLoadBalancerInfoException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidLoadBalancerInfoException.prototype);
      }
    };
    exports2.InvalidLoadBalancerInfoException = InvalidLoadBalancerInfoException;
    var InvalidRoleException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidRoleException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRoleException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRoleException.prototype);
      }
    };
    exports2.InvalidRoleException = InvalidRoleException;
    var InvalidTargetInstancesException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidTargetInstancesException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTargetInstancesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTargetInstancesException.prototype);
      }
    };
    exports2.InvalidTargetInstancesException = InvalidTargetInstancesException;
    var InvalidTrafficRoutingConfigurationException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidTrafficRoutingConfigurationException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTrafficRoutingConfigurationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTrafficRoutingConfigurationException.prototype);
      }
    };
    exports2.InvalidTrafficRoutingConfigurationException = InvalidTrafficRoutingConfigurationException;
    var InvalidUpdateOutdatedInstancesOnlyValueException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidUpdateOutdatedInstancesOnlyValueException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidUpdateOutdatedInstancesOnlyValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidUpdateOutdatedInstancesOnlyValueException.prototype);
      }
    };
    exports2.InvalidUpdateOutdatedInstancesOnlyValueException = InvalidUpdateOutdatedInstancesOnlyValueException;
    var RevisionDoesNotExistException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "RevisionDoesNotExistException",
          $fault: "client",
          ...opts
        });
        this.name = "RevisionDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RevisionDoesNotExistException.prototype);
      }
    };
    exports2.RevisionDoesNotExistException = RevisionDoesNotExistException;
    var ThrottlingException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "ThrottlingException",
          $fault: "client",
          ...opts
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
      }
    };
    exports2.ThrottlingException = ThrottlingException;
    var MinimumHealthyHostsType;
    (function(MinimumHealthyHostsType2) {
      MinimumHealthyHostsType2["FLEET_PERCENT"] = "FLEET_PERCENT";
      MinimumHealthyHostsType2["HOST_COUNT"] = "HOST_COUNT";
    })(MinimumHealthyHostsType = exports2.MinimumHealthyHostsType || (exports2.MinimumHealthyHostsType = {}));
    var TrafficRoutingType;
    (function(TrafficRoutingType2) {
      TrafficRoutingType2["AllAtOnce"] = "AllAtOnce";
      TrafficRoutingType2["TimeBasedCanary"] = "TimeBasedCanary";
      TrafficRoutingType2["TimeBasedLinear"] = "TimeBasedLinear";
    })(TrafficRoutingType = exports2.TrafficRoutingType || (exports2.TrafficRoutingType = {}));
    var DeploymentConfigAlreadyExistsException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DeploymentConfigAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "DeploymentConfigAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentConfigAlreadyExistsException.prototype);
      }
    };
    exports2.DeploymentConfigAlreadyExistsException = DeploymentConfigAlreadyExistsException;
    var DeploymentConfigLimitExceededException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DeploymentConfigLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "DeploymentConfigLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentConfigLimitExceededException.prototype);
      }
    };
    exports2.DeploymentConfigLimitExceededException = DeploymentConfigLimitExceededException;
    var DeploymentConfigNameRequiredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DeploymentConfigNameRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "DeploymentConfigNameRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentConfigNameRequiredException.prototype);
      }
    };
    exports2.DeploymentConfigNameRequiredException = DeploymentConfigNameRequiredException;
    var InvalidMinimumHealthyHostValueException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidMinimumHealthyHostValueException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidMinimumHealthyHostValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidMinimumHealthyHostValueException.prototype);
      }
    };
    exports2.InvalidMinimumHealthyHostValueException = InvalidMinimumHealthyHostValueException;
    var DeploymentGroupAlreadyExistsException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DeploymentGroupAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "DeploymentGroupAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentGroupAlreadyExistsException.prototype);
      }
    };
    exports2.DeploymentGroupAlreadyExistsException = DeploymentGroupAlreadyExistsException;
    var DeploymentGroupLimitExceededException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DeploymentGroupLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "DeploymentGroupLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentGroupLimitExceededException.prototype);
      }
    };
    exports2.DeploymentGroupLimitExceededException = DeploymentGroupLimitExceededException;
    var ECSServiceMappingLimitExceededException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "ECSServiceMappingLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ECSServiceMappingLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ECSServiceMappingLimitExceededException.prototype);
      }
    };
    exports2.ECSServiceMappingLimitExceededException = ECSServiceMappingLimitExceededException;
    var InvalidBlueGreenDeploymentConfigurationException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidBlueGreenDeploymentConfigurationException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidBlueGreenDeploymentConfigurationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidBlueGreenDeploymentConfigurationException.prototype);
      }
    };
    exports2.InvalidBlueGreenDeploymentConfigurationException = InvalidBlueGreenDeploymentConfigurationException;
    var InvalidDeploymentStyleException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidDeploymentStyleException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeploymentStyleException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeploymentStyleException.prototype);
      }
    };
    exports2.InvalidDeploymentStyleException = InvalidDeploymentStyleException;
    var InvalidEC2TagCombinationException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidEC2TagCombinationException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidEC2TagCombinationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidEC2TagCombinationException.prototype);
      }
    };
    exports2.InvalidEC2TagCombinationException = InvalidEC2TagCombinationException;
    var InvalidEC2TagException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidEC2TagException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidEC2TagException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidEC2TagException.prototype);
      }
    };
    exports2.InvalidEC2TagException = InvalidEC2TagException;
    var InvalidECSServiceException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidECSServiceException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidECSServiceException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidECSServiceException.prototype);
      }
    };
    exports2.InvalidECSServiceException = InvalidECSServiceException;
    var InvalidInputException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidInputException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInputException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInputException.prototype);
      }
    };
    exports2.InvalidInputException = InvalidInputException;
    var InvalidOnPremisesTagCombinationException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidOnPremisesTagCombinationException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOnPremisesTagCombinationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOnPremisesTagCombinationException.prototype);
      }
    };
    exports2.InvalidOnPremisesTagCombinationException = InvalidOnPremisesTagCombinationException;
    var InvalidTargetGroupPairException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidTargetGroupPairException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTargetGroupPairException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTargetGroupPairException.prototype);
      }
    };
    exports2.InvalidTargetGroupPairException = InvalidTargetGroupPairException;
    var InvalidTriggerConfigException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidTriggerConfigException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTriggerConfigException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTriggerConfigException.prototype);
      }
    };
    exports2.InvalidTriggerConfigException = InvalidTriggerConfigException;
    var LifecycleHookLimitExceededException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "LifecycleHookLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "LifecycleHookLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LifecycleHookLimitExceededException.prototype);
      }
    };
    exports2.LifecycleHookLimitExceededException = LifecycleHookLimitExceededException;
    var RoleRequiredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "RoleRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "RoleRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RoleRequiredException.prototype);
      }
    };
    exports2.RoleRequiredException = RoleRequiredException;
    var TagSetListLimitExceededException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "TagSetListLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "TagSetListLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TagSetListLimitExceededException.prototype);
      }
    };
    exports2.TagSetListLimitExceededException = TagSetListLimitExceededException;
    var TriggerTargetsLimitExceededException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "TriggerTargetsLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "TriggerTargetsLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TriggerTargetsLimitExceededException.prototype);
      }
    };
    exports2.TriggerTargetsLimitExceededException = TriggerTargetsLimitExceededException;
    var DeploymentConfigInUseException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "DeploymentConfigInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "DeploymentConfigInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeploymentConfigInUseException.prototype);
      }
    };
    exports2.DeploymentConfigInUseException = DeploymentConfigInUseException;
    var InvalidOperationException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidOperationException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOperationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOperationException.prototype);
      }
    };
    exports2.InvalidOperationException = InvalidOperationException;
    var GitHubAccountTokenDoesNotExistException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "GitHubAccountTokenDoesNotExistException",
          $fault: "client",
          ...opts
        });
        this.name = "GitHubAccountTokenDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GitHubAccountTokenDoesNotExistException.prototype);
      }
    };
    exports2.GitHubAccountTokenDoesNotExistException = GitHubAccountTokenDoesNotExistException;
    var GitHubAccountTokenNameRequiredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "GitHubAccountTokenNameRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "GitHubAccountTokenNameRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GitHubAccountTokenNameRequiredException.prototype);
      }
    };
    exports2.GitHubAccountTokenNameRequiredException = GitHubAccountTokenNameRequiredException;
    var InvalidGitHubAccountTokenNameException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidGitHubAccountTokenNameException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGitHubAccountTokenNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidGitHubAccountTokenNameException.prototype);
      }
    };
    exports2.InvalidGitHubAccountTokenNameException = InvalidGitHubAccountTokenNameException;
    var OperationNotSupportedException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "OperationNotSupportedException",
          $fault: "client",
          ...opts
        });
        this.name = "OperationNotSupportedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationNotSupportedException.prototype);
      }
    };
    exports2.OperationNotSupportedException = OperationNotSupportedException;
    var ResourceValidationException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "ResourceValidationException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceValidationException.prototype);
      }
    };
    exports2.ResourceValidationException = ResourceValidationException;
    var InvalidBucketNameFilterException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidBucketNameFilterException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidBucketNameFilterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidBucketNameFilterException.prototype);
      }
    };
    exports2.InvalidBucketNameFilterException = InvalidBucketNameFilterException;
    var InvalidDeployedStateFilterException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidDeployedStateFilterException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeployedStateFilterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeployedStateFilterException.prototype);
      }
    };
    exports2.InvalidDeployedStateFilterException = InvalidDeployedStateFilterException;
    var InvalidKeyPrefixFilterException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidKeyPrefixFilterException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidKeyPrefixFilterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidKeyPrefixFilterException.prototype);
      }
    };
    exports2.InvalidKeyPrefixFilterException = InvalidKeyPrefixFilterException;
    var InvalidNextTokenException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidNextTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
      }
    };
    exports2.InvalidNextTokenException = InvalidNextTokenException;
    var InvalidSortByException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidSortByException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidSortByException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSortByException.prototype);
      }
    };
    exports2.InvalidSortByException = InvalidSortByException;
    var InvalidSortOrderException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidSortOrderException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidSortOrderException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSortOrderException.prototype);
      }
    };
    exports2.InvalidSortOrderException = InvalidSortOrderException;
    var ListStateFilterAction;
    (function(ListStateFilterAction2) {
      ListStateFilterAction2["Exclude"] = "exclude";
      ListStateFilterAction2["Ignore"] = "ignore";
      ListStateFilterAction2["Include"] = "include";
    })(ListStateFilterAction = exports2.ListStateFilterAction || (exports2.ListStateFilterAction = {}));
    var SortOrder;
    (function(SortOrder2) {
      SortOrder2["Ascending"] = "ascending";
      SortOrder2["Descending"] = "descending";
    })(SortOrder = exports2.SortOrder || (exports2.SortOrder = {}));
    var InvalidDeploymentInstanceTypeException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidDeploymentInstanceTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeploymentInstanceTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeploymentInstanceTypeException.prototype);
      }
    };
    exports2.InvalidDeploymentInstanceTypeException = InvalidDeploymentInstanceTypeException;
    var InvalidInstanceStatusException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidInstanceStatusException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInstanceStatusException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInstanceStatusException.prototype);
      }
    };
    exports2.InvalidInstanceStatusException = InvalidInstanceStatusException;
    var InvalidInstanceTypeException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidInstanceTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInstanceTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInstanceTypeException.prototype);
      }
    };
    exports2.InvalidInstanceTypeException = InvalidInstanceTypeException;
    var InvalidTargetFilterNameException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidTargetFilterNameException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTargetFilterNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTargetFilterNameException.prototype);
      }
    };
    exports2.InvalidTargetFilterNameException = InvalidTargetFilterNameException;
    var InvalidExternalIdException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidExternalIdException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidExternalIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidExternalIdException.prototype);
      }
    };
    exports2.InvalidExternalIdException = InvalidExternalIdException;
    var InvalidTimeRangeException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidTimeRangeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTimeRangeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTimeRangeException.prototype);
      }
    };
    exports2.InvalidTimeRangeException = InvalidTimeRangeException;
    var TargetFilterName;
    (function(TargetFilterName2) {
      TargetFilterName2["SERVER_INSTANCE_LABEL"] = "ServerInstanceLabel";
      TargetFilterName2["TARGET_STATUS"] = "TargetStatus";
    })(TargetFilterName = exports2.TargetFilterName || (exports2.TargetFilterName = {}));
    var InvalidRegistrationStatusException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidRegistrationStatusException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRegistrationStatusException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRegistrationStatusException.prototype);
      }
    };
    exports2.InvalidRegistrationStatusException = InvalidRegistrationStatusException;
    var InvalidTagFilterException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidTagFilterException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTagFilterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTagFilterException.prototype);
      }
    };
    exports2.InvalidTagFilterException = InvalidTagFilterException;
    var RegistrationStatus;
    (function(RegistrationStatus2) {
      RegistrationStatus2["Deregistered"] = "Deregistered";
      RegistrationStatus2["Registered"] = "Registered";
    })(RegistrationStatus = exports2.RegistrationStatus || (exports2.RegistrationStatus = {}));
    var InvalidArnException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidArnException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidArnException.prototype);
      }
    };
    exports2.InvalidArnException = InvalidArnException;
    var ResourceArnRequiredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "ResourceArnRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceArnRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceArnRequiredException.prototype);
      }
    };
    exports2.ResourceArnRequiredException = ResourceArnRequiredException;
    var InvalidLifecycleEventHookExecutionIdException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidLifecycleEventHookExecutionIdException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidLifecycleEventHookExecutionIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidLifecycleEventHookExecutionIdException.prototype);
      }
    };
    exports2.InvalidLifecycleEventHookExecutionIdException = InvalidLifecycleEventHookExecutionIdException;
    var InvalidLifecycleEventHookExecutionStatusException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidLifecycleEventHookExecutionStatusException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidLifecycleEventHookExecutionStatusException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidLifecycleEventHookExecutionStatusException.prototype);
      }
    };
    exports2.InvalidLifecycleEventHookExecutionStatusException = InvalidLifecycleEventHookExecutionStatusException;
    var LifecycleEventAlreadyCompletedException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "LifecycleEventAlreadyCompletedException",
          $fault: "client",
          ...opts
        });
        this.name = "LifecycleEventAlreadyCompletedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LifecycleEventAlreadyCompletedException.prototype);
      }
    };
    exports2.LifecycleEventAlreadyCompletedException = LifecycleEventAlreadyCompletedException;
    var IamArnRequiredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "IamArnRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "IamArnRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IamArnRequiredException.prototype);
      }
    };
    exports2.IamArnRequiredException = IamArnRequiredException;
    var IamSessionArnAlreadyRegisteredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "IamSessionArnAlreadyRegisteredException",
          $fault: "client",
          ...opts
        });
        this.name = "IamSessionArnAlreadyRegisteredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IamSessionArnAlreadyRegisteredException.prototype);
      }
    };
    exports2.IamSessionArnAlreadyRegisteredException = IamSessionArnAlreadyRegisteredException;
    var IamUserArnAlreadyRegisteredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "IamUserArnAlreadyRegisteredException",
          $fault: "client",
          ...opts
        });
        this.name = "IamUserArnAlreadyRegisteredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IamUserArnAlreadyRegisteredException.prototype);
      }
    };
    exports2.IamUserArnAlreadyRegisteredException = IamUserArnAlreadyRegisteredException;
    var IamUserArnRequiredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "IamUserArnRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "IamUserArnRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IamUserArnRequiredException.prototype);
      }
    };
    exports2.IamUserArnRequiredException = IamUserArnRequiredException;
    var InstanceNameAlreadyRegisteredException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InstanceNameAlreadyRegisteredException",
          $fault: "client",
          ...opts
        });
        this.name = "InstanceNameAlreadyRegisteredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InstanceNameAlreadyRegisteredException.prototype);
      }
    };
    exports2.InstanceNameAlreadyRegisteredException = InstanceNameAlreadyRegisteredException;
    var InvalidIamSessionArnException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidIamSessionArnException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIamSessionArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidIamSessionArnException.prototype);
      }
    };
    exports2.InvalidIamSessionArnException = InvalidIamSessionArnException;
    var InvalidIamUserArnException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "InvalidIamUserArnException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIamUserArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidIamUserArnException.prototype);
      }
    };
    exports2.InvalidIamUserArnException = InvalidIamUserArnException;
    var MultipleIamArnsProvidedException = class extends CodeDeployServiceException_1.CodeDeployServiceException {
      constructor(opts) {
        super({
          name: "MultipleIamArnsProvidedException",
          $fault: "client",
          ...opts
        });
        this.name = "MultipleIamArnsProvidedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MultipleIamArnsProvidedException.prototype);
      }
    };
    exports2.MultipleIamArnsProvidedException = MultipleIamArnsProvidedException;
    var StopStatus;
    (function(StopStatus2) {
      StopStatus2["PENDING"] = "Pending";
      StopStatus2["SUCCEEDED"] = "Succeeded";
    })(StopStatus = exports2.StopStatus || (exports2.StopStatus = {}));
    var TagFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var AddTagsToOnPremisesInstancesInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AddTagsToOnPremisesInstancesInputFilterSensitiveLog = AddTagsToOnPremisesInstancesInputFilterSensitiveLog;
    var AlarmFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AlarmFilterSensitiveLog = AlarmFilterSensitiveLog;
    var AlarmConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AlarmConfigurationFilterSensitiveLog = AlarmConfigurationFilterSensitiveLog;
    var ApplicationInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ApplicationInfoFilterSensitiveLog = ApplicationInfoFilterSensitiveLog;
    var AppSpecContentFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AppSpecContentFilterSensitiveLog = AppSpecContentFilterSensitiveLog;
    var AutoRollbackConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AutoRollbackConfigurationFilterSensitiveLog = AutoRollbackConfigurationFilterSensitiveLog;
    var AutoScalingGroupFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AutoScalingGroupFilterSensitiveLog = AutoScalingGroupFilterSensitiveLog;
    var GitHubLocationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GitHubLocationFilterSensitiveLog = GitHubLocationFilterSensitiveLog;
    var S3LocationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.S3LocationFilterSensitiveLog = S3LocationFilterSensitiveLog;
    var RawStringFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RawStringFilterSensitiveLog = RawStringFilterSensitiveLog;
    var RevisionLocationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RevisionLocationFilterSensitiveLog = RevisionLocationFilterSensitiveLog;
    var BatchGetApplicationRevisionsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BatchGetApplicationRevisionsInputFilterSensitiveLog = BatchGetApplicationRevisionsInputFilterSensitiveLog;
    var GenericRevisionInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GenericRevisionInfoFilterSensitiveLog = GenericRevisionInfoFilterSensitiveLog;
    var RevisionInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RevisionInfoFilterSensitiveLog = RevisionInfoFilterSensitiveLog;
    var BatchGetApplicationRevisionsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BatchGetApplicationRevisionsOutputFilterSensitiveLog = BatchGetApplicationRevisionsOutputFilterSensitiveLog;
    var BatchGetApplicationsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BatchGetApplicationsInputFilterSensitiveLog = BatchGetApplicationsInputFilterSensitiveLog;
    var BatchGetApplicationsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BatchGetApplicationsOutputFilterSensitiveLog = BatchGetApplicationsOutputFilterSensitiveLog;
    var BatchGetDeploymentGroupsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BatchGetDeploymentGroupsInputFilterSensitiveLog = BatchGetDeploymentGroupsInputFilterSensitiveLog;
    var DeploymentReadyOptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeploymentReadyOptionFilterSensitiveLog = DeploymentReadyOptionFilterSensitiveLog;
    var GreenFleetProvisioningOptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GreenFleetProvisioningOptionFilterSensitiveLog = GreenFleetProvisioningOptionFilterSensitiveLog;
    var BlueInstanceTerminationOptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BlueInstanceTerminationOptionFilterSensitiveLog = BlueInstanceTerminationOptionFilterSensitiveLog;
    var BlueGreenDeploymentConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BlueGreenDeploymentConfigurationFilterSensitiveLog = BlueGreenDeploymentConfigurationFilterSensitiveLog;
    var DeploymentStyleFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeploymentStyleFilterSensitiveLog = DeploymentStyleFilterSensitiveLog;
    var EC2TagFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.EC2TagFilterFilterSensitiveLog = EC2TagFilterFilterSensitiveLog;
    var EC2TagSetFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.EC2TagSetFilterSensitiveLog = EC2TagSetFilterSensitiveLog;
    var ECSServiceFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ECSServiceFilterSensitiveLog = ECSServiceFilterSensitiveLog;
    var LastDeploymentInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.LastDeploymentInfoFilterSensitiveLog = LastDeploymentInfoFilterSensitiveLog;
    var ELBInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ELBInfoFilterSensitiveLog = ELBInfoFilterSensitiveLog;
    var TargetGroupInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TargetGroupInfoFilterSensitiveLog = TargetGroupInfoFilterSensitiveLog;
    var TrafficRouteFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TrafficRouteFilterSensitiveLog = TrafficRouteFilterSensitiveLog;
    var TargetGroupPairInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TargetGroupPairInfoFilterSensitiveLog = TargetGroupPairInfoFilterSensitiveLog;
    var LoadBalancerInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.LoadBalancerInfoFilterSensitiveLog = LoadBalancerInfoFilterSensitiveLog;
    var TagFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TagFilterFilterSensitiveLog = TagFilterFilterSensitiveLog;
    var OnPremisesTagSetFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.OnPremisesTagSetFilterSensitiveLog = OnPremisesTagSetFilterSensitiveLog;
    var TriggerConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TriggerConfigFilterSensitiveLog = TriggerConfigFilterSensitiveLog;
    var DeploymentGroupInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeploymentGroupInfoFilterSensitiveLog = DeploymentGroupInfoFilterSensitiveLog;
    var BatchGetDeploymentGroupsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BatchGetDeploymentGroupsOutputFilterSensitiveLog = BatchGetDeploymentGroupsOutputFilterSensitiveLog;
    var BatchGetDeploymentInstancesInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BatchGetDeploymentInstancesInputFilterSensitiveLog = BatchGetDeploymentInstancesInputFilterSensitiveLog;
    var DiagnosticsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DiagnosticsFilterSensitiveLog = DiagnosticsFilterSensitiveLog;
    var LifecycleEventFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.LifecycleEventFilterSensitiveLog = LifecycleEventFilterSensitiveLog;
    var InstanceSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.InstanceSummaryFilterSensitiveLog = InstanceSummaryFilterSensitiveLog;
    var BatchGetDeploymentInstancesOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BatchGetDeploymentInstancesOutputFilterSensitiveLog = BatchGetDeploymentInstancesOutputFilterSensitiveLog;
    var BatchGetDeploymentsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BatchGetDeploymentsInputFilterSensitiveLog = BatchGetDeploymentsInputFilterSensitiveLog;
    var DeploymentOverviewFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeploymentOverviewFilterSensitiveLog = DeploymentOverviewFilterSensitiveLog;
    var ErrorInformationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ErrorInformationFilterSensitiveLog = ErrorInformationFilterSensitiveLog;
    var RelatedDeploymentsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RelatedDeploymentsFilterSensitiveLog = RelatedDeploymentsFilterSensitiveLog;
    var RollbackInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RollbackInfoFilterSensitiveLog = RollbackInfoFilterSensitiveLog;
    var TargetInstancesFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TargetInstancesFilterSensitiveLog = TargetInstancesFilterSensitiveLog;
    var DeploymentInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeploymentInfoFilterSensitiveLog = DeploymentInfoFilterSensitiveLog;
    var BatchGetDeploymentsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BatchGetDeploymentsOutputFilterSensitiveLog = BatchGetDeploymentsOutputFilterSensitiveLog;
    var BatchGetDeploymentTargetsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BatchGetDeploymentTargetsInputFilterSensitiveLog = BatchGetDeploymentTargetsInputFilterSensitiveLog;
    var CloudFormationTargetFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CloudFormationTargetFilterSensitiveLog = CloudFormationTargetFilterSensitiveLog;
    var ECSTaskSetFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ECSTaskSetFilterSensitiveLog = ECSTaskSetFilterSensitiveLog;
    var ECSTargetFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ECSTargetFilterSensitiveLog = ECSTargetFilterSensitiveLog;
    var InstanceTargetFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.InstanceTargetFilterSensitiveLog = InstanceTargetFilterSensitiveLog;
    var LambdaFunctionInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.LambdaFunctionInfoFilterSensitiveLog = LambdaFunctionInfoFilterSensitiveLog;
    var LambdaTargetFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.LambdaTargetFilterSensitiveLog = LambdaTargetFilterSensitiveLog;
    var DeploymentTargetFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeploymentTargetFilterSensitiveLog = DeploymentTargetFilterSensitiveLog;
    var BatchGetDeploymentTargetsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BatchGetDeploymentTargetsOutputFilterSensitiveLog = BatchGetDeploymentTargetsOutputFilterSensitiveLog;
    var BatchGetOnPremisesInstancesInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BatchGetOnPremisesInstancesInputFilterSensitiveLog = BatchGetOnPremisesInstancesInputFilterSensitiveLog;
    var InstanceInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.InstanceInfoFilterSensitiveLog = InstanceInfoFilterSensitiveLog;
    var BatchGetOnPremisesInstancesOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BatchGetOnPremisesInstancesOutputFilterSensitiveLog = BatchGetOnPremisesInstancesOutputFilterSensitiveLog;
    var ContinueDeploymentInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ContinueDeploymentInputFilterSensitiveLog = ContinueDeploymentInputFilterSensitiveLog;
    var CreateApplicationInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateApplicationInputFilterSensitiveLog = CreateApplicationInputFilterSensitiveLog;
    var CreateApplicationOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateApplicationOutputFilterSensitiveLog = CreateApplicationOutputFilterSensitiveLog;
    var CreateDeploymentInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateDeploymentInputFilterSensitiveLog = CreateDeploymentInputFilterSensitiveLog;
    var CreateDeploymentOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateDeploymentOutputFilterSensitiveLog = CreateDeploymentOutputFilterSensitiveLog;
    var MinimumHealthyHostsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.MinimumHealthyHostsFilterSensitiveLog = MinimumHealthyHostsFilterSensitiveLog;
    var TimeBasedCanaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TimeBasedCanaryFilterSensitiveLog = TimeBasedCanaryFilterSensitiveLog;
    var TimeBasedLinearFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TimeBasedLinearFilterSensitiveLog = TimeBasedLinearFilterSensitiveLog;
    var TrafficRoutingConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TrafficRoutingConfigFilterSensitiveLog = TrafficRoutingConfigFilterSensitiveLog;
    var CreateDeploymentConfigInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateDeploymentConfigInputFilterSensitiveLog = CreateDeploymentConfigInputFilterSensitiveLog;
    var CreateDeploymentConfigOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateDeploymentConfigOutputFilterSensitiveLog = CreateDeploymentConfigOutputFilterSensitiveLog;
    var CreateDeploymentGroupInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateDeploymentGroupInputFilterSensitiveLog = CreateDeploymentGroupInputFilterSensitiveLog;
    var CreateDeploymentGroupOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateDeploymentGroupOutputFilterSensitiveLog = CreateDeploymentGroupOutputFilterSensitiveLog;
    var DeleteApplicationInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteApplicationInputFilterSensitiveLog = DeleteApplicationInputFilterSensitiveLog;
    var DeleteDeploymentConfigInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteDeploymentConfigInputFilterSensitiveLog = DeleteDeploymentConfigInputFilterSensitiveLog;
    var DeleteDeploymentGroupInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteDeploymentGroupInputFilterSensitiveLog = DeleteDeploymentGroupInputFilterSensitiveLog;
    var DeleteDeploymentGroupOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteDeploymentGroupOutputFilterSensitiveLog = DeleteDeploymentGroupOutputFilterSensitiveLog;
    var DeleteGitHubAccountTokenInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteGitHubAccountTokenInputFilterSensitiveLog = DeleteGitHubAccountTokenInputFilterSensitiveLog;
    var DeleteGitHubAccountTokenOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteGitHubAccountTokenOutputFilterSensitiveLog = DeleteGitHubAccountTokenOutputFilterSensitiveLog;
    var DeleteResourcesByExternalIdInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteResourcesByExternalIdInputFilterSensitiveLog = DeleteResourcesByExternalIdInputFilterSensitiveLog;
    var DeleteResourcesByExternalIdOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteResourcesByExternalIdOutputFilterSensitiveLog = DeleteResourcesByExternalIdOutputFilterSensitiveLog;
    var DeregisterOnPremisesInstanceInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeregisterOnPremisesInstanceInputFilterSensitiveLog = DeregisterOnPremisesInstanceInputFilterSensitiveLog;
    var GetApplicationInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetApplicationInputFilterSensitiveLog = GetApplicationInputFilterSensitiveLog;
    var GetApplicationOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetApplicationOutputFilterSensitiveLog = GetApplicationOutputFilterSensitiveLog;
    var GetApplicationRevisionInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetApplicationRevisionInputFilterSensitiveLog = GetApplicationRevisionInputFilterSensitiveLog;
    var GetApplicationRevisionOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetApplicationRevisionOutputFilterSensitiveLog = GetApplicationRevisionOutputFilterSensitiveLog;
    var GetDeploymentInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetDeploymentInputFilterSensitiveLog = GetDeploymentInputFilterSensitiveLog;
    var GetDeploymentOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetDeploymentOutputFilterSensitiveLog = GetDeploymentOutputFilterSensitiveLog;
    var GetDeploymentConfigInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetDeploymentConfigInputFilterSensitiveLog = GetDeploymentConfigInputFilterSensitiveLog;
    var DeploymentConfigInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeploymentConfigInfoFilterSensitiveLog = DeploymentConfigInfoFilterSensitiveLog;
    var GetDeploymentConfigOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetDeploymentConfigOutputFilterSensitiveLog = GetDeploymentConfigOutputFilterSensitiveLog;
    var GetDeploymentGroupInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetDeploymentGroupInputFilterSensitiveLog = GetDeploymentGroupInputFilterSensitiveLog;
    var GetDeploymentGroupOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetDeploymentGroupOutputFilterSensitiveLog = GetDeploymentGroupOutputFilterSensitiveLog;
    var GetDeploymentInstanceInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetDeploymentInstanceInputFilterSensitiveLog = GetDeploymentInstanceInputFilterSensitiveLog;
    var GetDeploymentInstanceOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetDeploymentInstanceOutputFilterSensitiveLog = GetDeploymentInstanceOutputFilterSensitiveLog;
    var GetDeploymentTargetInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetDeploymentTargetInputFilterSensitiveLog = GetDeploymentTargetInputFilterSensitiveLog;
    var GetDeploymentTargetOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetDeploymentTargetOutputFilterSensitiveLog = GetDeploymentTargetOutputFilterSensitiveLog;
    var GetOnPremisesInstanceInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetOnPremisesInstanceInputFilterSensitiveLog = GetOnPremisesInstanceInputFilterSensitiveLog;
    var GetOnPremisesInstanceOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetOnPremisesInstanceOutputFilterSensitiveLog = GetOnPremisesInstanceOutputFilterSensitiveLog;
    var ListApplicationRevisionsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListApplicationRevisionsInputFilterSensitiveLog = ListApplicationRevisionsInputFilterSensitiveLog;
    var ListApplicationRevisionsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListApplicationRevisionsOutputFilterSensitiveLog = ListApplicationRevisionsOutputFilterSensitiveLog;
    var ListApplicationsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListApplicationsInputFilterSensitiveLog = ListApplicationsInputFilterSensitiveLog;
    var ListApplicationsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListApplicationsOutputFilterSensitiveLog = ListApplicationsOutputFilterSensitiveLog;
    var ListDeploymentConfigsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListDeploymentConfigsInputFilterSensitiveLog = ListDeploymentConfigsInputFilterSensitiveLog;
    var ListDeploymentConfigsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListDeploymentConfigsOutputFilterSensitiveLog = ListDeploymentConfigsOutputFilterSensitiveLog;
    var ListDeploymentGroupsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListDeploymentGroupsInputFilterSensitiveLog = ListDeploymentGroupsInputFilterSensitiveLog;
    var ListDeploymentGroupsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListDeploymentGroupsOutputFilterSensitiveLog = ListDeploymentGroupsOutputFilterSensitiveLog;
    var ListDeploymentInstancesInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListDeploymentInstancesInputFilterSensitiveLog = ListDeploymentInstancesInputFilterSensitiveLog;
    var ListDeploymentInstancesOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListDeploymentInstancesOutputFilterSensitiveLog = ListDeploymentInstancesOutputFilterSensitiveLog;
    var TimeRangeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TimeRangeFilterSensitiveLog = TimeRangeFilterSensitiveLog;
    var ListDeploymentsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListDeploymentsInputFilterSensitiveLog = ListDeploymentsInputFilterSensitiveLog;
    var ListDeploymentsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListDeploymentsOutputFilterSensitiveLog = ListDeploymentsOutputFilterSensitiveLog;
    var ListDeploymentTargetsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListDeploymentTargetsInputFilterSensitiveLog = ListDeploymentTargetsInputFilterSensitiveLog;
    var ListDeploymentTargetsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListDeploymentTargetsOutputFilterSensitiveLog = ListDeploymentTargetsOutputFilterSensitiveLog;
    var ListGitHubAccountTokenNamesInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListGitHubAccountTokenNamesInputFilterSensitiveLog = ListGitHubAccountTokenNamesInputFilterSensitiveLog;
    var ListGitHubAccountTokenNamesOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListGitHubAccountTokenNamesOutputFilterSensitiveLog = ListGitHubAccountTokenNamesOutputFilterSensitiveLog;
    var ListOnPremisesInstancesInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListOnPremisesInstancesInputFilterSensitiveLog = ListOnPremisesInstancesInputFilterSensitiveLog;
    var ListOnPremisesInstancesOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListOnPremisesInstancesOutputFilterSensitiveLog = ListOnPremisesInstancesOutputFilterSensitiveLog;
    var ListTagsForResourceInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListTagsForResourceInputFilterSensitiveLog = ListTagsForResourceInputFilterSensitiveLog;
    var ListTagsForResourceOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListTagsForResourceOutputFilterSensitiveLog = ListTagsForResourceOutputFilterSensitiveLog;
    var PutLifecycleEventHookExecutionStatusInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutLifecycleEventHookExecutionStatusInputFilterSensitiveLog = PutLifecycleEventHookExecutionStatusInputFilterSensitiveLog;
    var PutLifecycleEventHookExecutionStatusOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutLifecycleEventHookExecutionStatusOutputFilterSensitiveLog = PutLifecycleEventHookExecutionStatusOutputFilterSensitiveLog;
    var RegisterApplicationRevisionInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RegisterApplicationRevisionInputFilterSensitiveLog = RegisterApplicationRevisionInputFilterSensitiveLog;
    var RegisterOnPremisesInstanceInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RegisterOnPremisesInstanceInputFilterSensitiveLog = RegisterOnPremisesInstanceInputFilterSensitiveLog;
    var RemoveTagsFromOnPremisesInstancesInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RemoveTagsFromOnPremisesInstancesInputFilterSensitiveLog = RemoveTagsFromOnPremisesInstancesInputFilterSensitiveLog;
    var SkipWaitTimeForInstanceTerminationInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.SkipWaitTimeForInstanceTerminationInputFilterSensitiveLog = SkipWaitTimeForInstanceTerminationInputFilterSensitiveLog;
    var StopDeploymentInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.StopDeploymentInputFilterSensitiveLog = StopDeploymentInputFilterSensitiveLog;
    var StopDeploymentOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.StopDeploymentOutputFilterSensitiveLog = StopDeploymentOutputFilterSensitiveLog;
    var TagResourceInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TagResourceInputFilterSensitiveLog = TagResourceInputFilterSensitiveLog;
    var TagResourceOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TagResourceOutputFilterSensitiveLog = TagResourceOutputFilterSensitiveLog;
    var UntagResourceInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UntagResourceInputFilterSensitiveLog = UntagResourceInputFilterSensitiveLog;
    var UntagResourceOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UntagResourceOutputFilterSensitiveLog = UntagResourceOutputFilterSensitiveLog;
    var UpdateApplicationInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateApplicationInputFilterSensitiveLog = UpdateApplicationInputFilterSensitiveLog;
    var UpdateDeploymentGroupInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateDeploymentGroupInputFilterSensitiveLog = UpdateDeploymentGroupInputFilterSensitiveLog;
    var UpdateDeploymentGroupOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateDeploymentGroupOutputFilterSensitiveLog = UpdateDeploymentGroupOutputFilterSensitiveLog;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/protocols/Aws_json1_1.js
var require_Aws_json1_1 = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/protocols/Aws_json1_1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deserializeAws_json1_1BatchGetApplicationsCommand = exports2.deserializeAws_json1_1BatchGetApplicationRevisionsCommand = exports2.deserializeAws_json1_1AddTagsToOnPremisesInstancesCommand = exports2.serializeAws_json1_1UpdateDeploymentGroupCommand = exports2.serializeAws_json1_1UpdateApplicationCommand = exports2.serializeAws_json1_1UntagResourceCommand = exports2.serializeAws_json1_1TagResourceCommand = exports2.serializeAws_json1_1StopDeploymentCommand = exports2.serializeAws_json1_1SkipWaitTimeForInstanceTerminationCommand = exports2.serializeAws_json1_1RemoveTagsFromOnPremisesInstancesCommand = exports2.serializeAws_json1_1RegisterOnPremisesInstanceCommand = exports2.serializeAws_json1_1RegisterApplicationRevisionCommand = exports2.serializeAws_json1_1PutLifecycleEventHookExecutionStatusCommand = exports2.serializeAws_json1_1ListTagsForResourceCommand = exports2.serializeAws_json1_1ListOnPremisesInstancesCommand = exports2.serializeAws_json1_1ListGitHubAccountTokenNamesCommand = exports2.serializeAws_json1_1ListDeploymentTargetsCommand = exports2.serializeAws_json1_1ListDeploymentsCommand = exports2.serializeAws_json1_1ListDeploymentInstancesCommand = exports2.serializeAws_json1_1ListDeploymentGroupsCommand = exports2.serializeAws_json1_1ListDeploymentConfigsCommand = exports2.serializeAws_json1_1ListApplicationsCommand = exports2.serializeAws_json1_1ListApplicationRevisionsCommand = exports2.serializeAws_json1_1GetOnPremisesInstanceCommand = exports2.serializeAws_json1_1GetDeploymentTargetCommand = exports2.serializeAws_json1_1GetDeploymentInstanceCommand = exports2.serializeAws_json1_1GetDeploymentGroupCommand = exports2.serializeAws_json1_1GetDeploymentConfigCommand = exports2.serializeAws_json1_1GetDeploymentCommand = exports2.serializeAws_json1_1GetApplicationRevisionCommand = exports2.serializeAws_json1_1GetApplicationCommand = exports2.serializeAws_json1_1DeregisterOnPremisesInstanceCommand = exports2.serializeAws_json1_1DeleteResourcesByExternalIdCommand = exports2.serializeAws_json1_1DeleteGitHubAccountTokenCommand = exports2.serializeAws_json1_1DeleteDeploymentGroupCommand = exports2.serializeAws_json1_1DeleteDeploymentConfigCommand = exports2.serializeAws_json1_1DeleteApplicationCommand = exports2.serializeAws_json1_1CreateDeploymentGroupCommand = exports2.serializeAws_json1_1CreateDeploymentConfigCommand = exports2.serializeAws_json1_1CreateDeploymentCommand = exports2.serializeAws_json1_1CreateApplicationCommand = exports2.serializeAws_json1_1ContinueDeploymentCommand = exports2.serializeAws_json1_1BatchGetOnPremisesInstancesCommand = exports2.serializeAws_json1_1BatchGetDeploymentTargetsCommand = exports2.serializeAws_json1_1BatchGetDeploymentsCommand = exports2.serializeAws_json1_1BatchGetDeploymentInstancesCommand = exports2.serializeAws_json1_1BatchGetDeploymentGroupsCommand = exports2.serializeAws_json1_1BatchGetApplicationsCommand = exports2.serializeAws_json1_1BatchGetApplicationRevisionsCommand = exports2.serializeAws_json1_1AddTagsToOnPremisesInstancesCommand = void 0;
    exports2.deserializeAws_json1_1UpdateDeploymentGroupCommand = exports2.deserializeAws_json1_1UpdateApplicationCommand = exports2.deserializeAws_json1_1UntagResourceCommand = exports2.deserializeAws_json1_1TagResourceCommand = exports2.deserializeAws_json1_1StopDeploymentCommand = exports2.deserializeAws_json1_1SkipWaitTimeForInstanceTerminationCommand = exports2.deserializeAws_json1_1RemoveTagsFromOnPremisesInstancesCommand = exports2.deserializeAws_json1_1RegisterOnPremisesInstanceCommand = exports2.deserializeAws_json1_1RegisterApplicationRevisionCommand = exports2.deserializeAws_json1_1PutLifecycleEventHookExecutionStatusCommand = exports2.deserializeAws_json1_1ListTagsForResourceCommand = exports2.deserializeAws_json1_1ListOnPremisesInstancesCommand = exports2.deserializeAws_json1_1ListGitHubAccountTokenNamesCommand = exports2.deserializeAws_json1_1ListDeploymentTargetsCommand = exports2.deserializeAws_json1_1ListDeploymentsCommand = exports2.deserializeAws_json1_1ListDeploymentInstancesCommand = exports2.deserializeAws_json1_1ListDeploymentGroupsCommand = exports2.deserializeAws_json1_1ListDeploymentConfigsCommand = exports2.deserializeAws_json1_1ListApplicationsCommand = exports2.deserializeAws_json1_1ListApplicationRevisionsCommand = exports2.deserializeAws_json1_1GetOnPremisesInstanceCommand = exports2.deserializeAws_json1_1GetDeploymentTargetCommand = exports2.deserializeAws_json1_1GetDeploymentInstanceCommand = exports2.deserializeAws_json1_1GetDeploymentGroupCommand = exports2.deserializeAws_json1_1GetDeploymentConfigCommand = exports2.deserializeAws_json1_1GetDeploymentCommand = exports2.deserializeAws_json1_1GetApplicationRevisionCommand = exports2.deserializeAws_json1_1GetApplicationCommand = exports2.deserializeAws_json1_1DeregisterOnPremisesInstanceCommand = exports2.deserializeAws_json1_1DeleteResourcesByExternalIdCommand = exports2.deserializeAws_json1_1DeleteGitHubAccountTokenCommand = exports2.deserializeAws_json1_1DeleteDeploymentGroupCommand = exports2.deserializeAws_json1_1DeleteDeploymentConfigCommand = exports2.deserializeAws_json1_1DeleteApplicationCommand = exports2.deserializeAws_json1_1CreateDeploymentGroupCommand = exports2.deserializeAws_json1_1CreateDeploymentConfigCommand = exports2.deserializeAws_json1_1CreateDeploymentCommand = exports2.deserializeAws_json1_1CreateApplicationCommand = exports2.deserializeAws_json1_1ContinueDeploymentCommand = exports2.deserializeAws_json1_1BatchGetOnPremisesInstancesCommand = exports2.deserializeAws_json1_1BatchGetDeploymentTargetsCommand = exports2.deserializeAws_json1_1BatchGetDeploymentsCommand = exports2.deserializeAws_json1_1BatchGetDeploymentInstancesCommand = exports2.deserializeAws_json1_1BatchGetDeploymentGroupsCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs26();
    var CodeDeployServiceException_1 = require_CodeDeployServiceException();
    var models_0_1 = require_models_04();
    var serializeAws_json1_1AddTagsToOnPremisesInstancesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.AddTagsToOnPremisesInstances"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1AddTagsToOnPremisesInstancesInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1AddTagsToOnPremisesInstancesCommand = serializeAws_json1_1AddTagsToOnPremisesInstancesCommand;
    var serializeAws_json1_1BatchGetApplicationRevisionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.BatchGetApplicationRevisions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1BatchGetApplicationRevisionsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1BatchGetApplicationRevisionsCommand = serializeAws_json1_1BatchGetApplicationRevisionsCommand;
    var serializeAws_json1_1BatchGetApplicationsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.BatchGetApplications"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1BatchGetApplicationsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1BatchGetApplicationsCommand = serializeAws_json1_1BatchGetApplicationsCommand;
    var serializeAws_json1_1BatchGetDeploymentGroupsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.BatchGetDeploymentGroups"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1BatchGetDeploymentGroupsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1BatchGetDeploymentGroupsCommand = serializeAws_json1_1BatchGetDeploymentGroupsCommand;
    var serializeAws_json1_1BatchGetDeploymentInstancesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.BatchGetDeploymentInstances"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1BatchGetDeploymentInstancesInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1BatchGetDeploymentInstancesCommand = serializeAws_json1_1BatchGetDeploymentInstancesCommand;
    var serializeAws_json1_1BatchGetDeploymentsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.BatchGetDeployments"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1BatchGetDeploymentsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1BatchGetDeploymentsCommand = serializeAws_json1_1BatchGetDeploymentsCommand;
    var serializeAws_json1_1BatchGetDeploymentTargetsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.BatchGetDeploymentTargets"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1BatchGetDeploymentTargetsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1BatchGetDeploymentTargetsCommand = serializeAws_json1_1BatchGetDeploymentTargetsCommand;
    var serializeAws_json1_1BatchGetOnPremisesInstancesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.BatchGetOnPremisesInstances"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1BatchGetOnPremisesInstancesInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1BatchGetOnPremisesInstancesCommand = serializeAws_json1_1BatchGetOnPremisesInstancesCommand;
    var serializeAws_json1_1ContinueDeploymentCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.ContinueDeployment"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ContinueDeploymentInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1ContinueDeploymentCommand = serializeAws_json1_1ContinueDeploymentCommand;
    var serializeAws_json1_1CreateApplicationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.CreateApplication"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateApplicationInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1CreateApplicationCommand = serializeAws_json1_1CreateApplicationCommand;
    var serializeAws_json1_1CreateDeploymentCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.CreateDeployment"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateDeploymentInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1CreateDeploymentCommand = serializeAws_json1_1CreateDeploymentCommand;
    var serializeAws_json1_1CreateDeploymentConfigCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.CreateDeploymentConfig"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateDeploymentConfigInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1CreateDeploymentConfigCommand = serializeAws_json1_1CreateDeploymentConfigCommand;
    var serializeAws_json1_1CreateDeploymentGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.CreateDeploymentGroup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateDeploymentGroupInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1CreateDeploymentGroupCommand = serializeAws_json1_1CreateDeploymentGroupCommand;
    var serializeAws_json1_1DeleteApplicationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.DeleteApplication"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteApplicationInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1DeleteApplicationCommand = serializeAws_json1_1DeleteApplicationCommand;
    var serializeAws_json1_1DeleteDeploymentConfigCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.DeleteDeploymentConfig"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteDeploymentConfigInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1DeleteDeploymentConfigCommand = serializeAws_json1_1DeleteDeploymentConfigCommand;
    var serializeAws_json1_1DeleteDeploymentGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.DeleteDeploymentGroup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteDeploymentGroupInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1DeleteDeploymentGroupCommand = serializeAws_json1_1DeleteDeploymentGroupCommand;
    var serializeAws_json1_1DeleteGitHubAccountTokenCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.DeleteGitHubAccountToken"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteGitHubAccountTokenInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1DeleteGitHubAccountTokenCommand = serializeAws_json1_1DeleteGitHubAccountTokenCommand;
    var serializeAws_json1_1DeleteResourcesByExternalIdCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.DeleteResourcesByExternalId"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteResourcesByExternalIdInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1DeleteResourcesByExternalIdCommand = serializeAws_json1_1DeleteResourcesByExternalIdCommand;
    var serializeAws_json1_1DeregisterOnPremisesInstanceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.DeregisterOnPremisesInstance"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeregisterOnPremisesInstanceInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1DeregisterOnPremisesInstanceCommand = serializeAws_json1_1DeregisterOnPremisesInstanceCommand;
    var serializeAws_json1_1GetApplicationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.GetApplication"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetApplicationInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1GetApplicationCommand = serializeAws_json1_1GetApplicationCommand;
    var serializeAws_json1_1GetApplicationRevisionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.GetApplicationRevision"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetApplicationRevisionInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1GetApplicationRevisionCommand = serializeAws_json1_1GetApplicationRevisionCommand;
    var serializeAws_json1_1GetDeploymentCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.GetDeployment"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetDeploymentInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1GetDeploymentCommand = serializeAws_json1_1GetDeploymentCommand;
    var serializeAws_json1_1GetDeploymentConfigCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.GetDeploymentConfig"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetDeploymentConfigInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1GetDeploymentConfigCommand = serializeAws_json1_1GetDeploymentConfigCommand;
    var serializeAws_json1_1GetDeploymentGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.GetDeploymentGroup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetDeploymentGroupInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1GetDeploymentGroupCommand = serializeAws_json1_1GetDeploymentGroupCommand;
    var serializeAws_json1_1GetDeploymentInstanceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.GetDeploymentInstance"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetDeploymentInstanceInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1GetDeploymentInstanceCommand = serializeAws_json1_1GetDeploymentInstanceCommand;
    var serializeAws_json1_1GetDeploymentTargetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.GetDeploymentTarget"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetDeploymentTargetInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1GetDeploymentTargetCommand = serializeAws_json1_1GetDeploymentTargetCommand;
    var serializeAws_json1_1GetOnPremisesInstanceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.GetOnPremisesInstance"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetOnPremisesInstanceInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1GetOnPremisesInstanceCommand = serializeAws_json1_1GetOnPremisesInstanceCommand;
    var serializeAws_json1_1ListApplicationRevisionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.ListApplicationRevisions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListApplicationRevisionsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1ListApplicationRevisionsCommand = serializeAws_json1_1ListApplicationRevisionsCommand;
    var serializeAws_json1_1ListApplicationsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.ListApplications"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListApplicationsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1ListApplicationsCommand = serializeAws_json1_1ListApplicationsCommand;
    var serializeAws_json1_1ListDeploymentConfigsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.ListDeploymentConfigs"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListDeploymentConfigsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1ListDeploymentConfigsCommand = serializeAws_json1_1ListDeploymentConfigsCommand;
    var serializeAws_json1_1ListDeploymentGroupsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.ListDeploymentGroups"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListDeploymentGroupsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1ListDeploymentGroupsCommand = serializeAws_json1_1ListDeploymentGroupsCommand;
    var serializeAws_json1_1ListDeploymentInstancesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.ListDeploymentInstances"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListDeploymentInstancesInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1ListDeploymentInstancesCommand = serializeAws_json1_1ListDeploymentInstancesCommand;
    var serializeAws_json1_1ListDeploymentsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.ListDeployments"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListDeploymentsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1ListDeploymentsCommand = serializeAws_json1_1ListDeploymentsCommand;
    var serializeAws_json1_1ListDeploymentTargetsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.ListDeploymentTargets"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListDeploymentTargetsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1ListDeploymentTargetsCommand = serializeAws_json1_1ListDeploymentTargetsCommand;
    var serializeAws_json1_1ListGitHubAccountTokenNamesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.ListGitHubAccountTokenNames"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListGitHubAccountTokenNamesInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1ListGitHubAccountTokenNamesCommand = serializeAws_json1_1ListGitHubAccountTokenNamesCommand;
    var serializeAws_json1_1ListOnPremisesInstancesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.ListOnPremisesInstances"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListOnPremisesInstancesInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1ListOnPremisesInstancesCommand = serializeAws_json1_1ListOnPremisesInstancesCommand;
    var serializeAws_json1_1ListTagsForResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.ListTagsForResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListTagsForResourceInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1ListTagsForResourceCommand = serializeAws_json1_1ListTagsForResourceCommand;
    var serializeAws_json1_1PutLifecycleEventHookExecutionStatusCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.PutLifecycleEventHookExecutionStatus"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1PutLifecycleEventHookExecutionStatusInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1PutLifecycleEventHookExecutionStatusCommand = serializeAws_json1_1PutLifecycleEventHookExecutionStatusCommand;
    var serializeAws_json1_1RegisterApplicationRevisionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.RegisterApplicationRevision"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RegisterApplicationRevisionInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1RegisterApplicationRevisionCommand = serializeAws_json1_1RegisterApplicationRevisionCommand;
    var serializeAws_json1_1RegisterOnPremisesInstanceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.RegisterOnPremisesInstance"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RegisterOnPremisesInstanceInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1RegisterOnPremisesInstanceCommand = serializeAws_json1_1RegisterOnPremisesInstanceCommand;
    var serializeAws_json1_1RemoveTagsFromOnPremisesInstancesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.RemoveTagsFromOnPremisesInstances"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RemoveTagsFromOnPremisesInstancesInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1RemoveTagsFromOnPremisesInstancesCommand = serializeAws_json1_1RemoveTagsFromOnPremisesInstancesCommand;
    var serializeAws_json1_1SkipWaitTimeForInstanceTerminationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.SkipWaitTimeForInstanceTermination"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1SkipWaitTimeForInstanceTerminationInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1SkipWaitTimeForInstanceTerminationCommand = serializeAws_json1_1SkipWaitTimeForInstanceTerminationCommand;
    var serializeAws_json1_1StopDeploymentCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.StopDeployment"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1StopDeploymentInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1StopDeploymentCommand = serializeAws_json1_1StopDeploymentCommand;
    var serializeAws_json1_1TagResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.TagResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1TagResourceInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1TagResourceCommand = serializeAws_json1_1TagResourceCommand;
    var serializeAws_json1_1UntagResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.UntagResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UntagResourceInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1UntagResourceCommand = serializeAws_json1_1UntagResourceCommand;
    var serializeAws_json1_1UpdateApplicationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.UpdateApplication"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateApplicationInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1UpdateApplicationCommand = serializeAws_json1_1UpdateApplicationCommand;
    var serializeAws_json1_1UpdateDeploymentGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeDeploy_20141006.UpdateDeploymentGroup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateDeploymentGroupInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_json1_1UpdateDeploymentGroupCommand = serializeAws_json1_1UpdateDeploymentGroupCommand;
    var deserializeAws_json1_1AddTagsToOnPremisesInstancesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1AddTagsToOnPremisesInstancesCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1AddTagsToOnPremisesInstancesCommand = deserializeAws_json1_1AddTagsToOnPremisesInstancesCommand;
    var deserializeAws_json1_1AddTagsToOnPremisesInstancesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InstanceLimitExceededException":
        case "com.amazonaws.codedeploy#InstanceLimitExceededException":
          throw await deserializeAws_json1_1InstanceLimitExceededExceptionResponse(parsedOutput, context);
        case "InstanceNameRequiredException":
        case "com.amazonaws.codedeploy#InstanceNameRequiredException":
          throw await deserializeAws_json1_1InstanceNameRequiredExceptionResponse(parsedOutput, context);
        case "InstanceNotRegisteredException":
        case "com.amazonaws.codedeploy#InstanceNotRegisteredException":
          throw await deserializeAws_json1_1InstanceNotRegisteredExceptionResponse(parsedOutput, context);
        case "InvalidInstanceNameException":
        case "com.amazonaws.codedeploy#InvalidInstanceNameException":
          throw await deserializeAws_json1_1InvalidInstanceNameExceptionResponse(parsedOutput, context);
        case "InvalidTagException":
        case "com.amazonaws.codedeploy#InvalidTagException":
          throw await deserializeAws_json1_1InvalidTagExceptionResponse(parsedOutput, context);
        case "TagLimitExceededException":
        case "com.amazonaws.codedeploy#TagLimitExceededException":
          throw await deserializeAws_json1_1TagLimitExceededExceptionResponse(parsedOutput, context);
        case "TagRequiredException":
        case "com.amazonaws.codedeploy#TagRequiredException":
          throw await deserializeAws_json1_1TagRequiredExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1BatchGetApplicationRevisionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetApplicationRevisionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1BatchGetApplicationRevisionsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1BatchGetApplicationRevisionsCommand = deserializeAws_json1_1BatchGetApplicationRevisionsCommand;
    var deserializeAws_json1_1BatchGetApplicationRevisionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ApplicationDoesNotExistException":
        case "com.amazonaws.codedeploy#ApplicationDoesNotExistException":
          throw await deserializeAws_json1_1ApplicationDoesNotExistExceptionResponse(parsedOutput, context);
        case "ApplicationNameRequiredException":
        case "com.amazonaws.codedeploy#ApplicationNameRequiredException":
          throw await deserializeAws_json1_1ApplicationNameRequiredExceptionResponse(parsedOutput, context);
        case "BatchLimitExceededException":
        case "com.amazonaws.codedeploy#BatchLimitExceededException":
          throw await deserializeAws_json1_1BatchLimitExceededExceptionResponse(parsedOutput, context);
        case "InvalidApplicationNameException":
        case "com.amazonaws.codedeploy#InvalidApplicationNameException":
          throw await deserializeAws_json1_1InvalidApplicationNameExceptionResponse(parsedOutput, context);
        case "InvalidRevisionException":
        case "com.amazonaws.codedeploy#InvalidRevisionException":
          throw await deserializeAws_json1_1InvalidRevisionExceptionResponse(parsedOutput, context);
        case "RevisionRequiredException":
        case "com.amazonaws.codedeploy#RevisionRequiredException":
          throw await deserializeAws_json1_1RevisionRequiredExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1BatchGetApplicationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetApplicationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1BatchGetApplicationsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1BatchGetApplicationsCommand = deserializeAws_json1_1BatchGetApplicationsCommand;
    var deserializeAws_json1_1BatchGetApplicationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ApplicationDoesNotExistException":
        case "com.amazonaws.codedeploy#ApplicationDoesNotExistException":
          throw await deserializeAws_json1_1ApplicationDoesNotExistExceptionResponse(parsedOutput, context);
        case "ApplicationNameRequiredException":
        case "com.amazonaws.codedeploy#ApplicationNameRequiredException":
          throw await deserializeAws_json1_1ApplicationNameRequiredExceptionResponse(parsedOutput, context);
        case "BatchLimitExceededException":
        case "com.amazonaws.codedeploy#BatchLimitExceededException":
          throw await deserializeAws_json1_1BatchLimitExceededExceptionResponse(parsedOutput, context);
        case "InvalidApplicationNameException":
        case "com.amazonaws.codedeploy#InvalidApplicationNameException":
          throw await deserializeAws_json1_1InvalidApplicationNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1BatchGetDeploymentGroupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetDeploymentGroupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1BatchGetDeploymentGroupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1BatchGetDeploymentGroupsCommand = deserializeAws_json1_1BatchGetDeploymentGroupsCommand;
    var deserializeAws_json1_1BatchGetDeploymentGroupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ApplicationDoesNotExistException":
        case "com.amazonaws.codedeploy#ApplicationDoesNotExistException":
          throw await deserializeAws_json1_1ApplicationDoesNotExistExceptionResponse(parsedOutput, context);
        case "ApplicationNameRequiredException":
        case "com.amazonaws.codedeploy#ApplicationNameRequiredException":
          throw await deserializeAws_json1_1ApplicationNameRequiredExceptionResponse(parsedOutput, context);
        case "BatchLimitExceededException":
        case "com.amazonaws.codedeploy#BatchLimitExceededException":
          throw await deserializeAws_json1_1BatchLimitExceededExceptionResponse(parsedOutput, context);
        case "DeploymentConfigDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentConfigDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentConfigDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentGroupNameRequiredException":
        case "com.amazonaws.codedeploy#DeploymentGroupNameRequiredException":
          throw await deserializeAws_json1_1DeploymentGroupNameRequiredExceptionResponse(parsedOutput, context);
        case "InvalidApplicationNameException":
        case "com.amazonaws.codedeploy#InvalidApplicationNameException":
          throw await deserializeAws_json1_1InvalidApplicationNameExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentGroupNameException":
        case "com.amazonaws.codedeploy#InvalidDeploymentGroupNameException":
          throw await deserializeAws_json1_1InvalidDeploymentGroupNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1BatchGetDeploymentInstancesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetDeploymentInstancesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1BatchGetDeploymentInstancesOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1BatchGetDeploymentInstancesCommand = deserializeAws_json1_1BatchGetDeploymentInstancesCommand;
    var deserializeAws_json1_1BatchGetDeploymentInstancesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BatchLimitExceededException":
        case "com.amazonaws.codedeploy#BatchLimitExceededException":
          throw await deserializeAws_json1_1BatchLimitExceededExceptionResponse(parsedOutput, context);
        case "DeploymentDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentIdRequiredException":
        case "com.amazonaws.codedeploy#DeploymentIdRequiredException":
          throw await deserializeAws_json1_1DeploymentIdRequiredExceptionResponse(parsedOutput, context);
        case "InstanceIdRequiredException":
        case "com.amazonaws.codedeploy#InstanceIdRequiredException":
          throw await deserializeAws_json1_1InstanceIdRequiredExceptionResponse(parsedOutput, context);
        case "InvalidComputePlatformException":
        case "com.amazonaws.codedeploy#InvalidComputePlatformException":
          throw await deserializeAws_json1_1InvalidComputePlatformExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentIdException":
        case "com.amazonaws.codedeploy#InvalidDeploymentIdException":
          throw await deserializeAws_json1_1InvalidDeploymentIdExceptionResponse(parsedOutput, context);
        case "InvalidInstanceNameException":
        case "com.amazonaws.codedeploy#InvalidInstanceNameException":
          throw await deserializeAws_json1_1InvalidInstanceNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1BatchGetDeploymentsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetDeploymentsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1BatchGetDeploymentsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1BatchGetDeploymentsCommand = deserializeAws_json1_1BatchGetDeploymentsCommand;
    var deserializeAws_json1_1BatchGetDeploymentsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BatchLimitExceededException":
        case "com.amazonaws.codedeploy#BatchLimitExceededException":
          throw await deserializeAws_json1_1BatchLimitExceededExceptionResponse(parsedOutput, context);
        case "DeploymentIdRequiredException":
        case "com.amazonaws.codedeploy#DeploymentIdRequiredException":
          throw await deserializeAws_json1_1DeploymentIdRequiredExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentIdException":
        case "com.amazonaws.codedeploy#InvalidDeploymentIdException":
          throw await deserializeAws_json1_1InvalidDeploymentIdExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1BatchGetDeploymentTargetsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetDeploymentTargetsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1BatchGetDeploymentTargetsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1BatchGetDeploymentTargetsCommand = deserializeAws_json1_1BatchGetDeploymentTargetsCommand;
    var deserializeAws_json1_1BatchGetDeploymentTargetsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeploymentDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentIdRequiredException":
        case "com.amazonaws.codedeploy#DeploymentIdRequiredException":
          throw await deserializeAws_json1_1DeploymentIdRequiredExceptionResponse(parsedOutput, context);
        case "DeploymentNotStartedException":
        case "com.amazonaws.codedeploy#DeploymentNotStartedException":
          throw await deserializeAws_json1_1DeploymentNotStartedExceptionResponse(parsedOutput, context);
        case "DeploymentTargetDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentTargetDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentTargetDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentTargetIdRequiredException":
        case "com.amazonaws.codedeploy#DeploymentTargetIdRequiredException":
          throw await deserializeAws_json1_1DeploymentTargetIdRequiredExceptionResponse(parsedOutput, context);
        case "DeploymentTargetListSizeExceededException":
        case "com.amazonaws.codedeploy#DeploymentTargetListSizeExceededException":
          throw await deserializeAws_json1_1DeploymentTargetListSizeExceededExceptionResponse(parsedOutput, context);
        case "InstanceDoesNotExistException":
        case "com.amazonaws.codedeploy#InstanceDoesNotExistException":
          throw await deserializeAws_json1_1InstanceDoesNotExistExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentIdException":
        case "com.amazonaws.codedeploy#InvalidDeploymentIdException":
          throw await deserializeAws_json1_1InvalidDeploymentIdExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentTargetIdException":
        case "com.amazonaws.codedeploy#InvalidDeploymentTargetIdException":
          throw await deserializeAws_json1_1InvalidDeploymentTargetIdExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1BatchGetOnPremisesInstancesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetOnPremisesInstancesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1BatchGetOnPremisesInstancesOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1BatchGetOnPremisesInstancesCommand = deserializeAws_json1_1BatchGetOnPremisesInstancesCommand;
    var deserializeAws_json1_1BatchGetOnPremisesInstancesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BatchLimitExceededException":
        case "com.amazonaws.codedeploy#BatchLimitExceededException":
          throw await deserializeAws_json1_1BatchLimitExceededExceptionResponse(parsedOutput, context);
        case "InstanceNameRequiredException":
        case "com.amazonaws.codedeploy#InstanceNameRequiredException":
          throw await deserializeAws_json1_1InstanceNameRequiredExceptionResponse(parsedOutput, context);
        case "InvalidInstanceNameException":
        case "com.amazonaws.codedeploy#InvalidInstanceNameException":
          throw await deserializeAws_json1_1InvalidInstanceNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ContinueDeploymentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ContinueDeploymentCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1ContinueDeploymentCommand = deserializeAws_json1_1ContinueDeploymentCommand;
    var deserializeAws_json1_1ContinueDeploymentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeploymentAlreadyCompletedException":
        case "com.amazonaws.codedeploy#DeploymentAlreadyCompletedException":
          throw await deserializeAws_json1_1DeploymentAlreadyCompletedExceptionResponse(parsedOutput, context);
        case "DeploymentDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentIdRequiredException":
        case "com.amazonaws.codedeploy#DeploymentIdRequiredException":
          throw await deserializeAws_json1_1DeploymentIdRequiredExceptionResponse(parsedOutput, context);
        case "DeploymentIsNotInReadyStateException":
        case "com.amazonaws.codedeploy#DeploymentIsNotInReadyStateException":
          throw await deserializeAws_json1_1DeploymentIsNotInReadyStateExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentIdException":
        case "com.amazonaws.codedeploy#InvalidDeploymentIdException":
          throw await deserializeAws_json1_1InvalidDeploymentIdExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentStatusException":
        case "com.amazonaws.codedeploy#InvalidDeploymentStatusException":
          throw await deserializeAws_json1_1InvalidDeploymentStatusExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentWaitTypeException":
        case "com.amazonaws.codedeploy#InvalidDeploymentWaitTypeException":
          throw await deserializeAws_json1_1InvalidDeploymentWaitTypeExceptionResponse(parsedOutput, context);
        case "UnsupportedActionForDeploymentTypeException":
        case "com.amazonaws.codedeploy#UnsupportedActionForDeploymentTypeException":
          throw await deserializeAws_json1_1UnsupportedActionForDeploymentTypeExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1CreateApplicationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateApplicationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateApplicationOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1CreateApplicationCommand = deserializeAws_json1_1CreateApplicationCommand;
    var deserializeAws_json1_1CreateApplicationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ApplicationAlreadyExistsException":
        case "com.amazonaws.codedeploy#ApplicationAlreadyExistsException":
          throw await deserializeAws_json1_1ApplicationAlreadyExistsExceptionResponse(parsedOutput, context);
        case "ApplicationLimitExceededException":
        case "com.amazonaws.codedeploy#ApplicationLimitExceededException":
          throw await deserializeAws_json1_1ApplicationLimitExceededExceptionResponse(parsedOutput, context);
        case "ApplicationNameRequiredException":
        case "com.amazonaws.codedeploy#ApplicationNameRequiredException":
          throw await deserializeAws_json1_1ApplicationNameRequiredExceptionResponse(parsedOutput, context);
        case "InvalidApplicationNameException":
        case "com.amazonaws.codedeploy#InvalidApplicationNameException":
          throw await deserializeAws_json1_1InvalidApplicationNameExceptionResponse(parsedOutput, context);
        case "InvalidComputePlatformException":
        case "com.amazonaws.codedeploy#InvalidComputePlatformException":
          throw await deserializeAws_json1_1InvalidComputePlatformExceptionResponse(parsedOutput, context);
        case "InvalidTagsToAddException":
        case "com.amazonaws.codedeploy#InvalidTagsToAddException":
          throw await deserializeAws_json1_1InvalidTagsToAddExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1CreateDeploymentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateDeploymentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateDeploymentOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1CreateDeploymentCommand = deserializeAws_json1_1CreateDeploymentCommand;
    var deserializeAws_json1_1CreateDeploymentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AlarmsLimitExceededException":
        case "com.amazonaws.codedeploy#AlarmsLimitExceededException":
          throw await deserializeAws_json1_1AlarmsLimitExceededExceptionResponse(parsedOutput, context);
        case "ApplicationDoesNotExistException":
        case "com.amazonaws.codedeploy#ApplicationDoesNotExistException":
          throw await deserializeAws_json1_1ApplicationDoesNotExistExceptionResponse(parsedOutput, context);
        case "ApplicationNameRequiredException":
        case "com.amazonaws.codedeploy#ApplicationNameRequiredException":
          throw await deserializeAws_json1_1ApplicationNameRequiredExceptionResponse(parsedOutput, context);
        case "DeploymentConfigDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentConfigDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentConfigDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentGroupDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentGroupDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentGroupDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentGroupNameRequiredException":
        case "com.amazonaws.codedeploy#DeploymentGroupNameRequiredException":
          throw await deserializeAws_json1_1DeploymentGroupNameRequiredExceptionResponse(parsedOutput, context);
        case "DeploymentLimitExceededException":
        case "com.amazonaws.codedeploy#DeploymentLimitExceededException":
          throw await deserializeAws_json1_1DeploymentLimitExceededExceptionResponse(parsedOutput, context);
        case "DescriptionTooLongException":
        case "com.amazonaws.codedeploy#DescriptionTooLongException":
          throw await deserializeAws_json1_1DescriptionTooLongExceptionResponse(parsedOutput, context);
        case "InvalidAlarmConfigException":
        case "com.amazonaws.codedeploy#InvalidAlarmConfigException":
          throw await deserializeAws_json1_1InvalidAlarmConfigExceptionResponse(parsedOutput, context);
        case "InvalidApplicationNameException":
        case "com.amazonaws.codedeploy#InvalidApplicationNameException":
          throw await deserializeAws_json1_1InvalidApplicationNameExceptionResponse(parsedOutput, context);
        case "InvalidAutoRollbackConfigException":
        case "com.amazonaws.codedeploy#InvalidAutoRollbackConfigException":
          throw await deserializeAws_json1_1InvalidAutoRollbackConfigExceptionResponse(parsedOutput, context);
        case "InvalidAutoScalingGroupException":
        case "com.amazonaws.codedeploy#InvalidAutoScalingGroupException":
          throw await deserializeAws_json1_1InvalidAutoScalingGroupExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentConfigNameException":
        case "com.amazonaws.codedeploy#InvalidDeploymentConfigNameException":
          throw await deserializeAws_json1_1InvalidDeploymentConfigNameExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentGroupNameException":
        case "com.amazonaws.codedeploy#InvalidDeploymentGroupNameException":
          throw await deserializeAws_json1_1InvalidDeploymentGroupNameExceptionResponse(parsedOutput, context);
        case "InvalidFileExistsBehaviorException":
        case "com.amazonaws.codedeploy#InvalidFileExistsBehaviorException":
          throw await deserializeAws_json1_1InvalidFileExistsBehaviorExceptionResponse(parsedOutput, context);
        case "InvalidGitHubAccountTokenException":
        case "com.amazonaws.codedeploy#InvalidGitHubAccountTokenException":
          throw await deserializeAws_json1_1InvalidGitHubAccountTokenExceptionResponse(parsedOutput, context);
        case "InvalidIgnoreApplicationStopFailuresValueException":
        case "com.amazonaws.codedeploy#InvalidIgnoreApplicationStopFailuresValueException":
          throw await deserializeAws_json1_1InvalidIgnoreApplicationStopFailuresValueExceptionResponse(parsedOutput, context);
        case "InvalidLoadBalancerInfoException":
        case "com.amazonaws.codedeploy#InvalidLoadBalancerInfoException":
          throw await deserializeAws_json1_1InvalidLoadBalancerInfoExceptionResponse(parsedOutput, context);
        case "InvalidRevisionException":
        case "com.amazonaws.codedeploy#InvalidRevisionException":
          throw await deserializeAws_json1_1InvalidRevisionExceptionResponse(parsedOutput, context);
        case "InvalidRoleException":
        case "com.amazonaws.codedeploy#InvalidRoleException":
          throw await deserializeAws_json1_1InvalidRoleExceptionResponse(parsedOutput, context);
        case "InvalidTargetInstancesException":
        case "com.amazonaws.codedeploy#InvalidTargetInstancesException":
          throw await deserializeAws_json1_1InvalidTargetInstancesExceptionResponse(parsedOutput, context);
        case "InvalidTrafficRoutingConfigurationException":
        case "com.amazonaws.codedeploy#InvalidTrafficRoutingConfigurationException":
          throw await deserializeAws_json1_1InvalidTrafficRoutingConfigurationExceptionResponse(parsedOutput, context);
        case "InvalidUpdateOutdatedInstancesOnlyValueException":
        case "com.amazonaws.codedeploy#InvalidUpdateOutdatedInstancesOnlyValueException":
          throw await deserializeAws_json1_1InvalidUpdateOutdatedInstancesOnlyValueExceptionResponse(parsedOutput, context);
        case "RevisionDoesNotExistException":
        case "com.amazonaws.codedeploy#RevisionDoesNotExistException":
          throw await deserializeAws_json1_1RevisionDoesNotExistExceptionResponse(parsedOutput, context);
        case "RevisionRequiredException":
        case "com.amazonaws.codedeploy#RevisionRequiredException":
          throw await deserializeAws_json1_1RevisionRequiredExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.codedeploy#ThrottlingException":
          throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1CreateDeploymentConfigCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateDeploymentConfigCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateDeploymentConfigOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1CreateDeploymentConfigCommand = deserializeAws_json1_1CreateDeploymentConfigCommand;
    var deserializeAws_json1_1CreateDeploymentConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeploymentConfigAlreadyExistsException":
        case "com.amazonaws.codedeploy#DeploymentConfigAlreadyExistsException":
          throw await deserializeAws_json1_1DeploymentConfigAlreadyExistsExceptionResponse(parsedOutput, context);
        case "DeploymentConfigLimitExceededException":
        case "com.amazonaws.codedeploy#DeploymentConfigLimitExceededException":
          throw await deserializeAws_json1_1DeploymentConfigLimitExceededExceptionResponse(parsedOutput, context);
        case "DeploymentConfigNameRequiredException":
        case "com.amazonaws.codedeploy#DeploymentConfigNameRequiredException":
          throw await deserializeAws_json1_1DeploymentConfigNameRequiredExceptionResponse(parsedOutput, context);
        case "InvalidComputePlatformException":
        case "com.amazonaws.codedeploy#InvalidComputePlatformException":
          throw await deserializeAws_json1_1InvalidComputePlatformExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentConfigNameException":
        case "com.amazonaws.codedeploy#InvalidDeploymentConfigNameException":
          throw await deserializeAws_json1_1InvalidDeploymentConfigNameExceptionResponse(parsedOutput, context);
        case "InvalidMinimumHealthyHostValueException":
        case "com.amazonaws.codedeploy#InvalidMinimumHealthyHostValueException":
          throw await deserializeAws_json1_1InvalidMinimumHealthyHostValueExceptionResponse(parsedOutput, context);
        case "InvalidTrafficRoutingConfigurationException":
        case "com.amazonaws.codedeploy#InvalidTrafficRoutingConfigurationException":
          throw await deserializeAws_json1_1InvalidTrafficRoutingConfigurationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1CreateDeploymentGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateDeploymentGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateDeploymentGroupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1CreateDeploymentGroupCommand = deserializeAws_json1_1CreateDeploymentGroupCommand;
    var deserializeAws_json1_1CreateDeploymentGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AlarmsLimitExceededException":
        case "com.amazonaws.codedeploy#AlarmsLimitExceededException":
          throw await deserializeAws_json1_1AlarmsLimitExceededExceptionResponse(parsedOutput, context);
        case "ApplicationDoesNotExistException":
        case "com.amazonaws.codedeploy#ApplicationDoesNotExistException":
          throw await deserializeAws_json1_1ApplicationDoesNotExistExceptionResponse(parsedOutput, context);
        case "ApplicationNameRequiredException":
        case "com.amazonaws.codedeploy#ApplicationNameRequiredException":
          throw await deserializeAws_json1_1ApplicationNameRequiredExceptionResponse(parsedOutput, context);
        case "DeploymentConfigDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentConfigDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentConfigDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentGroupAlreadyExistsException":
        case "com.amazonaws.codedeploy#DeploymentGroupAlreadyExistsException":
          throw await deserializeAws_json1_1DeploymentGroupAlreadyExistsExceptionResponse(parsedOutput, context);
        case "DeploymentGroupLimitExceededException":
        case "com.amazonaws.codedeploy#DeploymentGroupLimitExceededException":
          throw await deserializeAws_json1_1DeploymentGroupLimitExceededExceptionResponse(parsedOutput, context);
        case "DeploymentGroupNameRequiredException":
        case "com.amazonaws.codedeploy#DeploymentGroupNameRequiredException":
          throw await deserializeAws_json1_1DeploymentGroupNameRequiredExceptionResponse(parsedOutput, context);
        case "ECSServiceMappingLimitExceededException":
        case "com.amazonaws.codedeploy#ECSServiceMappingLimitExceededException":
          throw await deserializeAws_json1_1ECSServiceMappingLimitExceededExceptionResponse(parsedOutput, context);
        case "InvalidAlarmConfigException":
        case "com.amazonaws.codedeploy#InvalidAlarmConfigException":
          throw await deserializeAws_json1_1InvalidAlarmConfigExceptionResponse(parsedOutput, context);
        case "InvalidApplicationNameException":
        case "com.amazonaws.codedeploy#InvalidApplicationNameException":
          throw await deserializeAws_json1_1InvalidApplicationNameExceptionResponse(parsedOutput, context);
        case "InvalidAutoRollbackConfigException":
        case "com.amazonaws.codedeploy#InvalidAutoRollbackConfigException":
          throw await deserializeAws_json1_1InvalidAutoRollbackConfigExceptionResponse(parsedOutput, context);
        case "InvalidAutoScalingGroupException":
        case "com.amazonaws.codedeploy#InvalidAutoScalingGroupException":
          throw await deserializeAws_json1_1InvalidAutoScalingGroupExceptionResponse(parsedOutput, context);
        case "InvalidBlueGreenDeploymentConfigurationException":
        case "com.amazonaws.codedeploy#InvalidBlueGreenDeploymentConfigurationException":
          throw await deserializeAws_json1_1InvalidBlueGreenDeploymentConfigurationExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentConfigNameException":
        case "com.amazonaws.codedeploy#InvalidDeploymentConfigNameException":
          throw await deserializeAws_json1_1InvalidDeploymentConfigNameExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentGroupNameException":
        case "com.amazonaws.codedeploy#InvalidDeploymentGroupNameException":
          throw await deserializeAws_json1_1InvalidDeploymentGroupNameExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentStyleException":
        case "com.amazonaws.codedeploy#InvalidDeploymentStyleException":
          throw await deserializeAws_json1_1InvalidDeploymentStyleExceptionResponse(parsedOutput, context);
        case "InvalidEC2TagCombinationException":
        case "com.amazonaws.codedeploy#InvalidEC2TagCombinationException":
          throw await deserializeAws_json1_1InvalidEC2TagCombinationExceptionResponse(parsedOutput, context);
        case "InvalidEC2TagException":
        case "com.amazonaws.codedeploy#InvalidEC2TagException":
          throw await deserializeAws_json1_1InvalidEC2TagExceptionResponse(parsedOutput, context);
        case "InvalidECSServiceException":
        case "com.amazonaws.codedeploy#InvalidECSServiceException":
          throw await deserializeAws_json1_1InvalidECSServiceExceptionResponse(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.codedeploy#InvalidInputException":
          throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "InvalidLoadBalancerInfoException":
        case "com.amazonaws.codedeploy#InvalidLoadBalancerInfoException":
          throw await deserializeAws_json1_1InvalidLoadBalancerInfoExceptionResponse(parsedOutput, context);
        case "InvalidOnPremisesTagCombinationException":
        case "com.amazonaws.codedeploy#InvalidOnPremisesTagCombinationException":
          throw await deserializeAws_json1_1InvalidOnPremisesTagCombinationExceptionResponse(parsedOutput, context);
        case "InvalidRoleException":
        case "com.amazonaws.codedeploy#InvalidRoleException":
          throw await deserializeAws_json1_1InvalidRoleExceptionResponse(parsedOutput, context);
        case "InvalidTagException":
        case "com.amazonaws.codedeploy#InvalidTagException":
          throw await deserializeAws_json1_1InvalidTagExceptionResponse(parsedOutput, context);
        case "InvalidTagsToAddException":
        case "com.amazonaws.codedeploy#InvalidTagsToAddException":
          throw await deserializeAws_json1_1InvalidTagsToAddExceptionResponse(parsedOutput, context);
        case "InvalidTargetGroupPairException":
        case "com.amazonaws.codedeploy#InvalidTargetGroupPairException":
          throw await deserializeAws_json1_1InvalidTargetGroupPairExceptionResponse(parsedOutput, context);
        case "InvalidTrafficRoutingConfigurationException":
        case "com.amazonaws.codedeploy#InvalidTrafficRoutingConfigurationException":
          throw await deserializeAws_json1_1InvalidTrafficRoutingConfigurationExceptionResponse(parsedOutput, context);
        case "InvalidTriggerConfigException":
        case "com.amazonaws.codedeploy#InvalidTriggerConfigException":
          throw await deserializeAws_json1_1InvalidTriggerConfigExceptionResponse(parsedOutput, context);
        case "LifecycleHookLimitExceededException":
        case "com.amazonaws.codedeploy#LifecycleHookLimitExceededException":
          throw await deserializeAws_json1_1LifecycleHookLimitExceededExceptionResponse(parsedOutput, context);
        case "RoleRequiredException":
        case "com.amazonaws.codedeploy#RoleRequiredException":
          throw await deserializeAws_json1_1RoleRequiredExceptionResponse(parsedOutput, context);
        case "TagSetListLimitExceededException":
        case "com.amazonaws.codedeploy#TagSetListLimitExceededException":
          throw await deserializeAws_json1_1TagSetListLimitExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.codedeploy#ThrottlingException":
          throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "TriggerTargetsLimitExceededException":
        case "com.amazonaws.codedeploy#TriggerTargetsLimitExceededException":
          throw await deserializeAws_json1_1TriggerTargetsLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeleteApplicationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteApplicationCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1DeleteApplicationCommand = deserializeAws_json1_1DeleteApplicationCommand;
    var deserializeAws_json1_1DeleteApplicationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ApplicationNameRequiredException":
        case "com.amazonaws.codedeploy#ApplicationNameRequiredException":
          throw await deserializeAws_json1_1ApplicationNameRequiredExceptionResponse(parsedOutput, context);
        case "InvalidApplicationNameException":
        case "com.amazonaws.codedeploy#InvalidApplicationNameException":
          throw await deserializeAws_json1_1InvalidApplicationNameExceptionResponse(parsedOutput, context);
        case "InvalidRoleException":
        case "com.amazonaws.codedeploy#InvalidRoleException":
          throw await deserializeAws_json1_1InvalidRoleExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeleteDeploymentConfigCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteDeploymentConfigCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1DeleteDeploymentConfigCommand = deserializeAws_json1_1DeleteDeploymentConfigCommand;
    var deserializeAws_json1_1DeleteDeploymentConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeploymentConfigInUseException":
        case "com.amazonaws.codedeploy#DeploymentConfigInUseException":
          throw await deserializeAws_json1_1DeploymentConfigInUseExceptionResponse(parsedOutput, context);
        case "DeploymentConfigNameRequiredException":
        case "com.amazonaws.codedeploy#DeploymentConfigNameRequiredException":
          throw await deserializeAws_json1_1DeploymentConfigNameRequiredExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentConfigNameException":
        case "com.amazonaws.codedeploy#InvalidDeploymentConfigNameException":
          throw await deserializeAws_json1_1InvalidDeploymentConfigNameExceptionResponse(parsedOutput, context);
        case "InvalidOperationException":
        case "com.amazonaws.codedeploy#InvalidOperationException":
          throw await deserializeAws_json1_1InvalidOperationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeleteDeploymentGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteDeploymentGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteDeploymentGroupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1DeleteDeploymentGroupCommand = deserializeAws_json1_1DeleteDeploymentGroupCommand;
    var deserializeAws_json1_1DeleteDeploymentGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ApplicationNameRequiredException":
        case "com.amazonaws.codedeploy#ApplicationNameRequiredException":
          throw await deserializeAws_json1_1ApplicationNameRequiredExceptionResponse(parsedOutput, context);
        case "DeploymentGroupNameRequiredException":
        case "com.amazonaws.codedeploy#DeploymentGroupNameRequiredException":
          throw await deserializeAws_json1_1DeploymentGroupNameRequiredExceptionResponse(parsedOutput, context);
        case "InvalidApplicationNameException":
        case "com.amazonaws.codedeploy#InvalidApplicationNameException":
          throw await deserializeAws_json1_1InvalidApplicationNameExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentGroupNameException":
        case "com.amazonaws.codedeploy#InvalidDeploymentGroupNameException":
          throw await deserializeAws_json1_1InvalidDeploymentGroupNameExceptionResponse(parsedOutput, context);
        case "InvalidRoleException":
        case "com.amazonaws.codedeploy#InvalidRoleException":
          throw await deserializeAws_json1_1InvalidRoleExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeleteGitHubAccountTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteGitHubAccountTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteGitHubAccountTokenOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1DeleteGitHubAccountTokenCommand = deserializeAws_json1_1DeleteGitHubAccountTokenCommand;
    var deserializeAws_json1_1DeleteGitHubAccountTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GitHubAccountTokenDoesNotExistException":
        case "com.amazonaws.codedeploy#GitHubAccountTokenDoesNotExistException":
          throw await deserializeAws_json1_1GitHubAccountTokenDoesNotExistExceptionResponse(parsedOutput, context);
        case "GitHubAccountTokenNameRequiredException":
        case "com.amazonaws.codedeploy#GitHubAccountTokenNameRequiredException":
          throw await deserializeAws_json1_1GitHubAccountTokenNameRequiredExceptionResponse(parsedOutput, context);
        case "InvalidGitHubAccountTokenNameException":
        case "com.amazonaws.codedeploy#InvalidGitHubAccountTokenNameException":
          throw await deserializeAws_json1_1InvalidGitHubAccountTokenNameExceptionResponse(parsedOutput, context);
        case "OperationNotSupportedException":
        case "com.amazonaws.codedeploy#OperationNotSupportedException":
          throw await deserializeAws_json1_1OperationNotSupportedExceptionResponse(parsedOutput, context);
        case "ResourceValidationException":
        case "com.amazonaws.codedeploy#ResourceValidationException":
          throw await deserializeAws_json1_1ResourceValidationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeleteResourcesByExternalIdCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteResourcesByExternalIdCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteResourcesByExternalIdOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1DeleteResourcesByExternalIdCommand = deserializeAws_json1_1DeleteResourcesByExternalIdCommand;
    var deserializeAws_json1_1DeleteResourcesByExternalIdCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
        errorCode
      });
    };
    var deserializeAws_json1_1DeregisterOnPremisesInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeregisterOnPremisesInstanceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1DeregisterOnPremisesInstanceCommand = deserializeAws_json1_1DeregisterOnPremisesInstanceCommand;
    var deserializeAws_json1_1DeregisterOnPremisesInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InstanceNameRequiredException":
        case "com.amazonaws.codedeploy#InstanceNameRequiredException":
          throw await deserializeAws_json1_1InstanceNameRequiredExceptionResponse(parsedOutput, context);
        case "InvalidInstanceNameException":
        case "com.amazonaws.codedeploy#InvalidInstanceNameException":
          throw await deserializeAws_json1_1InvalidInstanceNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetApplicationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetApplicationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetApplicationOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1GetApplicationCommand = deserializeAws_json1_1GetApplicationCommand;
    var deserializeAws_json1_1GetApplicationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ApplicationDoesNotExistException":
        case "com.amazonaws.codedeploy#ApplicationDoesNotExistException":
          throw await deserializeAws_json1_1ApplicationDoesNotExistExceptionResponse(parsedOutput, context);
        case "ApplicationNameRequiredException":
        case "com.amazonaws.codedeploy#ApplicationNameRequiredException":
          throw await deserializeAws_json1_1ApplicationNameRequiredExceptionResponse(parsedOutput, context);
        case "InvalidApplicationNameException":
        case "com.amazonaws.codedeploy#InvalidApplicationNameException":
          throw await deserializeAws_json1_1InvalidApplicationNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetApplicationRevisionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetApplicationRevisionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetApplicationRevisionOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1GetApplicationRevisionCommand = deserializeAws_json1_1GetApplicationRevisionCommand;
    var deserializeAws_json1_1GetApplicationRevisionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ApplicationDoesNotExistException":
        case "com.amazonaws.codedeploy#ApplicationDoesNotExistException":
          throw await deserializeAws_json1_1ApplicationDoesNotExistExceptionResponse(parsedOutput, context);
        case "ApplicationNameRequiredException":
        case "com.amazonaws.codedeploy#ApplicationNameRequiredException":
          throw await deserializeAws_json1_1ApplicationNameRequiredExceptionResponse(parsedOutput, context);
        case "InvalidApplicationNameException":
        case "com.amazonaws.codedeploy#InvalidApplicationNameException":
          throw await deserializeAws_json1_1InvalidApplicationNameExceptionResponse(parsedOutput, context);
        case "InvalidRevisionException":
        case "com.amazonaws.codedeploy#InvalidRevisionException":
          throw await deserializeAws_json1_1InvalidRevisionExceptionResponse(parsedOutput, context);
        case "RevisionDoesNotExistException":
        case "com.amazonaws.codedeploy#RevisionDoesNotExistException":
          throw await deserializeAws_json1_1RevisionDoesNotExistExceptionResponse(parsedOutput, context);
        case "RevisionRequiredException":
        case "com.amazonaws.codedeploy#RevisionRequiredException":
          throw await deserializeAws_json1_1RevisionRequiredExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetDeploymentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDeploymentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetDeploymentOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1GetDeploymentCommand = deserializeAws_json1_1GetDeploymentCommand;
    var deserializeAws_json1_1GetDeploymentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeploymentDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentIdRequiredException":
        case "com.amazonaws.codedeploy#DeploymentIdRequiredException":
          throw await deserializeAws_json1_1DeploymentIdRequiredExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentIdException":
        case "com.amazonaws.codedeploy#InvalidDeploymentIdException":
          throw await deserializeAws_json1_1InvalidDeploymentIdExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetDeploymentConfigCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDeploymentConfigCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetDeploymentConfigOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1GetDeploymentConfigCommand = deserializeAws_json1_1GetDeploymentConfigCommand;
    var deserializeAws_json1_1GetDeploymentConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeploymentConfigDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentConfigDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentConfigDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentConfigNameRequiredException":
        case "com.amazonaws.codedeploy#DeploymentConfigNameRequiredException":
          throw await deserializeAws_json1_1DeploymentConfigNameRequiredExceptionResponse(parsedOutput, context);
        case "InvalidComputePlatformException":
        case "com.amazonaws.codedeploy#InvalidComputePlatformException":
          throw await deserializeAws_json1_1InvalidComputePlatformExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentConfigNameException":
        case "com.amazonaws.codedeploy#InvalidDeploymentConfigNameException":
          throw await deserializeAws_json1_1InvalidDeploymentConfigNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetDeploymentGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDeploymentGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetDeploymentGroupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1GetDeploymentGroupCommand = deserializeAws_json1_1GetDeploymentGroupCommand;
    var deserializeAws_json1_1GetDeploymentGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ApplicationDoesNotExistException":
        case "com.amazonaws.codedeploy#ApplicationDoesNotExistException":
          throw await deserializeAws_json1_1ApplicationDoesNotExistExceptionResponse(parsedOutput, context);
        case "ApplicationNameRequiredException":
        case "com.amazonaws.codedeploy#ApplicationNameRequiredException":
          throw await deserializeAws_json1_1ApplicationNameRequiredExceptionResponse(parsedOutput, context);
        case "DeploymentConfigDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentConfigDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentConfigDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentGroupDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentGroupDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentGroupDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentGroupNameRequiredException":
        case "com.amazonaws.codedeploy#DeploymentGroupNameRequiredException":
          throw await deserializeAws_json1_1DeploymentGroupNameRequiredExceptionResponse(parsedOutput, context);
        case "InvalidApplicationNameException":
        case "com.amazonaws.codedeploy#InvalidApplicationNameException":
          throw await deserializeAws_json1_1InvalidApplicationNameExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentGroupNameException":
        case "com.amazonaws.codedeploy#InvalidDeploymentGroupNameException":
          throw await deserializeAws_json1_1InvalidDeploymentGroupNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetDeploymentInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDeploymentInstanceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetDeploymentInstanceOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1GetDeploymentInstanceCommand = deserializeAws_json1_1GetDeploymentInstanceCommand;
    var deserializeAws_json1_1GetDeploymentInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeploymentDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentIdRequiredException":
        case "com.amazonaws.codedeploy#DeploymentIdRequiredException":
          throw await deserializeAws_json1_1DeploymentIdRequiredExceptionResponse(parsedOutput, context);
        case "InstanceDoesNotExistException":
        case "com.amazonaws.codedeploy#InstanceDoesNotExistException":
          throw await deserializeAws_json1_1InstanceDoesNotExistExceptionResponse(parsedOutput, context);
        case "InstanceIdRequiredException":
        case "com.amazonaws.codedeploy#InstanceIdRequiredException":
          throw await deserializeAws_json1_1InstanceIdRequiredExceptionResponse(parsedOutput, context);
        case "InvalidComputePlatformException":
        case "com.amazonaws.codedeploy#InvalidComputePlatformException":
          throw await deserializeAws_json1_1InvalidComputePlatformExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentIdException":
        case "com.amazonaws.codedeploy#InvalidDeploymentIdException":
          throw await deserializeAws_json1_1InvalidDeploymentIdExceptionResponse(parsedOutput, context);
        case "InvalidInstanceNameException":
        case "com.amazonaws.codedeploy#InvalidInstanceNameException":
          throw await deserializeAws_json1_1InvalidInstanceNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetDeploymentTargetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDeploymentTargetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetDeploymentTargetOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1GetDeploymentTargetCommand = deserializeAws_json1_1GetDeploymentTargetCommand;
    var deserializeAws_json1_1GetDeploymentTargetCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeploymentDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentIdRequiredException":
        case "com.amazonaws.codedeploy#DeploymentIdRequiredException":
          throw await deserializeAws_json1_1DeploymentIdRequiredExceptionResponse(parsedOutput, context);
        case "DeploymentNotStartedException":
        case "com.amazonaws.codedeploy#DeploymentNotStartedException":
          throw await deserializeAws_json1_1DeploymentNotStartedExceptionResponse(parsedOutput, context);
        case "DeploymentTargetDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentTargetDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentTargetDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentTargetIdRequiredException":
        case "com.amazonaws.codedeploy#DeploymentTargetIdRequiredException":
          throw await deserializeAws_json1_1DeploymentTargetIdRequiredExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentIdException":
        case "com.amazonaws.codedeploy#InvalidDeploymentIdException":
          throw await deserializeAws_json1_1InvalidDeploymentIdExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentTargetIdException":
        case "com.amazonaws.codedeploy#InvalidDeploymentTargetIdException":
          throw await deserializeAws_json1_1InvalidDeploymentTargetIdExceptionResponse(parsedOutput, context);
        case "InvalidInstanceNameException":
        case "com.amazonaws.codedeploy#InvalidInstanceNameException":
          throw await deserializeAws_json1_1InvalidInstanceNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetOnPremisesInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetOnPremisesInstanceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetOnPremisesInstanceOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1GetOnPremisesInstanceCommand = deserializeAws_json1_1GetOnPremisesInstanceCommand;
    var deserializeAws_json1_1GetOnPremisesInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InstanceNameRequiredException":
        case "com.amazonaws.codedeploy#InstanceNameRequiredException":
          throw await deserializeAws_json1_1InstanceNameRequiredExceptionResponse(parsedOutput, context);
        case "InstanceNotRegisteredException":
        case "com.amazonaws.codedeploy#InstanceNotRegisteredException":
          throw await deserializeAws_json1_1InstanceNotRegisteredExceptionResponse(parsedOutput, context);
        case "InvalidInstanceNameException":
        case "com.amazonaws.codedeploy#InvalidInstanceNameException":
          throw await deserializeAws_json1_1InvalidInstanceNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListApplicationRevisionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListApplicationRevisionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListApplicationRevisionsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1ListApplicationRevisionsCommand = deserializeAws_json1_1ListApplicationRevisionsCommand;
    var deserializeAws_json1_1ListApplicationRevisionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ApplicationDoesNotExistException":
        case "com.amazonaws.codedeploy#ApplicationDoesNotExistException":
          throw await deserializeAws_json1_1ApplicationDoesNotExistExceptionResponse(parsedOutput, context);
        case "ApplicationNameRequiredException":
        case "com.amazonaws.codedeploy#ApplicationNameRequiredException":
          throw await deserializeAws_json1_1ApplicationNameRequiredExceptionResponse(parsedOutput, context);
        case "BucketNameFilterRequiredException":
        case "com.amazonaws.codedeploy#BucketNameFilterRequiredException":
          throw await deserializeAws_json1_1BucketNameFilterRequiredExceptionResponse(parsedOutput, context);
        case "InvalidApplicationNameException":
        case "com.amazonaws.codedeploy#InvalidApplicationNameException":
          throw await deserializeAws_json1_1InvalidApplicationNameExceptionResponse(parsedOutput, context);
        case "InvalidBucketNameFilterException":
        case "com.amazonaws.codedeploy#InvalidBucketNameFilterException":
          throw await deserializeAws_json1_1InvalidBucketNameFilterExceptionResponse(parsedOutput, context);
        case "InvalidDeployedStateFilterException":
        case "com.amazonaws.codedeploy#InvalidDeployedStateFilterException":
          throw await deserializeAws_json1_1InvalidDeployedStateFilterExceptionResponse(parsedOutput, context);
        case "InvalidKeyPrefixFilterException":
        case "com.amazonaws.codedeploy#InvalidKeyPrefixFilterException":
          throw await deserializeAws_json1_1InvalidKeyPrefixFilterExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.codedeploy#InvalidNextTokenException":
          throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidSortByException":
        case "com.amazonaws.codedeploy#InvalidSortByException":
          throw await deserializeAws_json1_1InvalidSortByExceptionResponse(parsedOutput, context);
        case "InvalidSortOrderException":
        case "com.amazonaws.codedeploy#InvalidSortOrderException":
          throw await deserializeAws_json1_1InvalidSortOrderExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListApplicationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListApplicationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListApplicationsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1ListApplicationsCommand = deserializeAws_json1_1ListApplicationsCommand;
    var deserializeAws_json1_1ListApplicationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.codedeploy#InvalidNextTokenException":
          throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListDeploymentConfigsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDeploymentConfigsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListDeploymentConfigsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1ListDeploymentConfigsCommand = deserializeAws_json1_1ListDeploymentConfigsCommand;
    var deserializeAws_json1_1ListDeploymentConfigsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.codedeploy#InvalidNextTokenException":
          throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListDeploymentGroupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDeploymentGroupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListDeploymentGroupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1ListDeploymentGroupsCommand = deserializeAws_json1_1ListDeploymentGroupsCommand;
    var deserializeAws_json1_1ListDeploymentGroupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ApplicationDoesNotExistException":
        case "com.amazonaws.codedeploy#ApplicationDoesNotExistException":
          throw await deserializeAws_json1_1ApplicationDoesNotExistExceptionResponse(parsedOutput, context);
        case "ApplicationNameRequiredException":
        case "com.amazonaws.codedeploy#ApplicationNameRequiredException":
          throw await deserializeAws_json1_1ApplicationNameRequiredExceptionResponse(parsedOutput, context);
        case "InvalidApplicationNameException":
        case "com.amazonaws.codedeploy#InvalidApplicationNameException":
          throw await deserializeAws_json1_1InvalidApplicationNameExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.codedeploy#InvalidNextTokenException":
          throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListDeploymentInstancesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDeploymentInstancesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListDeploymentInstancesOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1ListDeploymentInstancesCommand = deserializeAws_json1_1ListDeploymentInstancesCommand;
    var deserializeAws_json1_1ListDeploymentInstancesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeploymentDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentIdRequiredException":
        case "com.amazonaws.codedeploy#DeploymentIdRequiredException":
          throw await deserializeAws_json1_1DeploymentIdRequiredExceptionResponse(parsedOutput, context);
        case "DeploymentNotStartedException":
        case "com.amazonaws.codedeploy#DeploymentNotStartedException":
          throw await deserializeAws_json1_1DeploymentNotStartedExceptionResponse(parsedOutput, context);
        case "InvalidComputePlatformException":
        case "com.amazonaws.codedeploy#InvalidComputePlatformException":
          throw await deserializeAws_json1_1InvalidComputePlatformExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentIdException":
        case "com.amazonaws.codedeploy#InvalidDeploymentIdException":
          throw await deserializeAws_json1_1InvalidDeploymentIdExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentInstanceTypeException":
        case "com.amazonaws.codedeploy#InvalidDeploymentInstanceTypeException":
          throw await deserializeAws_json1_1InvalidDeploymentInstanceTypeExceptionResponse(parsedOutput, context);
        case "InvalidInstanceStatusException":
        case "com.amazonaws.codedeploy#InvalidInstanceStatusException":
          throw await deserializeAws_json1_1InvalidInstanceStatusExceptionResponse(parsedOutput, context);
        case "InvalidInstanceTypeException":
        case "com.amazonaws.codedeploy#InvalidInstanceTypeException":
          throw await deserializeAws_json1_1InvalidInstanceTypeExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.codedeploy#InvalidNextTokenException":
          throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidTargetFilterNameException":
        case "com.amazonaws.codedeploy#InvalidTargetFilterNameException":
          throw await deserializeAws_json1_1InvalidTargetFilterNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListDeploymentsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDeploymentsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListDeploymentsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1ListDeploymentsCommand = deserializeAws_json1_1ListDeploymentsCommand;
    var deserializeAws_json1_1ListDeploymentsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ApplicationDoesNotExistException":
        case "com.amazonaws.codedeploy#ApplicationDoesNotExistException":
          throw await deserializeAws_json1_1ApplicationDoesNotExistExceptionResponse(parsedOutput, context);
        case "ApplicationNameRequiredException":
        case "com.amazonaws.codedeploy#ApplicationNameRequiredException":
          throw await deserializeAws_json1_1ApplicationNameRequiredExceptionResponse(parsedOutput, context);
        case "DeploymentGroupDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentGroupDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentGroupDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentGroupNameRequiredException":
        case "com.amazonaws.codedeploy#DeploymentGroupNameRequiredException":
          throw await deserializeAws_json1_1DeploymentGroupNameRequiredExceptionResponse(parsedOutput, context);
        case "InvalidApplicationNameException":
        case "com.amazonaws.codedeploy#InvalidApplicationNameException":
          throw await deserializeAws_json1_1InvalidApplicationNameExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentGroupNameException":
        case "com.amazonaws.codedeploy#InvalidDeploymentGroupNameException":
          throw await deserializeAws_json1_1InvalidDeploymentGroupNameExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentStatusException":
        case "com.amazonaws.codedeploy#InvalidDeploymentStatusException":
          throw await deserializeAws_json1_1InvalidDeploymentStatusExceptionResponse(parsedOutput, context);
        case "InvalidExternalIdException":
        case "com.amazonaws.codedeploy#InvalidExternalIdException":
          throw await deserializeAws_json1_1InvalidExternalIdExceptionResponse(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.codedeploy#InvalidInputException":
          throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.codedeploy#InvalidNextTokenException":
          throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidTimeRangeException":
        case "com.amazonaws.codedeploy#InvalidTimeRangeException":
          throw await deserializeAws_json1_1InvalidTimeRangeExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListDeploymentTargetsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDeploymentTargetsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListDeploymentTargetsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1ListDeploymentTargetsCommand = deserializeAws_json1_1ListDeploymentTargetsCommand;
    var deserializeAws_json1_1ListDeploymentTargetsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeploymentDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentIdRequiredException":
        case "com.amazonaws.codedeploy#DeploymentIdRequiredException":
          throw await deserializeAws_json1_1DeploymentIdRequiredExceptionResponse(parsedOutput, context);
        case "DeploymentNotStartedException":
        case "com.amazonaws.codedeploy#DeploymentNotStartedException":
          throw await deserializeAws_json1_1DeploymentNotStartedExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentIdException":
        case "com.amazonaws.codedeploy#InvalidDeploymentIdException":
          throw await deserializeAws_json1_1InvalidDeploymentIdExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentInstanceTypeException":
        case "com.amazonaws.codedeploy#InvalidDeploymentInstanceTypeException":
          throw await deserializeAws_json1_1InvalidDeploymentInstanceTypeExceptionResponse(parsedOutput, context);
        case "InvalidInstanceStatusException":
        case "com.amazonaws.codedeploy#InvalidInstanceStatusException":
          throw await deserializeAws_json1_1InvalidInstanceStatusExceptionResponse(parsedOutput, context);
        case "InvalidInstanceTypeException":
        case "com.amazonaws.codedeploy#InvalidInstanceTypeException":
          throw await deserializeAws_json1_1InvalidInstanceTypeExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.codedeploy#InvalidNextTokenException":
          throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListGitHubAccountTokenNamesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListGitHubAccountTokenNamesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListGitHubAccountTokenNamesOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1ListGitHubAccountTokenNamesCommand = deserializeAws_json1_1ListGitHubAccountTokenNamesCommand;
    var deserializeAws_json1_1ListGitHubAccountTokenNamesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.codedeploy#InvalidNextTokenException":
          throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "OperationNotSupportedException":
        case "com.amazonaws.codedeploy#OperationNotSupportedException":
          throw await deserializeAws_json1_1OperationNotSupportedExceptionResponse(parsedOutput, context);
        case "ResourceValidationException":
        case "com.amazonaws.codedeploy#ResourceValidationException":
          throw await deserializeAws_json1_1ResourceValidationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListOnPremisesInstancesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListOnPremisesInstancesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListOnPremisesInstancesOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1ListOnPremisesInstancesCommand = deserializeAws_json1_1ListOnPremisesInstancesCommand;
    var deserializeAws_json1_1ListOnPremisesInstancesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.codedeploy#InvalidNextTokenException":
          throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidRegistrationStatusException":
        case "com.amazonaws.codedeploy#InvalidRegistrationStatusException":
          throw await deserializeAws_json1_1InvalidRegistrationStatusExceptionResponse(parsedOutput, context);
        case "InvalidTagFilterException":
        case "com.amazonaws.codedeploy#InvalidTagFilterException":
          throw await deserializeAws_json1_1InvalidTagFilterExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListTagsForResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTagsForResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListTagsForResourceOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1ListTagsForResourceCommand = deserializeAws_json1_1ListTagsForResourceCommand;
    var deserializeAws_json1_1ListTagsForResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ArnNotSupportedException":
        case "com.amazonaws.codedeploy#ArnNotSupportedException":
          throw await deserializeAws_json1_1ArnNotSupportedExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.codedeploy#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "ResourceArnRequiredException":
        case "com.amazonaws.codedeploy#ResourceArnRequiredException":
          throw await deserializeAws_json1_1ResourceArnRequiredExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1PutLifecycleEventHookExecutionStatusCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutLifecycleEventHookExecutionStatusCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1PutLifecycleEventHookExecutionStatusOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1PutLifecycleEventHookExecutionStatusCommand = deserializeAws_json1_1PutLifecycleEventHookExecutionStatusCommand;
    var deserializeAws_json1_1PutLifecycleEventHookExecutionStatusCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeploymentDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentIdRequiredException":
        case "com.amazonaws.codedeploy#DeploymentIdRequiredException":
          throw await deserializeAws_json1_1DeploymentIdRequiredExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentIdException":
        case "com.amazonaws.codedeploy#InvalidDeploymentIdException":
          throw await deserializeAws_json1_1InvalidDeploymentIdExceptionResponse(parsedOutput, context);
        case "InvalidLifecycleEventHookExecutionIdException":
        case "com.amazonaws.codedeploy#InvalidLifecycleEventHookExecutionIdException":
          throw await deserializeAws_json1_1InvalidLifecycleEventHookExecutionIdExceptionResponse(parsedOutput, context);
        case "InvalidLifecycleEventHookExecutionStatusException":
        case "com.amazonaws.codedeploy#InvalidLifecycleEventHookExecutionStatusException":
          throw await deserializeAws_json1_1InvalidLifecycleEventHookExecutionStatusExceptionResponse(parsedOutput, context);
        case "LifecycleEventAlreadyCompletedException":
        case "com.amazonaws.codedeploy#LifecycleEventAlreadyCompletedException":
          throw await deserializeAws_json1_1LifecycleEventAlreadyCompletedExceptionResponse(parsedOutput, context);
        case "UnsupportedActionForDeploymentTypeException":
        case "com.amazonaws.codedeploy#UnsupportedActionForDeploymentTypeException":
          throw await deserializeAws_json1_1UnsupportedActionForDeploymentTypeExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1RegisterApplicationRevisionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RegisterApplicationRevisionCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1RegisterApplicationRevisionCommand = deserializeAws_json1_1RegisterApplicationRevisionCommand;
    var deserializeAws_json1_1RegisterApplicationRevisionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ApplicationDoesNotExistException":
        case "com.amazonaws.codedeploy#ApplicationDoesNotExistException":
          throw await deserializeAws_json1_1ApplicationDoesNotExistExceptionResponse(parsedOutput, context);
        case "ApplicationNameRequiredException":
        case "com.amazonaws.codedeploy#ApplicationNameRequiredException":
          throw await deserializeAws_json1_1ApplicationNameRequiredExceptionResponse(parsedOutput, context);
        case "DescriptionTooLongException":
        case "com.amazonaws.codedeploy#DescriptionTooLongException":
          throw await deserializeAws_json1_1DescriptionTooLongExceptionResponse(parsedOutput, context);
        case "InvalidApplicationNameException":
        case "com.amazonaws.codedeploy#InvalidApplicationNameException":
          throw await deserializeAws_json1_1InvalidApplicationNameExceptionResponse(parsedOutput, context);
        case "InvalidRevisionException":
        case "com.amazonaws.codedeploy#InvalidRevisionException":
          throw await deserializeAws_json1_1InvalidRevisionExceptionResponse(parsedOutput, context);
        case "RevisionRequiredException":
        case "com.amazonaws.codedeploy#RevisionRequiredException":
          throw await deserializeAws_json1_1RevisionRequiredExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1RegisterOnPremisesInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RegisterOnPremisesInstanceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1RegisterOnPremisesInstanceCommand = deserializeAws_json1_1RegisterOnPremisesInstanceCommand;
    var deserializeAws_json1_1RegisterOnPremisesInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "IamArnRequiredException":
        case "com.amazonaws.codedeploy#IamArnRequiredException":
          throw await deserializeAws_json1_1IamArnRequiredExceptionResponse(parsedOutput, context);
        case "IamSessionArnAlreadyRegisteredException":
        case "com.amazonaws.codedeploy#IamSessionArnAlreadyRegisteredException":
          throw await deserializeAws_json1_1IamSessionArnAlreadyRegisteredExceptionResponse(parsedOutput, context);
        case "IamUserArnAlreadyRegisteredException":
        case "com.amazonaws.codedeploy#IamUserArnAlreadyRegisteredException":
          throw await deserializeAws_json1_1IamUserArnAlreadyRegisteredExceptionResponse(parsedOutput, context);
        case "IamUserArnRequiredException":
        case "com.amazonaws.codedeploy#IamUserArnRequiredException":
          throw await deserializeAws_json1_1IamUserArnRequiredExceptionResponse(parsedOutput, context);
        case "InstanceNameAlreadyRegisteredException":
        case "com.amazonaws.codedeploy#InstanceNameAlreadyRegisteredException":
          throw await deserializeAws_json1_1InstanceNameAlreadyRegisteredExceptionResponse(parsedOutput, context);
        case "InstanceNameRequiredException":
        case "com.amazonaws.codedeploy#InstanceNameRequiredException":
          throw await deserializeAws_json1_1InstanceNameRequiredExceptionResponse(parsedOutput, context);
        case "InvalidIamSessionArnException":
        case "com.amazonaws.codedeploy#InvalidIamSessionArnException":
          throw await deserializeAws_json1_1InvalidIamSessionArnExceptionResponse(parsedOutput, context);
        case "InvalidIamUserArnException":
        case "com.amazonaws.codedeploy#InvalidIamUserArnException":
          throw await deserializeAws_json1_1InvalidIamUserArnExceptionResponse(parsedOutput, context);
        case "InvalidInstanceNameException":
        case "com.amazonaws.codedeploy#InvalidInstanceNameException":
          throw await deserializeAws_json1_1InvalidInstanceNameExceptionResponse(parsedOutput, context);
        case "MultipleIamArnsProvidedException":
        case "com.amazonaws.codedeploy#MultipleIamArnsProvidedException":
          throw await deserializeAws_json1_1MultipleIamArnsProvidedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1RemoveTagsFromOnPremisesInstancesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RemoveTagsFromOnPremisesInstancesCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1RemoveTagsFromOnPremisesInstancesCommand = deserializeAws_json1_1RemoveTagsFromOnPremisesInstancesCommand;
    var deserializeAws_json1_1RemoveTagsFromOnPremisesInstancesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InstanceLimitExceededException":
        case "com.amazonaws.codedeploy#InstanceLimitExceededException":
          throw await deserializeAws_json1_1InstanceLimitExceededExceptionResponse(parsedOutput, context);
        case "InstanceNameRequiredException":
        case "com.amazonaws.codedeploy#InstanceNameRequiredException":
          throw await deserializeAws_json1_1InstanceNameRequiredExceptionResponse(parsedOutput, context);
        case "InstanceNotRegisteredException":
        case "com.amazonaws.codedeploy#InstanceNotRegisteredException":
          throw await deserializeAws_json1_1InstanceNotRegisteredExceptionResponse(parsedOutput, context);
        case "InvalidInstanceNameException":
        case "com.amazonaws.codedeploy#InvalidInstanceNameException":
          throw await deserializeAws_json1_1InvalidInstanceNameExceptionResponse(parsedOutput, context);
        case "InvalidTagException":
        case "com.amazonaws.codedeploy#InvalidTagException":
          throw await deserializeAws_json1_1InvalidTagExceptionResponse(parsedOutput, context);
        case "TagLimitExceededException":
        case "com.amazonaws.codedeploy#TagLimitExceededException":
          throw await deserializeAws_json1_1TagLimitExceededExceptionResponse(parsedOutput, context);
        case "TagRequiredException":
        case "com.amazonaws.codedeploy#TagRequiredException":
          throw await deserializeAws_json1_1TagRequiredExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1SkipWaitTimeForInstanceTerminationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1SkipWaitTimeForInstanceTerminationCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1SkipWaitTimeForInstanceTerminationCommand = deserializeAws_json1_1SkipWaitTimeForInstanceTerminationCommand;
    var deserializeAws_json1_1SkipWaitTimeForInstanceTerminationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeploymentAlreadyCompletedException":
        case "com.amazonaws.codedeploy#DeploymentAlreadyCompletedException":
          throw await deserializeAws_json1_1DeploymentAlreadyCompletedExceptionResponse(parsedOutput, context);
        case "DeploymentDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentIdRequiredException":
        case "com.amazonaws.codedeploy#DeploymentIdRequiredException":
          throw await deserializeAws_json1_1DeploymentIdRequiredExceptionResponse(parsedOutput, context);
        case "DeploymentNotStartedException":
        case "com.amazonaws.codedeploy#DeploymentNotStartedException":
          throw await deserializeAws_json1_1DeploymentNotStartedExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentIdException":
        case "com.amazonaws.codedeploy#InvalidDeploymentIdException":
          throw await deserializeAws_json1_1InvalidDeploymentIdExceptionResponse(parsedOutput, context);
        case "UnsupportedActionForDeploymentTypeException":
        case "com.amazonaws.codedeploy#UnsupportedActionForDeploymentTypeException":
          throw await deserializeAws_json1_1UnsupportedActionForDeploymentTypeExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1StopDeploymentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopDeploymentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1StopDeploymentOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1StopDeploymentCommand = deserializeAws_json1_1StopDeploymentCommand;
    var deserializeAws_json1_1StopDeploymentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DeploymentAlreadyCompletedException":
        case "com.amazonaws.codedeploy#DeploymentAlreadyCompletedException":
          throw await deserializeAws_json1_1DeploymentAlreadyCompletedExceptionResponse(parsedOutput, context);
        case "DeploymentDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentGroupDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentGroupDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentGroupDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentIdRequiredException":
        case "com.amazonaws.codedeploy#DeploymentIdRequiredException":
          throw await deserializeAws_json1_1DeploymentIdRequiredExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentIdException":
        case "com.amazonaws.codedeploy#InvalidDeploymentIdException":
          throw await deserializeAws_json1_1InvalidDeploymentIdExceptionResponse(parsedOutput, context);
        case "UnsupportedActionForDeploymentTypeException":
        case "com.amazonaws.codedeploy#UnsupportedActionForDeploymentTypeException":
          throw await deserializeAws_json1_1UnsupportedActionForDeploymentTypeExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1TagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1TagResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1TagResourceOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1TagResourceCommand = deserializeAws_json1_1TagResourceCommand;
    var deserializeAws_json1_1TagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ApplicationDoesNotExistException":
        case "com.amazonaws.codedeploy#ApplicationDoesNotExistException":
          throw await deserializeAws_json1_1ApplicationDoesNotExistExceptionResponse(parsedOutput, context);
        case "ArnNotSupportedException":
        case "com.amazonaws.codedeploy#ArnNotSupportedException":
          throw await deserializeAws_json1_1ArnNotSupportedExceptionResponse(parsedOutput, context);
        case "DeploymentConfigDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentConfigDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentConfigDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentGroupDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentGroupDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentGroupDoesNotExistExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.codedeploy#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "InvalidTagsToAddException":
        case "com.amazonaws.codedeploy#InvalidTagsToAddException":
          throw await deserializeAws_json1_1InvalidTagsToAddExceptionResponse(parsedOutput, context);
        case "ResourceArnRequiredException":
        case "com.amazonaws.codedeploy#ResourceArnRequiredException":
          throw await deserializeAws_json1_1ResourceArnRequiredExceptionResponse(parsedOutput, context);
        case "TagRequiredException":
        case "com.amazonaws.codedeploy#TagRequiredException":
          throw await deserializeAws_json1_1TagRequiredExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UntagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UntagResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UntagResourceOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1UntagResourceCommand = deserializeAws_json1_1UntagResourceCommand;
    var deserializeAws_json1_1UntagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ApplicationDoesNotExistException":
        case "com.amazonaws.codedeploy#ApplicationDoesNotExistException":
          throw await deserializeAws_json1_1ApplicationDoesNotExistExceptionResponse(parsedOutput, context);
        case "ArnNotSupportedException":
        case "com.amazonaws.codedeploy#ArnNotSupportedException":
          throw await deserializeAws_json1_1ArnNotSupportedExceptionResponse(parsedOutput, context);
        case "DeploymentConfigDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentConfigDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentConfigDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentGroupDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentGroupDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentGroupDoesNotExistExceptionResponse(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.codedeploy#InvalidArnException":
          throw await deserializeAws_json1_1InvalidArnExceptionResponse(parsedOutput, context);
        case "InvalidTagsToAddException":
        case "com.amazonaws.codedeploy#InvalidTagsToAddException":
          throw await deserializeAws_json1_1InvalidTagsToAddExceptionResponse(parsedOutput, context);
        case "ResourceArnRequiredException":
        case "com.amazonaws.codedeploy#ResourceArnRequiredException":
          throw await deserializeAws_json1_1ResourceArnRequiredExceptionResponse(parsedOutput, context);
        case "TagRequiredException":
        case "com.amazonaws.codedeploy#TagRequiredException":
          throw await deserializeAws_json1_1TagRequiredExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UpdateApplicationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateApplicationCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1UpdateApplicationCommand = deserializeAws_json1_1UpdateApplicationCommand;
    var deserializeAws_json1_1UpdateApplicationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ApplicationAlreadyExistsException":
        case "com.amazonaws.codedeploy#ApplicationAlreadyExistsException":
          throw await deserializeAws_json1_1ApplicationAlreadyExistsExceptionResponse(parsedOutput, context);
        case "ApplicationDoesNotExistException":
        case "com.amazonaws.codedeploy#ApplicationDoesNotExistException":
          throw await deserializeAws_json1_1ApplicationDoesNotExistExceptionResponse(parsedOutput, context);
        case "ApplicationNameRequiredException":
        case "com.amazonaws.codedeploy#ApplicationNameRequiredException":
          throw await deserializeAws_json1_1ApplicationNameRequiredExceptionResponse(parsedOutput, context);
        case "InvalidApplicationNameException":
        case "com.amazonaws.codedeploy#InvalidApplicationNameException":
          throw await deserializeAws_json1_1InvalidApplicationNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UpdateDeploymentGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDeploymentGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateDeploymentGroupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_1UpdateDeploymentGroupCommand = deserializeAws_json1_1UpdateDeploymentGroupCommand;
    var deserializeAws_json1_1UpdateDeploymentGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AlarmsLimitExceededException":
        case "com.amazonaws.codedeploy#AlarmsLimitExceededException":
          throw await deserializeAws_json1_1AlarmsLimitExceededExceptionResponse(parsedOutput, context);
        case "ApplicationDoesNotExistException":
        case "com.amazonaws.codedeploy#ApplicationDoesNotExistException":
          throw await deserializeAws_json1_1ApplicationDoesNotExistExceptionResponse(parsedOutput, context);
        case "ApplicationNameRequiredException":
        case "com.amazonaws.codedeploy#ApplicationNameRequiredException":
          throw await deserializeAws_json1_1ApplicationNameRequiredExceptionResponse(parsedOutput, context);
        case "DeploymentConfigDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentConfigDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentConfigDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentGroupAlreadyExistsException":
        case "com.amazonaws.codedeploy#DeploymentGroupAlreadyExistsException":
          throw await deserializeAws_json1_1DeploymentGroupAlreadyExistsExceptionResponse(parsedOutput, context);
        case "DeploymentGroupDoesNotExistException":
        case "com.amazonaws.codedeploy#DeploymentGroupDoesNotExistException":
          throw await deserializeAws_json1_1DeploymentGroupDoesNotExistExceptionResponse(parsedOutput, context);
        case "DeploymentGroupNameRequiredException":
        case "com.amazonaws.codedeploy#DeploymentGroupNameRequiredException":
          throw await deserializeAws_json1_1DeploymentGroupNameRequiredExceptionResponse(parsedOutput, context);
        case "ECSServiceMappingLimitExceededException":
        case "com.amazonaws.codedeploy#ECSServiceMappingLimitExceededException":
          throw await deserializeAws_json1_1ECSServiceMappingLimitExceededExceptionResponse(parsedOutput, context);
        case "InvalidAlarmConfigException":
        case "com.amazonaws.codedeploy#InvalidAlarmConfigException":
          throw await deserializeAws_json1_1InvalidAlarmConfigExceptionResponse(parsedOutput, context);
        case "InvalidApplicationNameException":
        case "com.amazonaws.codedeploy#InvalidApplicationNameException":
          throw await deserializeAws_json1_1InvalidApplicationNameExceptionResponse(parsedOutput, context);
        case "InvalidAutoRollbackConfigException":
        case "com.amazonaws.codedeploy#InvalidAutoRollbackConfigException":
          throw await deserializeAws_json1_1InvalidAutoRollbackConfigExceptionResponse(parsedOutput, context);
        case "InvalidAutoScalingGroupException":
        case "com.amazonaws.codedeploy#InvalidAutoScalingGroupException":
          throw await deserializeAws_json1_1InvalidAutoScalingGroupExceptionResponse(parsedOutput, context);
        case "InvalidBlueGreenDeploymentConfigurationException":
        case "com.amazonaws.codedeploy#InvalidBlueGreenDeploymentConfigurationException":
          throw await deserializeAws_json1_1InvalidBlueGreenDeploymentConfigurationExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentConfigNameException":
        case "com.amazonaws.codedeploy#InvalidDeploymentConfigNameException":
          throw await deserializeAws_json1_1InvalidDeploymentConfigNameExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentGroupNameException":
        case "com.amazonaws.codedeploy#InvalidDeploymentGroupNameException":
          throw await deserializeAws_json1_1InvalidDeploymentGroupNameExceptionResponse(parsedOutput, context);
        case "InvalidDeploymentStyleException":
        case "com.amazonaws.codedeploy#InvalidDeploymentStyleException":
          throw await deserializeAws_json1_1InvalidDeploymentStyleExceptionResponse(parsedOutput, context);
        case "InvalidEC2TagCombinationException":
        case "com.amazonaws.codedeploy#InvalidEC2TagCombinationException":
          throw await deserializeAws_json1_1InvalidEC2TagCombinationExceptionResponse(parsedOutput, context);
        case "InvalidEC2TagException":
        case "com.amazonaws.codedeploy#InvalidEC2TagException":
          throw await deserializeAws_json1_1InvalidEC2TagExceptionResponse(parsedOutput, context);
        case "InvalidECSServiceException":
        case "com.amazonaws.codedeploy#InvalidECSServiceException":
          throw await deserializeAws_json1_1InvalidECSServiceExceptionResponse(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.codedeploy#InvalidInputException":
          throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "InvalidLoadBalancerInfoException":
        case "com.amazonaws.codedeploy#InvalidLoadBalancerInfoException":
          throw await deserializeAws_json1_1InvalidLoadBalancerInfoExceptionResponse(parsedOutput, context);
        case "InvalidOnPremisesTagCombinationException":
        case "com.amazonaws.codedeploy#InvalidOnPremisesTagCombinationException":
          throw await deserializeAws_json1_1InvalidOnPremisesTagCombinationExceptionResponse(parsedOutput, context);
        case "InvalidRoleException":
        case "com.amazonaws.codedeploy#InvalidRoleException":
          throw await deserializeAws_json1_1InvalidRoleExceptionResponse(parsedOutput, context);
        case "InvalidTagException":
        case "com.amazonaws.codedeploy#InvalidTagException":
          throw await deserializeAws_json1_1InvalidTagExceptionResponse(parsedOutput, context);
        case "InvalidTargetGroupPairException":
        case "com.amazonaws.codedeploy#InvalidTargetGroupPairException":
          throw await deserializeAws_json1_1InvalidTargetGroupPairExceptionResponse(parsedOutput, context);
        case "InvalidTrafficRoutingConfigurationException":
        case "com.amazonaws.codedeploy#InvalidTrafficRoutingConfigurationException":
          throw await deserializeAws_json1_1InvalidTrafficRoutingConfigurationExceptionResponse(parsedOutput, context);
        case "InvalidTriggerConfigException":
        case "com.amazonaws.codedeploy#InvalidTriggerConfigException":
          throw await deserializeAws_json1_1InvalidTriggerConfigExceptionResponse(parsedOutput, context);
        case "LifecycleHookLimitExceededException":
        case "com.amazonaws.codedeploy#LifecycleHookLimitExceededException":
          throw await deserializeAws_json1_1LifecycleHookLimitExceededExceptionResponse(parsedOutput, context);
        case "TagSetListLimitExceededException":
        case "com.amazonaws.codedeploy#TagSetListLimitExceededException":
          throw await deserializeAws_json1_1TagSetListLimitExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.codedeploy#ThrottlingException":
          throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "TriggerTargetsLimitExceededException":
        case "com.amazonaws.codedeploy#TriggerTargetsLimitExceededException":
          throw await deserializeAws_json1_1TriggerTargetsLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: CodeDeployServiceException_1.CodeDeployServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1AlarmsLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AlarmsLimitExceededException(body, context);
      const exception = new models_0_1.AlarmsLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ApplicationAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ApplicationAlreadyExistsException(body, context);
      const exception = new models_0_1.ApplicationAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ApplicationDoesNotExistExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ApplicationDoesNotExistException(body, context);
      const exception = new models_0_1.ApplicationDoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ApplicationLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ApplicationLimitExceededException(body, context);
      const exception = new models_0_1.ApplicationLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ApplicationNameRequiredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ApplicationNameRequiredException(body, context);
      const exception = new models_0_1.ApplicationNameRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ArnNotSupportedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ArnNotSupportedException(body, context);
      const exception = new models_0_1.ArnNotSupportedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1BatchLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1BatchLimitExceededException(body, context);
      const exception = new models_0_1.BatchLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1BucketNameFilterRequiredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1BucketNameFilterRequiredException(body, context);
      const exception = new models_0_1.BucketNameFilterRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DeploymentAlreadyCompletedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DeploymentAlreadyCompletedException(body, context);
      const exception = new models_0_1.DeploymentAlreadyCompletedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DeploymentConfigAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DeploymentConfigAlreadyExistsException(body, context);
      const exception = new models_0_1.DeploymentConfigAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DeploymentConfigDoesNotExistExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DeploymentConfigDoesNotExistException(body, context);
      const exception = new models_0_1.DeploymentConfigDoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DeploymentConfigInUseExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DeploymentConfigInUseException(body, context);
      const exception = new models_0_1.DeploymentConfigInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DeploymentConfigLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DeploymentConfigLimitExceededException(body, context);
      const exception = new models_0_1.DeploymentConfigLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DeploymentConfigNameRequiredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DeploymentConfigNameRequiredException(body, context);
      const exception = new models_0_1.DeploymentConfigNameRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DeploymentDoesNotExistExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DeploymentDoesNotExistException(body, context);
      const exception = new models_0_1.DeploymentDoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DeploymentGroupAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DeploymentGroupAlreadyExistsException(body, context);
      const exception = new models_0_1.DeploymentGroupAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DeploymentGroupDoesNotExistExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DeploymentGroupDoesNotExistException(body, context);
      const exception = new models_0_1.DeploymentGroupDoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DeploymentGroupLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DeploymentGroupLimitExceededException(body, context);
      const exception = new models_0_1.DeploymentGroupLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DeploymentGroupNameRequiredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DeploymentGroupNameRequiredException(body, context);
      const exception = new models_0_1.DeploymentGroupNameRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DeploymentIdRequiredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DeploymentIdRequiredException(body, context);
      const exception = new models_0_1.DeploymentIdRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DeploymentIsNotInReadyStateExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DeploymentIsNotInReadyStateException(body, context);
      const exception = new models_0_1.DeploymentIsNotInReadyStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DeploymentLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DeploymentLimitExceededException(body, context);
      const exception = new models_0_1.DeploymentLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DeploymentNotStartedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DeploymentNotStartedException(body, context);
      const exception = new models_0_1.DeploymentNotStartedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DeploymentTargetDoesNotExistExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DeploymentTargetDoesNotExistException(body, context);
      const exception = new models_0_1.DeploymentTargetDoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DeploymentTargetIdRequiredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DeploymentTargetIdRequiredException(body, context);
      const exception = new models_0_1.DeploymentTargetIdRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DeploymentTargetListSizeExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DeploymentTargetListSizeExceededException(body, context);
      const exception = new models_0_1.DeploymentTargetListSizeExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DescriptionTooLongExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DescriptionTooLongException(body, context);
      const exception = new models_0_1.DescriptionTooLongException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ECSServiceMappingLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ECSServiceMappingLimitExceededException(body, context);
      const exception = new models_0_1.ECSServiceMappingLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1GitHubAccountTokenDoesNotExistExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1GitHubAccountTokenDoesNotExistException(body, context);
      const exception = new models_0_1.GitHubAccountTokenDoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1GitHubAccountTokenNameRequiredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1GitHubAccountTokenNameRequiredException(body, context);
      const exception = new models_0_1.GitHubAccountTokenNameRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1IamArnRequiredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1IamArnRequiredException(body, context);
      const exception = new models_0_1.IamArnRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1IamSessionArnAlreadyRegisteredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1IamSessionArnAlreadyRegisteredException(body, context);
      const exception = new models_0_1.IamSessionArnAlreadyRegisteredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1IamUserArnAlreadyRegisteredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1IamUserArnAlreadyRegisteredException(body, context);
      const exception = new models_0_1.IamUserArnAlreadyRegisteredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1IamUserArnRequiredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1IamUserArnRequiredException(body, context);
      const exception = new models_0_1.IamUserArnRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InstanceDoesNotExistExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InstanceDoesNotExistException(body, context);
      const exception = new models_0_1.InstanceDoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InstanceIdRequiredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InstanceIdRequiredException(body, context);
      const exception = new models_0_1.InstanceIdRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InstanceLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InstanceLimitExceededException(body, context);
      const exception = new models_0_1.InstanceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InstanceNameAlreadyRegisteredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InstanceNameAlreadyRegisteredException(body, context);
      const exception = new models_0_1.InstanceNameAlreadyRegisteredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InstanceNameRequiredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InstanceNameRequiredException(body, context);
      const exception = new models_0_1.InstanceNameRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InstanceNotRegisteredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InstanceNotRegisteredException(body, context);
      const exception = new models_0_1.InstanceNotRegisteredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidAlarmConfigExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAlarmConfigException(body, context);
      const exception = new models_0_1.InvalidAlarmConfigException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidApplicationNameExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidApplicationNameException(body, context);
      const exception = new models_0_1.InvalidApplicationNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidArnExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidArnException(body, context);
      const exception = new models_0_1.InvalidArnException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidAutoRollbackConfigExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAutoRollbackConfigException(body, context);
      const exception = new models_0_1.InvalidAutoRollbackConfigException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidAutoScalingGroupExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAutoScalingGroupException(body, context);
      const exception = new models_0_1.InvalidAutoScalingGroupException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidBlueGreenDeploymentConfigurationExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidBlueGreenDeploymentConfigurationException(body, context);
      const exception = new models_0_1.InvalidBlueGreenDeploymentConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidBucketNameFilterExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidBucketNameFilterException(body, context);
      const exception = new models_0_1.InvalidBucketNameFilterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidComputePlatformExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidComputePlatformException(body, context);
      const exception = new models_0_1.InvalidComputePlatformException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDeployedStateFilterExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDeployedStateFilterException(body, context);
      const exception = new models_0_1.InvalidDeployedStateFilterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDeploymentConfigNameExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDeploymentConfigNameException(body, context);
      const exception = new models_0_1.InvalidDeploymentConfigNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDeploymentGroupNameExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDeploymentGroupNameException(body, context);
      const exception = new models_0_1.InvalidDeploymentGroupNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDeploymentIdExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDeploymentIdException(body, context);
      const exception = new models_0_1.InvalidDeploymentIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDeploymentInstanceTypeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDeploymentInstanceTypeException(body, context);
      const exception = new models_0_1.InvalidDeploymentInstanceTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDeploymentStatusExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDeploymentStatusException(body, context);
      const exception = new models_0_1.InvalidDeploymentStatusException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDeploymentStyleExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDeploymentStyleException(body, context);
      const exception = new models_0_1.InvalidDeploymentStyleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDeploymentTargetIdExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDeploymentTargetIdException(body, context);
      const exception = new models_0_1.InvalidDeploymentTargetIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDeploymentWaitTypeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDeploymentWaitTypeException(body, context);
      const exception = new models_0_1.InvalidDeploymentWaitTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidEC2TagCombinationExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidEC2TagCombinationException(body, context);
      const exception = new models_0_1.InvalidEC2TagCombinationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidEC2TagExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidEC2TagException(body, context);
      const exception = new models_0_1.InvalidEC2TagException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidECSServiceExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidECSServiceException(body, context);
      const exception = new models_0_1.InvalidECSServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidExternalIdExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidExternalIdException(body, context);
      const exception = new models_0_1.InvalidExternalIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidFileExistsBehaviorExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidFileExistsBehaviorException(body, context);
      const exception = new models_0_1.InvalidFileExistsBehaviorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidGitHubAccountTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidGitHubAccountTokenException(body, context);
      const exception = new models_0_1.InvalidGitHubAccountTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidGitHubAccountTokenNameExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidGitHubAccountTokenNameException(body, context);
      const exception = new models_0_1.InvalidGitHubAccountTokenNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidIamSessionArnExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidIamSessionArnException(body, context);
      const exception = new models_0_1.InvalidIamSessionArnException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidIamUserArnExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidIamUserArnException(body, context);
      const exception = new models_0_1.InvalidIamUserArnException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidIgnoreApplicationStopFailuresValueExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidIgnoreApplicationStopFailuresValueException(body, context);
      const exception = new models_0_1.InvalidIgnoreApplicationStopFailuresValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidInputExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInputException(body, context);
      const exception = new models_0_1.InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidInstanceNameExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInstanceNameException(body, context);
      const exception = new models_0_1.InvalidInstanceNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidInstanceStatusExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInstanceStatusException(body, context);
      const exception = new models_0_1.InvalidInstanceStatusException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidInstanceTypeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInstanceTypeException(body, context);
      const exception = new models_0_1.InvalidInstanceTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidKeyPrefixFilterExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidKeyPrefixFilterException(body, context);
      const exception = new models_0_1.InvalidKeyPrefixFilterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidLifecycleEventHookExecutionIdExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidLifecycleEventHookExecutionIdException(body, context);
      const exception = new models_0_1.InvalidLifecycleEventHookExecutionIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidLifecycleEventHookExecutionStatusExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidLifecycleEventHookExecutionStatusException(body, context);
      const exception = new models_0_1.InvalidLifecycleEventHookExecutionStatusException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidLoadBalancerInfoExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidLoadBalancerInfoException(body, context);
      const exception = new models_0_1.InvalidLoadBalancerInfoException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidMinimumHealthyHostValueExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidMinimumHealthyHostValueException(body, context);
      const exception = new models_0_1.InvalidMinimumHealthyHostValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidNextTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidNextTokenException(body, context);
      const exception = new models_0_1.InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidOnPremisesTagCombinationExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidOnPremisesTagCombinationException(body, context);
      const exception = new models_0_1.InvalidOnPremisesTagCombinationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidOperationExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidOperationException(body, context);
      const exception = new models_0_1.InvalidOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidRegistrationStatusExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidRegistrationStatusException(body, context);
      const exception = new models_0_1.InvalidRegistrationStatusException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidRevisionExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidRevisionException(body, context);
      const exception = new models_0_1.InvalidRevisionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidRoleExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidRoleException(body, context);
      const exception = new models_0_1.InvalidRoleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidSortByExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidSortByException(body, context);
      const exception = new models_0_1.InvalidSortByException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidSortOrderExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidSortOrderException(body, context);
      const exception = new models_0_1.InvalidSortOrderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidTagExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTagException(body, context);
      const exception = new models_0_1.InvalidTagException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidTagFilterExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTagFilterException(body, context);
      const exception = new models_0_1.InvalidTagFilterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidTagsToAddExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTagsToAddException(body, context);
      const exception = new models_0_1.InvalidTagsToAddException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidTargetFilterNameExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTargetFilterNameException(body, context);
      const exception = new models_0_1.InvalidTargetFilterNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidTargetGroupPairExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTargetGroupPairException(body, context);
      const exception = new models_0_1.InvalidTargetGroupPairException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidTargetInstancesExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTargetInstancesException(body, context);
      const exception = new models_0_1.InvalidTargetInstancesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidTimeRangeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTimeRangeException(body, context);
      const exception = new models_0_1.InvalidTimeRangeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidTrafficRoutingConfigurationExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTrafficRoutingConfigurationException(body, context);
      const exception = new models_0_1.InvalidTrafficRoutingConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidTriggerConfigExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTriggerConfigException(body, context);
      const exception = new models_0_1.InvalidTriggerConfigException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidUpdateOutdatedInstancesOnlyValueExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidUpdateOutdatedInstancesOnlyValueException(body, context);
      const exception = new models_0_1.InvalidUpdateOutdatedInstancesOnlyValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1LifecycleEventAlreadyCompletedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1LifecycleEventAlreadyCompletedException(body, context);
      const exception = new models_0_1.LifecycleEventAlreadyCompletedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1LifecycleHookLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1LifecycleHookLimitExceededException(body, context);
      const exception = new models_0_1.LifecycleHookLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1MultipleIamArnsProvidedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1MultipleIamArnsProvidedException(body, context);
      const exception = new models_0_1.MultipleIamArnsProvidedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OperationNotSupportedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OperationNotSupportedException(body, context);
      const exception = new models_0_1.OperationNotSupportedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourceArnRequiredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceArnRequiredException(body, context);
      const exception = new models_0_1.ResourceArnRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourceValidationExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceValidationException(body, context);
      const exception = new models_0_1.ResourceValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1RevisionDoesNotExistExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1RevisionDoesNotExistException(body, context);
      const exception = new models_0_1.RevisionDoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1RevisionRequiredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1RevisionRequiredException(body, context);
      const exception = new models_0_1.RevisionRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1RoleRequiredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1RoleRequiredException(body, context);
      const exception = new models_0_1.RoleRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1TagLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TagLimitExceededException(body, context);
      const exception = new models_0_1.TagLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1TagRequiredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TagRequiredException(body, context);
      const exception = new models_0_1.TagRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1TagSetListLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TagSetListLimitExceededException(body, context);
      const exception = new models_0_1.TagSetListLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ThrottlingExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ThrottlingException(body, context);
      const exception = new models_0_1.ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1TriggerTargetsLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TriggerTargetsLimitExceededException(body, context);
      const exception = new models_0_1.TriggerTargetsLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1UnsupportedActionForDeploymentTypeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedActionForDeploymentTypeException(body, context);
      const exception = new models_0_1.UnsupportedActionForDeploymentTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_json1_1AddTagsToOnPremisesInstancesInput = (input, context) => {
      return {
        ...input.instanceNames != null && {
          instanceNames: serializeAws_json1_1InstanceNameList(input.instanceNames, context)
        },
        ...input.tags != null && { tags: serializeAws_json1_1TagList(input.tags, context) }
      };
    };
    var serializeAws_json1_1Alarm = (input, context) => {
      return {
        ...input.name != null && { name: input.name }
      };
    };
    var serializeAws_json1_1AlarmConfiguration = (input, context) => {
      return {
        ...input.alarms != null && { alarms: serializeAws_json1_1AlarmList(input.alarms, context) },
        ...input.enabled != null && { enabled: input.enabled },
        ...input.ignorePollAlarmFailure != null && { ignorePollAlarmFailure: input.ignorePollAlarmFailure }
      };
    };
    var serializeAws_json1_1AlarmList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1Alarm(entry, context);
      });
    };
    var serializeAws_json1_1ApplicationsList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1AppSpecContent = (input, context) => {
      return {
        ...input.content != null && { content: input.content },
        ...input.sha256 != null && { sha256: input.sha256 }
      };
    };
    var serializeAws_json1_1AutoRollbackConfiguration = (input, context) => {
      return {
        ...input.enabled != null && { enabled: input.enabled },
        ...input.events != null && { events: serializeAws_json1_1AutoRollbackEventsList(input.events, context) }
      };
    };
    var serializeAws_json1_1AutoRollbackEventsList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1AutoScalingGroupNameList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1BatchGetApplicationRevisionsInput = (input, context) => {
      return {
        ...input.applicationName != null && { applicationName: input.applicationName },
        ...input.revisions != null && { revisions: serializeAws_json1_1RevisionLocationList(input.revisions, context) }
      };
    };
    var serializeAws_json1_1BatchGetApplicationsInput = (input, context) => {
      return {
        ...input.applicationNames != null && {
          applicationNames: serializeAws_json1_1ApplicationsList(input.applicationNames, context)
        }
      };
    };
    var serializeAws_json1_1BatchGetDeploymentGroupsInput = (input, context) => {
      return {
        ...input.applicationName != null && { applicationName: input.applicationName },
        ...input.deploymentGroupNames != null && {
          deploymentGroupNames: serializeAws_json1_1DeploymentGroupsList(input.deploymentGroupNames, context)
        }
      };
    };
    var serializeAws_json1_1BatchGetDeploymentInstancesInput = (input, context) => {
      return {
        ...input.deploymentId != null && { deploymentId: input.deploymentId },
        ...input.instanceIds != null && { instanceIds: serializeAws_json1_1InstancesList(input.instanceIds, context) }
      };
    };
    var serializeAws_json1_1BatchGetDeploymentsInput = (input, context) => {
      return {
        ...input.deploymentIds != null && {
          deploymentIds: serializeAws_json1_1DeploymentsList(input.deploymentIds, context)
        }
      };
    };
    var serializeAws_json1_1BatchGetDeploymentTargetsInput = (input, context) => {
      return {
        ...input.deploymentId != null && { deploymentId: input.deploymentId },
        ...input.targetIds != null && { targetIds: serializeAws_json1_1TargetIdList(input.targetIds, context) }
      };
    };
    var serializeAws_json1_1BatchGetOnPremisesInstancesInput = (input, context) => {
      return {
        ...input.instanceNames != null && {
          instanceNames: serializeAws_json1_1InstanceNameList(input.instanceNames, context)
        }
      };
    };
    var serializeAws_json1_1BlueGreenDeploymentConfiguration = (input, context) => {
      return {
        ...input.deploymentReadyOption != null && {
          deploymentReadyOption: serializeAws_json1_1DeploymentReadyOption(input.deploymentReadyOption, context)
        },
        ...input.greenFleetProvisioningOption != null && {
          greenFleetProvisioningOption: serializeAws_json1_1GreenFleetProvisioningOption(input.greenFleetProvisioningOption, context)
        },
        ...input.terminateBlueInstancesOnDeploymentSuccess != null && {
          terminateBlueInstancesOnDeploymentSuccess: serializeAws_json1_1BlueInstanceTerminationOption(input.terminateBlueInstancesOnDeploymentSuccess, context)
        }
      };
    };
    var serializeAws_json1_1BlueInstanceTerminationOption = (input, context) => {
      return {
        ...input.action != null && { action: input.action },
        ...input.terminationWaitTimeInMinutes != null && {
          terminationWaitTimeInMinutes: input.terminationWaitTimeInMinutes
        }
      };
    };
    var serializeAws_json1_1ContinueDeploymentInput = (input, context) => {
      return {
        ...input.deploymentId != null && { deploymentId: input.deploymentId },
        ...input.deploymentWaitType != null && { deploymentWaitType: input.deploymentWaitType }
      };
    };
    var serializeAws_json1_1CreateApplicationInput = (input, context) => {
      return {
        ...input.applicationName != null && { applicationName: input.applicationName },
        ...input.computePlatform != null && { computePlatform: input.computePlatform },
        ...input.tags != null && { tags: serializeAws_json1_1TagList(input.tags, context) }
      };
    };
    var serializeAws_json1_1CreateDeploymentConfigInput = (input, context) => {
      return {
        ...input.computePlatform != null && { computePlatform: input.computePlatform },
        ...input.deploymentConfigName != null && { deploymentConfigName: input.deploymentConfigName },
        ...input.minimumHealthyHosts != null && {
          minimumHealthyHosts: serializeAws_json1_1MinimumHealthyHosts(input.minimumHealthyHosts, context)
        },
        ...input.trafficRoutingConfig != null && {
          trafficRoutingConfig: serializeAws_json1_1TrafficRoutingConfig(input.trafficRoutingConfig, context)
        }
      };
    };
    var serializeAws_json1_1CreateDeploymentGroupInput = (input, context) => {
      return {
        ...input.alarmConfiguration != null && {
          alarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.alarmConfiguration, context)
        },
        ...input.applicationName != null && { applicationName: input.applicationName },
        ...input.autoRollbackConfiguration != null && {
          autoRollbackConfiguration: serializeAws_json1_1AutoRollbackConfiguration(input.autoRollbackConfiguration, context)
        },
        ...input.autoScalingGroups != null && {
          autoScalingGroups: serializeAws_json1_1AutoScalingGroupNameList(input.autoScalingGroups, context)
        },
        ...input.blueGreenDeploymentConfiguration != null && {
          blueGreenDeploymentConfiguration: serializeAws_json1_1BlueGreenDeploymentConfiguration(input.blueGreenDeploymentConfiguration, context)
        },
        ...input.deploymentConfigName != null && { deploymentConfigName: input.deploymentConfigName },
        ...input.deploymentGroupName != null && { deploymentGroupName: input.deploymentGroupName },
        ...input.deploymentStyle != null && {
          deploymentStyle: serializeAws_json1_1DeploymentStyle(input.deploymentStyle, context)
        },
        ...input.ec2TagFilters != null && {
          ec2TagFilters: serializeAws_json1_1EC2TagFilterList(input.ec2TagFilters, context)
        },
        ...input.ec2TagSet != null && { ec2TagSet: serializeAws_json1_1EC2TagSet(input.ec2TagSet, context) },
        ...input.ecsServices != null && { ecsServices: serializeAws_json1_1ECSServiceList(input.ecsServices, context) },
        ...input.loadBalancerInfo != null && {
          loadBalancerInfo: serializeAws_json1_1LoadBalancerInfo(input.loadBalancerInfo, context)
        },
        ...input.onPremisesInstanceTagFilters != null && {
          onPremisesInstanceTagFilters: serializeAws_json1_1TagFilterList(input.onPremisesInstanceTagFilters, context)
        },
        ...input.onPremisesTagSet != null && {
          onPremisesTagSet: serializeAws_json1_1OnPremisesTagSet(input.onPremisesTagSet, context)
        },
        ...input.outdatedInstancesStrategy != null && { outdatedInstancesStrategy: input.outdatedInstancesStrategy },
        ...input.serviceRoleArn != null && { serviceRoleArn: input.serviceRoleArn },
        ...input.tags != null && { tags: serializeAws_json1_1TagList(input.tags, context) },
        ...input.triggerConfigurations != null && {
          triggerConfigurations: serializeAws_json1_1TriggerConfigList(input.triggerConfigurations, context)
        }
      };
    };
    var serializeAws_json1_1CreateDeploymentInput = (input, context) => {
      return {
        ...input.applicationName != null && { applicationName: input.applicationName },
        ...input.autoRollbackConfiguration != null && {
          autoRollbackConfiguration: serializeAws_json1_1AutoRollbackConfiguration(input.autoRollbackConfiguration, context)
        },
        ...input.deploymentConfigName != null && { deploymentConfigName: input.deploymentConfigName },
        ...input.deploymentGroupName != null && { deploymentGroupName: input.deploymentGroupName },
        ...input.description != null && { description: input.description },
        ...input.fileExistsBehavior != null && { fileExistsBehavior: input.fileExistsBehavior },
        ...input.ignoreApplicationStopFailures != null && {
          ignoreApplicationStopFailures: input.ignoreApplicationStopFailures
        },
        ...input.overrideAlarmConfiguration != null && {
          overrideAlarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.overrideAlarmConfiguration, context)
        },
        ...input.revision != null && { revision: serializeAws_json1_1RevisionLocation(input.revision, context) },
        ...input.targetInstances != null && {
          targetInstances: serializeAws_json1_1TargetInstances(input.targetInstances, context)
        },
        ...input.updateOutdatedInstancesOnly != null && {
          updateOutdatedInstancesOnly: input.updateOutdatedInstancesOnly
        }
      };
    };
    var serializeAws_json1_1DeleteApplicationInput = (input, context) => {
      return {
        ...input.applicationName != null && { applicationName: input.applicationName }
      };
    };
    var serializeAws_json1_1DeleteDeploymentConfigInput = (input, context) => {
      return {
        ...input.deploymentConfigName != null && { deploymentConfigName: input.deploymentConfigName }
      };
    };
    var serializeAws_json1_1DeleteDeploymentGroupInput = (input, context) => {
      return {
        ...input.applicationName != null && { applicationName: input.applicationName },
        ...input.deploymentGroupName != null && { deploymentGroupName: input.deploymentGroupName }
      };
    };
    var serializeAws_json1_1DeleteGitHubAccountTokenInput = (input, context) => {
      return {
        ...input.tokenName != null && { tokenName: input.tokenName }
      };
    };
    var serializeAws_json1_1DeleteResourcesByExternalIdInput = (input, context) => {
      return {
        ...input.externalId != null && { externalId: input.externalId }
      };
    };
    var serializeAws_json1_1DeploymentGroupsList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1DeploymentReadyOption = (input, context) => {
      return {
        ...input.actionOnTimeout != null && { actionOnTimeout: input.actionOnTimeout },
        ...input.waitTimeInMinutes != null && { waitTimeInMinutes: input.waitTimeInMinutes }
      };
    };
    var serializeAws_json1_1DeploymentsList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1DeploymentStatusList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1DeploymentStyle = (input, context) => {
      return {
        ...input.deploymentOption != null && { deploymentOption: input.deploymentOption },
        ...input.deploymentType != null && { deploymentType: input.deploymentType }
      };
    };
    var serializeAws_json1_1DeregisterOnPremisesInstanceInput = (input, context) => {
      return {
        ...input.instanceName != null && { instanceName: input.instanceName }
      };
    };
    var serializeAws_json1_1EC2TagFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Type != null && { Type: input.Type },
        ...input.Value != null && { Value: input.Value }
      };
    };
    var serializeAws_json1_1EC2TagFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1EC2TagFilter(entry, context);
      });
    };
    var serializeAws_json1_1EC2TagSet = (input, context) => {
      return {
        ...input.ec2TagSetList != null && {
          ec2TagSetList: serializeAws_json1_1EC2TagSetList(input.ec2TagSetList, context)
        }
      };
    };
    var serializeAws_json1_1EC2TagSetList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1EC2TagFilterList(entry, context);
      });
    };
    var serializeAws_json1_1ECSService = (input, context) => {
      return {
        ...input.clusterName != null && { clusterName: input.clusterName },
        ...input.serviceName != null && { serviceName: input.serviceName }
      };
    };
    var serializeAws_json1_1ECSServiceList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1ECSService(entry, context);
      });
    };
    var serializeAws_json1_1ELBInfo = (input, context) => {
      return {
        ...input.name != null && { name: input.name }
      };
    };
    var serializeAws_json1_1ELBInfoList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1ELBInfo(entry, context);
      });
    };
    var serializeAws_json1_1FilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1GetApplicationInput = (input, context) => {
      return {
        ...input.applicationName != null && { applicationName: input.applicationName }
      };
    };
    var serializeAws_json1_1GetApplicationRevisionInput = (input, context) => {
      return {
        ...input.applicationName != null && { applicationName: input.applicationName },
        ...input.revision != null && { revision: serializeAws_json1_1RevisionLocation(input.revision, context) }
      };
    };
    var serializeAws_json1_1GetDeploymentConfigInput = (input, context) => {
      return {
        ...input.deploymentConfigName != null && { deploymentConfigName: input.deploymentConfigName }
      };
    };
    var serializeAws_json1_1GetDeploymentGroupInput = (input, context) => {
      return {
        ...input.applicationName != null && { applicationName: input.applicationName },
        ...input.deploymentGroupName != null && { deploymentGroupName: input.deploymentGroupName }
      };
    };
    var serializeAws_json1_1GetDeploymentInput = (input, context) => {
      return {
        ...input.deploymentId != null && { deploymentId: input.deploymentId }
      };
    };
    var serializeAws_json1_1GetDeploymentInstanceInput = (input, context) => {
      return {
        ...input.deploymentId != null && { deploymentId: input.deploymentId },
        ...input.instanceId != null && { instanceId: input.instanceId }
      };
    };
    var serializeAws_json1_1GetDeploymentTargetInput = (input, context) => {
      return {
        ...input.deploymentId != null && { deploymentId: input.deploymentId },
        ...input.targetId != null && { targetId: input.targetId }
      };
    };
    var serializeAws_json1_1GetOnPremisesInstanceInput = (input, context) => {
      return {
        ...input.instanceName != null && { instanceName: input.instanceName }
      };
    };
    var serializeAws_json1_1GitHubLocation = (input, context) => {
      return {
        ...input.commitId != null && { commitId: input.commitId },
        ...input.repository != null && { repository: input.repository }
      };
    };
    var serializeAws_json1_1GreenFleetProvisioningOption = (input, context) => {
      return {
        ...input.action != null && { action: input.action }
      };
    };
    var serializeAws_json1_1InstanceNameList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1InstancesList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1InstanceStatusList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1InstanceTypeList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1ListApplicationRevisionsInput = (input, context) => {
      return {
        ...input.applicationName != null && { applicationName: input.applicationName },
        ...input.deployed != null && { deployed: input.deployed },
        ...input.nextToken != null && { nextToken: input.nextToken },
        ...input.s3Bucket != null && { s3Bucket: input.s3Bucket },
        ...input.s3KeyPrefix != null && { s3KeyPrefix: input.s3KeyPrefix },
        ...input.sortBy != null && { sortBy: input.sortBy },
        ...input.sortOrder != null && { sortOrder: input.sortOrder }
      };
    };
    var serializeAws_json1_1ListApplicationsInput = (input, context) => {
      return {
        ...input.nextToken != null && { nextToken: input.nextToken }
      };
    };
    var serializeAws_json1_1ListDeploymentConfigsInput = (input, context) => {
      return {
        ...input.nextToken != null && { nextToken: input.nextToken }
      };
    };
    var serializeAws_json1_1ListDeploymentGroupsInput = (input, context) => {
      return {
        ...input.applicationName != null && { applicationName: input.applicationName },
        ...input.nextToken != null && { nextToken: input.nextToken }
      };
    };
    var serializeAws_json1_1ListDeploymentInstancesInput = (input, context) => {
      return {
        ...input.deploymentId != null && { deploymentId: input.deploymentId },
        ...input.instanceStatusFilter != null && {
          instanceStatusFilter: serializeAws_json1_1InstanceStatusList(input.instanceStatusFilter, context)
        },
        ...input.instanceTypeFilter != null && {
          instanceTypeFilter: serializeAws_json1_1InstanceTypeList(input.instanceTypeFilter, context)
        },
        ...input.nextToken != null && { nextToken: input.nextToken }
      };
    };
    var serializeAws_json1_1ListDeploymentsInput = (input, context) => {
      return {
        ...input.applicationName != null && { applicationName: input.applicationName },
        ...input.createTimeRange != null && {
          createTimeRange: serializeAws_json1_1TimeRange(input.createTimeRange, context)
        },
        ...input.deploymentGroupName != null && { deploymentGroupName: input.deploymentGroupName },
        ...input.externalId != null && { externalId: input.externalId },
        ...input.includeOnlyStatuses != null && {
          includeOnlyStatuses: serializeAws_json1_1DeploymentStatusList(input.includeOnlyStatuses, context)
        },
        ...input.nextToken != null && { nextToken: input.nextToken }
      };
    };
    var serializeAws_json1_1ListDeploymentTargetsInput = (input, context) => {
      return {
        ...input.deploymentId != null && { deploymentId: input.deploymentId },
        ...input.nextToken != null && { nextToken: input.nextToken },
        ...input.targetFilters != null && {
          targetFilters: serializeAws_json1_1TargetFilters(input.targetFilters, context)
        }
      };
    };
    var serializeAws_json1_1ListenerArnList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1ListGitHubAccountTokenNamesInput = (input, context) => {
      return {
        ...input.nextToken != null && { nextToken: input.nextToken }
      };
    };
    var serializeAws_json1_1ListOnPremisesInstancesInput = (input, context) => {
      return {
        ...input.nextToken != null && { nextToken: input.nextToken },
        ...input.registrationStatus != null && { registrationStatus: input.registrationStatus },
        ...input.tagFilters != null && { tagFilters: serializeAws_json1_1TagFilterList(input.tagFilters, context) }
      };
    };
    var serializeAws_json1_1ListTagsForResourceInput = (input, context) => {
      return {
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ResourceArn != null && { ResourceArn: input.ResourceArn }
      };
    };
    var serializeAws_json1_1LoadBalancerInfo = (input, context) => {
      return {
        ...input.elbInfoList != null && { elbInfoList: serializeAws_json1_1ELBInfoList(input.elbInfoList, context) },
        ...input.targetGroupInfoList != null && {
          targetGroupInfoList: serializeAws_json1_1TargetGroupInfoList(input.targetGroupInfoList, context)
        },
        ...input.targetGroupPairInfoList != null && {
          targetGroupPairInfoList: serializeAws_json1_1TargetGroupPairInfoList(input.targetGroupPairInfoList, context)
        }
      };
    };
    var serializeAws_json1_1MinimumHealthyHosts = (input, context) => {
      return {
        ...input.type != null && { type: input.type },
        ...input.value != null && { value: input.value }
      };
    };
    var serializeAws_json1_1OnPremisesTagSet = (input, context) => {
      return {
        ...input.onPremisesTagSetList != null && {
          onPremisesTagSetList: serializeAws_json1_1OnPremisesTagSetList(input.onPremisesTagSetList, context)
        }
      };
    };
    var serializeAws_json1_1OnPremisesTagSetList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1TagFilterList(entry, context);
      });
    };
    var serializeAws_json1_1PutLifecycleEventHookExecutionStatusInput = (input, context) => {
      return {
        ...input.deploymentId != null && { deploymentId: input.deploymentId },
        ...input.lifecycleEventHookExecutionId != null && {
          lifecycleEventHookExecutionId: input.lifecycleEventHookExecutionId
        },
        ...input.status != null && { status: input.status }
      };
    };
    var serializeAws_json1_1RawString = (input, context) => {
      return {
        ...input.content != null && { content: input.content },
        ...input.sha256 != null && { sha256: input.sha256 }
      };
    };
    var serializeAws_json1_1RegisterApplicationRevisionInput = (input, context) => {
      return {
        ...input.applicationName != null && { applicationName: input.applicationName },
        ...input.description != null && { description: input.description },
        ...input.revision != null && { revision: serializeAws_json1_1RevisionLocation(input.revision, context) }
      };
    };
    var serializeAws_json1_1RegisterOnPremisesInstanceInput = (input, context) => {
      return {
        ...input.iamSessionArn != null && { iamSessionArn: input.iamSessionArn },
        ...input.iamUserArn != null && { iamUserArn: input.iamUserArn },
        ...input.instanceName != null && { instanceName: input.instanceName }
      };
    };
    var serializeAws_json1_1RemoveTagsFromOnPremisesInstancesInput = (input, context) => {
      return {
        ...input.instanceNames != null && {
          instanceNames: serializeAws_json1_1InstanceNameList(input.instanceNames, context)
        },
        ...input.tags != null && { tags: serializeAws_json1_1TagList(input.tags, context) }
      };
    };
    var serializeAws_json1_1RevisionLocation = (input, context) => {
      return {
        ...input.appSpecContent != null && {
          appSpecContent: serializeAws_json1_1AppSpecContent(input.appSpecContent, context)
        },
        ...input.gitHubLocation != null && {
          gitHubLocation: serializeAws_json1_1GitHubLocation(input.gitHubLocation, context)
        },
        ...input.revisionType != null && { revisionType: input.revisionType },
        ...input.s3Location != null && { s3Location: serializeAws_json1_1S3Location(input.s3Location, context) },
        ...input.string != null && { string: serializeAws_json1_1RawString(input.string, context) }
      };
    };
    var serializeAws_json1_1RevisionLocationList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1RevisionLocation(entry, context);
      });
    };
    var serializeAws_json1_1S3Location = (input, context) => {
      return {
        ...input.bucket != null && { bucket: input.bucket },
        ...input.bundleType != null && { bundleType: input.bundleType },
        ...input.eTag != null && { eTag: input.eTag },
        ...input.key != null && { key: input.key },
        ...input.version != null && { version: input.version }
      };
    };
    var serializeAws_json1_1SkipWaitTimeForInstanceTerminationInput = (input, context) => {
      return {
        ...input.deploymentId != null && { deploymentId: input.deploymentId }
      };
    };
    var serializeAws_json1_1StopDeploymentInput = (input, context) => {
      return {
        ...input.autoRollbackEnabled != null && { autoRollbackEnabled: input.autoRollbackEnabled },
        ...input.deploymentId != null && { deploymentId: input.deploymentId }
      };
    };
    var serializeAws_json1_1Tag = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Value != null && { Value: input.Value }
      };
    };
    var serializeAws_json1_1TagFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Type != null && { Type: input.Type },
        ...input.Value != null && { Value: input.Value }
      };
    };
    var serializeAws_json1_1TagFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1TagFilter(entry, context);
      });
    };
    var serializeAws_json1_1TagKeyList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1TagList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1Tag(entry, context);
      });
    };
    var serializeAws_json1_1TagResourceInput = (input, context) => {
      return {
        ...input.ResourceArn != null && { ResourceArn: input.ResourceArn },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    };
    var serializeAws_json1_1TargetFilters = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = serializeAws_json1_1FilterValueList(value, context);
        return acc;
      }, {});
    };
    var serializeAws_json1_1TargetGroupInfo = (input, context) => {
      return {
        ...input.name != null && { name: input.name }
      };
    };
    var serializeAws_json1_1TargetGroupInfoList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1TargetGroupInfo(entry, context);
      });
    };
    var serializeAws_json1_1TargetGroupPairInfo = (input, context) => {
      return {
        ...input.prodTrafficRoute != null && {
          prodTrafficRoute: serializeAws_json1_1TrafficRoute(input.prodTrafficRoute, context)
        },
        ...input.targetGroups != null && {
          targetGroups: serializeAws_json1_1TargetGroupInfoList(input.targetGroups, context)
        },
        ...input.testTrafficRoute != null && {
          testTrafficRoute: serializeAws_json1_1TrafficRoute(input.testTrafficRoute, context)
        }
      };
    };
    var serializeAws_json1_1TargetGroupPairInfoList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1TargetGroupPairInfo(entry, context);
      });
    };
    var serializeAws_json1_1TargetIdList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1TargetInstances = (input, context) => {
      return {
        ...input.autoScalingGroups != null && {
          autoScalingGroups: serializeAws_json1_1AutoScalingGroupNameList(input.autoScalingGroups, context)
        },
        ...input.ec2TagSet != null && { ec2TagSet: serializeAws_json1_1EC2TagSet(input.ec2TagSet, context) },
        ...input.tagFilters != null && { tagFilters: serializeAws_json1_1EC2TagFilterList(input.tagFilters, context) }
      };
    };
    var serializeAws_json1_1TimeBasedCanary = (input, context) => {
      return {
        ...input.canaryInterval != null && { canaryInterval: input.canaryInterval },
        ...input.canaryPercentage != null && { canaryPercentage: input.canaryPercentage }
      };
    };
    var serializeAws_json1_1TimeBasedLinear = (input, context) => {
      return {
        ...input.linearInterval != null && { linearInterval: input.linearInterval },
        ...input.linearPercentage != null && { linearPercentage: input.linearPercentage }
      };
    };
    var serializeAws_json1_1TimeRange = (input, context) => {
      return {
        ...input.end != null && { end: Math.round(input.end.getTime() / 1e3) },
        ...input.start != null && { start: Math.round(input.start.getTime() / 1e3) }
      };
    };
    var serializeAws_json1_1TrafficRoute = (input, context) => {
      return {
        ...input.listenerArns != null && {
          listenerArns: serializeAws_json1_1ListenerArnList(input.listenerArns, context)
        }
      };
    };
    var serializeAws_json1_1TrafficRoutingConfig = (input, context) => {
      return {
        ...input.timeBasedCanary != null && {
          timeBasedCanary: serializeAws_json1_1TimeBasedCanary(input.timeBasedCanary, context)
        },
        ...input.timeBasedLinear != null && {
          timeBasedLinear: serializeAws_json1_1TimeBasedLinear(input.timeBasedLinear, context)
        },
        ...input.type != null && { type: input.type }
      };
    };
    var serializeAws_json1_1TriggerConfig = (input, context) => {
      return {
        ...input.triggerEvents != null && {
          triggerEvents: serializeAws_json1_1TriggerEventTypeList(input.triggerEvents, context)
        },
        ...input.triggerName != null && { triggerName: input.triggerName },
        ...input.triggerTargetArn != null && { triggerTargetArn: input.triggerTargetArn }
      };
    };
    var serializeAws_json1_1TriggerConfigList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1TriggerConfig(entry, context);
      });
    };
    var serializeAws_json1_1TriggerEventTypeList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1UntagResourceInput = (input, context) => {
      return {
        ...input.ResourceArn != null && { ResourceArn: input.ResourceArn },
        ...input.TagKeys != null && { TagKeys: serializeAws_json1_1TagKeyList(input.TagKeys, context) }
      };
    };
    var serializeAws_json1_1UpdateApplicationInput = (input, context) => {
      return {
        ...input.applicationName != null && { applicationName: input.applicationName },
        ...input.newApplicationName != null && { newApplicationName: input.newApplicationName }
      };
    };
    var serializeAws_json1_1UpdateDeploymentGroupInput = (input, context) => {
      return {
        ...input.alarmConfiguration != null && {
          alarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.alarmConfiguration, context)
        },
        ...input.applicationName != null && { applicationName: input.applicationName },
        ...input.autoRollbackConfiguration != null && {
          autoRollbackConfiguration: serializeAws_json1_1AutoRollbackConfiguration(input.autoRollbackConfiguration, context)
        },
        ...input.autoScalingGroups != null && {
          autoScalingGroups: serializeAws_json1_1AutoScalingGroupNameList(input.autoScalingGroups, context)
        },
        ...input.blueGreenDeploymentConfiguration != null && {
          blueGreenDeploymentConfiguration: serializeAws_json1_1BlueGreenDeploymentConfiguration(input.blueGreenDeploymentConfiguration, context)
        },
        ...input.currentDeploymentGroupName != null && { currentDeploymentGroupName: input.currentDeploymentGroupName },
        ...input.deploymentConfigName != null && { deploymentConfigName: input.deploymentConfigName },
        ...input.deploymentStyle != null && {
          deploymentStyle: serializeAws_json1_1DeploymentStyle(input.deploymentStyle, context)
        },
        ...input.ec2TagFilters != null && {
          ec2TagFilters: serializeAws_json1_1EC2TagFilterList(input.ec2TagFilters, context)
        },
        ...input.ec2TagSet != null && { ec2TagSet: serializeAws_json1_1EC2TagSet(input.ec2TagSet, context) },
        ...input.ecsServices != null && { ecsServices: serializeAws_json1_1ECSServiceList(input.ecsServices, context) },
        ...input.loadBalancerInfo != null && {
          loadBalancerInfo: serializeAws_json1_1LoadBalancerInfo(input.loadBalancerInfo, context)
        },
        ...input.newDeploymentGroupName != null && { newDeploymentGroupName: input.newDeploymentGroupName },
        ...input.onPremisesInstanceTagFilters != null && {
          onPremisesInstanceTagFilters: serializeAws_json1_1TagFilterList(input.onPremisesInstanceTagFilters, context)
        },
        ...input.onPremisesTagSet != null && {
          onPremisesTagSet: serializeAws_json1_1OnPremisesTagSet(input.onPremisesTagSet, context)
        },
        ...input.outdatedInstancesStrategy != null && { outdatedInstancesStrategy: input.outdatedInstancesStrategy },
        ...input.serviceRoleArn != null && { serviceRoleArn: input.serviceRoleArn },
        ...input.triggerConfigurations != null && {
          triggerConfigurations: serializeAws_json1_1TriggerConfigList(input.triggerConfigurations, context)
        }
      };
    };
    var deserializeAws_json1_1Alarm = (output, context) => {
      return {
        name: (0, smithy_client_1.expectString)(output.name)
      };
    };
    var deserializeAws_json1_1AlarmConfiguration = (output, context) => {
      return {
        alarms: output.alarms != null ? deserializeAws_json1_1AlarmList(output.alarms, context) : void 0,
        enabled: (0, smithy_client_1.expectBoolean)(output.enabled),
        ignorePollAlarmFailure: (0, smithy_client_1.expectBoolean)(output.ignorePollAlarmFailure)
      };
    };
    var deserializeAws_json1_1AlarmList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Alarm(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AlarmsLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ApplicationAlreadyExistsException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ApplicationDoesNotExistException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ApplicationInfo = (output, context) => {
      return {
        applicationId: (0, smithy_client_1.expectString)(output.applicationId),
        applicationName: (0, smithy_client_1.expectString)(output.applicationName),
        computePlatform: (0, smithy_client_1.expectString)(output.computePlatform),
        createTime: output.createTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createTime))) : void 0,
        gitHubAccountName: (0, smithy_client_1.expectString)(output.gitHubAccountName),
        linkedToGitHub: (0, smithy_client_1.expectBoolean)(output.linkedToGitHub)
      };
    };
    var deserializeAws_json1_1ApplicationLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ApplicationNameRequiredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ApplicationsInfoList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ApplicationInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ApplicationsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1AppSpecContent = (output, context) => {
      return {
        content: (0, smithy_client_1.expectString)(output.content),
        sha256: (0, smithy_client_1.expectString)(output.sha256)
      };
    };
    var deserializeAws_json1_1ArnNotSupportedException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1AutoRollbackConfiguration = (output, context) => {
      return {
        enabled: (0, smithy_client_1.expectBoolean)(output.enabled),
        events: output.events != null ? deserializeAws_json1_1AutoRollbackEventsList(output.events, context) : void 0
      };
    };
    var deserializeAws_json1_1AutoRollbackEventsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1AutoScalingGroup = (output, context) => {
      return {
        hook: (0, smithy_client_1.expectString)(output.hook),
        name: (0, smithy_client_1.expectString)(output.name)
      };
    };
    var deserializeAws_json1_1AutoScalingGroupList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AutoScalingGroup(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AutoScalingGroupNameList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1BatchGetApplicationRevisionsOutput = (output, context) => {
      return {
        applicationName: (0, smithy_client_1.expectString)(output.applicationName),
        errorMessage: (0, smithy_client_1.expectString)(output.errorMessage),
        revisions: output.revisions != null ? deserializeAws_json1_1RevisionInfoList(output.revisions, context) : void 0
      };
    };
    var deserializeAws_json1_1BatchGetApplicationsOutput = (output, context) => {
      return {
        applicationsInfo: output.applicationsInfo != null ? deserializeAws_json1_1ApplicationsInfoList(output.applicationsInfo, context) : void 0
      };
    };
    var deserializeAws_json1_1BatchGetDeploymentGroupsOutput = (output, context) => {
      return {
        deploymentGroupsInfo: output.deploymentGroupsInfo != null ? deserializeAws_json1_1DeploymentGroupInfoList(output.deploymentGroupsInfo, context) : void 0,
        errorMessage: (0, smithy_client_1.expectString)(output.errorMessage)
      };
    };
    var deserializeAws_json1_1BatchGetDeploymentInstancesOutput = (output, context) => {
      return {
        errorMessage: (0, smithy_client_1.expectString)(output.errorMessage),
        instancesSummary: output.instancesSummary != null ? deserializeAws_json1_1InstanceSummaryList(output.instancesSummary, context) : void 0
      };
    };
    var deserializeAws_json1_1BatchGetDeploymentsOutput = (output, context) => {
      return {
        deploymentsInfo: output.deploymentsInfo != null ? deserializeAws_json1_1DeploymentsInfoList(output.deploymentsInfo, context) : void 0
      };
    };
    var deserializeAws_json1_1BatchGetDeploymentTargetsOutput = (output, context) => {
      return {
        deploymentTargets: output.deploymentTargets != null ? deserializeAws_json1_1DeploymentTargetList(output.deploymentTargets, context) : void 0
      };
    };
    var deserializeAws_json1_1BatchGetOnPremisesInstancesOutput = (output, context) => {
      return {
        instanceInfos: output.instanceInfos != null ? deserializeAws_json1_1InstanceInfoList(output.instanceInfos, context) : void 0
      };
    };
    var deserializeAws_json1_1BatchLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1BlueGreenDeploymentConfiguration = (output, context) => {
      return {
        deploymentReadyOption: output.deploymentReadyOption != null ? deserializeAws_json1_1DeploymentReadyOption(output.deploymentReadyOption, context) : void 0,
        greenFleetProvisioningOption: output.greenFleetProvisioningOption != null ? deserializeAws_json1_1GreenFleetProvisioningOption(output.greenFleetProvisioningOption, context) : void 0,
        terminateBlueInstancesOnDeploymentSuccess: output.terminateBlueInstancesOnDeploymentSuccess != null ? deserializeAws_json1_1BlueInstanceTerminationOption(output.terminateBlueInstancesOnDeploymentSuccess, context) : void 0
      };
    };
    var deserializeAws_json1_1BlueInstanceTerminationOption = (output, context) => {
      return {
        action: (0, smithy_client_1.expectString)(output.action),
        terminationWaitTimeInMinutes: (0, smithy_client_1.expectInt32)(output.terminationWaitTimeInMinutes)
      };
    };
    var deserializeAws_json1_1BucketNameFilterRequiredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1CloudFormationTarget = (output, context) => {
      return {
        deploymentId: (0, smithy_client_1.expectString)(output.deploymentId),
        lastUpdatedAt: output.lastUpdatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastUpdatedAt))) : void 0,
        lifecycleEvents: output.lifecycleEvents != null ? deserializeAws_json1_1LifecycleEventList(output.lifecycleEvents, context) : void 0,
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        status: (0, smithy_client_1.expectString)(output.status),
        targetId: (0, smithy_client_1.expectString)(output.targetId),
        targetVersionWeight: (0, smithy_client_1.limitedParseDouble)(output.targetVersionWeight)
      };
    };
    var deserializeAws_json1_1CreateApplicationOutput = (output, context) => {
      return {
        applicationId: (0, smithy_client_1.expectString)(output.applicationId)
      };
    };
    var deserializeAws_json1_1CreateDeploymentConfigOutput = (output, context) => {
      return {
        deploymentConfigId: (0, smithy_client_1.expectString)(output.deploymentConfigId)
      };
    };
    var deserializeAws_json1_1CreateDeploymentGroupOutput = (output, context) => {
      return {
        deploymentGroupId: (0, smithy_client_1.expectString)(output.deploymentGroupId)
      };
    };
    var deserializeAws_json1_1CreateDeploymentOutput = (output, context) => {
      return {
        deploymentId: (0, smithy_client_1.expectString)(output.deploymentId)
      };
    };
    var deserializeAws_json1_1DeleteDeploymentGroupOutput = (output, context) => {
      return {
        hooksNotCleanedUp: output.hooksNotCleanedUp != null ? deserializeAws_json1_1AutoScalingGroupList(output.hooksNotCleanedUp, context) : void 0
      };
    };
    var deserializeAws_json1_1DeleteGitHubAccountTokenOutput = (output, context) => {
      return {
        tokenName: (0, smithy_client_1.expectString)(output.tokenName)
      };
    };
    var deserializeAws_json1_1DeleteResourcesByExternalIdOutput = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DeploymentAlreadyCompletedException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DeploymentConfigAlreadyExistsException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DeploymentConfigDoesNotExistException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DeploymentConfigInfo = (output, context) => {
      return {
        computePlatform: (0, smithy_client_1.expectString)(output.computePlatform),
        createTime: output.createTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createTime))) : void 0,
        deploymentConfigId: (0, smithy_client_1.expectString)(output.deploymentConfigId),
        deploymentConfigName: (0, smithy_client_1.expectString)(output.deploymentConfigName),
        minimumHealthyHosts: output.minimumHealthyHosts != null ? deserializeAws_json1_1MinimumHealthyHosts(output.minimumHealthyHosts, context) : void 0,
        trafficRoutingConfig: output.trafficRoutingConfig != null ? deserializeAws_json1_1TrafficRoutingConfig(output.trafficRoutingConfig, context) : void 0
      };
    };
    var deserializeAws_json1_1DeploymentConfigInUseException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DeploymentConfigLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DeploymentConfigNameRequiredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DeploymentConfigsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1DeploymentDoesNotExistException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DeploymentGroupAlreadyExistsException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DeploymentGroupDoesNotExistException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DeploymentGroupInfo = (output, context) => {
      return {
        alarmConfiguration: output.alarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.alarmConfiguration, context) : void 0,
        applicationName: (0, smithy_client_1.expectString)(output.applicationName),
        autoRollbackConfiguration: output.autoRollbackConfiguration != null ? deserializeAws_json1_1AutoRollbackConfiguration(output.autoRollbackConfiguration, context) : void 0,
        autoScalingGroups: output.autoScalingGroups != null ? deserializeAws_json1_1AutoScalingGroupList(output.autoScalingGroups, context) : void 0,
        blueGreenDeploymentConfiguration: output.blueGreenDeploymentConfiguration != null ? deserializeAws_json1_1BlueGreenDeploymentConfiguration(output.blueGreenDeploymentConfiguration, context) : void 0,
        computePlatform: (0, smithy_client_1.expectString)(output.computePlatform),
        deploymentConfigName: (0, smithy_client_1.expectString)(output.deploymentConfigName),
        deploymentGroupId: (0, smithy_client_1.expectString)(output.deploymentGroupId),
        deploymentGroupName: (0, smithy_client_1.expectString)(output.deploymentGroupName),
        deploymentStyle: output.deploymentStyle != null ? deserializeAws_json1_1DeploymentStyle(output.deploymentStyle, context) : void 0,
        ec2TagFilters: output.ec2TagFilters != null ? deserializeAws_json1_1EC2TagFilterList(output.ec2TagFilters, context) : void 0,
        ec2TagSet: output.ec2TagSet != null ? deserializeAws_json1_1EC2TagSet(output.ec2TagSet, context) : void 0,
        ecsServices: output.ecsServices != null ? deserializeAws_json1_1ECSServiceList(output.ecsServices, context) : void 0,
        lastAttemptedDeployment: output.lastAttemptedDeployment != null ? deserializeAws_json1_1LastDeploymentInfo(output.lastAttemptedDeployment, context) : void 0,
        lastSuccessfulDeployment: output.lastSuccessfulDeployment != null ? deserializeAws_json1_1LastDeploymentInfo(output.lastSuccessfulDeployment, context) : void 0,
        loadBalancerInfo: output.loadBalancerInfo != null ? deserializeAws_json1_1LoadBalancerInfo(output.loadBalancerInfo, context) : void 0,
        onPremisesInstanceTagFilters: output.onPremisesInstanceTagFilters != null ? deserializeAws_json1_1TagFilterList(output.onPremisesInstanceTagFilters, context) : void 0,
        onPremisesTagSet: output.onPremisesTagSet != null ? deserializeAws_json1_1OnPremisesTagSet(output.onPremisesTagSet, context) : void 0,
        outdatedInstancesStrategy: (0, smithy_client_1.expectString)(output.outdatedInstancesStrategy),
        serviceRoleArn: (0, smithy_client_1.expectString)(output.serviceRoleArn),
        targetRevision: output.targetRevision != null ? deserializeAws_json1_1RevisionLocation(output.targetRevision, context) : void 0,
        triggerConfigurations: output.triggerConfigurations != null ? deserializeAws_json1_1TriggerConfigList(output.triggerConfigurations, context) : void 0
      };
    };
    var deserializeAws_json1_1DeploymentGroupInfoList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DeploymentGroupInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1DeploymentGroupLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DeploymentGroupNameRequiredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DeploymentGroupsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1DeploymentIdRequiredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DeploymentInfo = (output, context) => {
      return {
        additionalDeploymentStatusInfo: (0, smithy_client_1.expectString)(output.additionalDeploymentStatusInfo),
        applicationName: (0, smithy_client_1.expectString)(output.applicationName),
        autoRollbackConfiguration: output.autoRollbackConfiguration != null ? deserializeAws_json1_1AutoRollbackConfiguration(output.autoRollbackConfiguration, context) : void 0,
        blueGreenDeploymentConfiguration: output.blueGreenDeploymentConfiguration != null ? deserializeAws_json1_1BlueGreenDeploymentConfiguration(output.blueGreenDeploymentConfiguration, context) : void 0,
        completeTime: output.completeTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.completeTime))) : void 0,
        computePlatform: (0, smithy_client_1.expectString)(output.computePlatform),
        createTime: output.createTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createTime))) : void 0,
        creator: (0, smithy_client_1.expectString)(output.creator),
        deploymentConfigName: (0, smithy_client_1.expectString)(output.deploymentConfigName),
        deploymentGroupName: (0, smithy_client_1.expectString)(output.deploymentGroupName),
        deploymentId: (0, smithy_client_1.expectString)(output.deploymentId),
        deploymentOverview: output.deploymentOverview != null ? deserializeAws_json1_1DeploymentOverview(output.deploymentOverview, context) : void 0,
        deploymentStatusMessages: output.deploymentStatusMessages != null ? deserializeAws_json1_1DeploymentStatusMessageList(output.deploymentStatusMessages, context) : void 0,
        deploymentStyle: output.deploymentStyle != null ? deserializeAws_json1_1DeploymentStyle(output.deploymentStyle, context) : void 0,
        description: (0, smithy_client_1.expectString)(output.description),
        errorInformation: output.errorInformation != null ? deserializeAws_json1_1ErrorInformation(output.errorInformation, context) : void 0,
        externalId: (0, smithy_client_1.expectString)(output.externalId),
        fileExistsBehavior: (0, smithy_client_1.expectString)(output.fileExistsBehavior),
        ignoreApplicationStopFailures: (0, smithy_client_1.expectBoolean)(output.ignoreApplicationStopFailures),
        instanceTerminationWaitTimeStarted: (0, smithy_client_1.expectBoolean)(output.instanceTerminationWaitTimeStarted),
        loadBalancerInfo: output.loadBalancerInfo != null ? deserializeAws_json1_1LoadBalancerInfo(output.loadBalancerInfo, context) : void 0,
        overrideAlarmConfiguration: output.overrideAlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.overrideAlarmConfiguration, context) : void 0,
        previousRevision: output.previousRevision != null ? deserializeAws_json1_1RevisionLocation(output.previousRevision, context) : void 0,
        relatedDeployments: output.relatedDeployments != null ? deserializeAws_json1_1RelatedDeployments(output.relatedDeployments, context) : void 0,
        revision: output.revision != null ? deserializeAws_json1_1RevisionLocation(output.revision, context) : void 0,
        rollbackInfo: output.rollbackInfo != null ? deserializeAws_json1_1RollbackInfo(output.rollbackInfo, context) : void 0,
        startTime: output.startTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.startTime))) : void 0,
        status: (0, smithy_client_1.expectString)(output.status),
        targetInstances: output.targetInstances != null ? deserializeAws_json1_1TargetInstances(output.targetInstances, context) : void 0,
        updateOutdatedInstancesOnly: (0, smithy_client_1.expectBoolean)(output.updateOutdatedInstancesOnly)
      };
    };
    var deserializeAws_json1_1DeploymentIsNotInReadyStateException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DeploymentLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DeploymentNotStartedException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DeploymentOverview = (output, context) => {
      return {
        Failed: (0, smithy_client_1.expectLong)(output.Failed),
        InProgress: (0, smithy_client_1.expectLong)(output.InProgress),
        Pending: (0, smithy_client_1.expectLong)(output.Pending),
        Ready: (0, smithy_client_1.expectLong)(output.Ready),
        Skipped: (0, smithy_client_1.expectLong)(output.Skipped),
        Succeeded: (0, smithy_client_1.expectLong)(output.Succeeded)
      };
    };
    var deserializeAws_json1_1DeploymentReadyOption = (output, context) => {
      return {
        actionOnTimeout: (0, smithy_client_1.expectString)(output.actionOnTimeout),
        waitTimeInMinutes: (0, smithy_client_1.expectInt32)(output.waitTimeInMinutes)
      };
    };
    var deserializeAws_json1_1DeploymentsInfoList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DeploymentInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1DeploymentsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1DeploymentStatusMessageList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1DeploymentStyle = (output, context) => {
      return {
        deploymentOption: (0, smithy_client_1.expectString)(output.deploymentOption),
        deploymentType: (0, smithy_client_1.expectString)(output.deploymentType)
      };
    };
    var deserializeAws_json1_1DeploymentTarget = (output, context) => {
      return {
        cloudFormationTarget: output.cloudFormationTarget != null ? deserializeAws_json1_1CloudFormationTarget(output.cloudFormationTarget, context) : void 0,
        deploymentTargetType: (0, smithy_client_1.expectString)(output.deploymentTargetType),
        ecsTarget: output.ecsTarget != null ? deserializeAws_json1_1ECSTarget(output.ecsTarget, context) : void 0,
        instanceTarget: output.instanceTarget != null ? deserializeAws_json1_1InstanceTarget(output.instanceTarget, context) : void 0,
        lambdaTarget: output.lambdaTarget != null ? deserializeAws_json1_1LambdaTarget(output.lambdaTarget, context) : void 0
      };
    };
    var deserializeAws_json1_1DeploymentTargetDoesNotExistException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DeploymentTargetIdRequiredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DeploymentTargetList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DeploymentTarget(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1DeploymentTargetListSizeExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1DescriptionTooLongException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1Diagnostics = (output, context) => {
      return {
        errorCode: (0, smithy_client_1.expectString)(output.errorCode),
        logTail: (0, smithy_client_1.expectString)(output.logTail),
        message: (0, smithy_client_1.expectString)(output.message),
        scriptName: (0, smithy_client_1.expectString)(output.scriptName)
      };
    };
    var deserializeAws_json1_1EC2TagFilter = (output, context) => {
      return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Type: (0, smithy_client_1.expectString)(output.Type),
        Value: (0, smithy_client_1.expectString)(output.Value)
      };
    };
    var deserializeAws_json1_1EC2TagFilterList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1EC2TagFilter(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1EC2TagSet = (output, context) => {
      return {
        ec2TagSetList: output.ec2TagSetList != null ? deserializeAws_json1_1EC2TagSetList(output.ec2TagSetList, context) : void 0
      };
    };
    var deserializeAws_json1_1EC2TagSetList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1EC2TagFilterList(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ECSService = (output, context) => {
      return {
        clusterName: (0, smithy_client_1.expectString)(output.clusterName),
        serviceName: (0, smithy_client_1.expectString)(output.serviceName)
      };
    };
    var deserializeAws_json1_1ECSServiceList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ECSService(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ECSServiceMappingLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ECSTarget = (output, context) => {
      return {
        deploymentId: (0, smithy_client_1.expectString)(output.deploymentId),
        lastUpdatedAt: output.lastUpdatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastUpdatedAt))) : void 0,
        lifecycleEvents: output.lifecycleEvents != null ? deserializeAws_json1_1LifecycleEventList(output.lifecycleEvents, context) : void 0,
        status: (0, smithy_client_1.expectString)(output.status),
        targetArn: (0, smithy_client_1.expectString)(output.targetArn),
        targetId: (0, smithy_client_1.expectString)(output.targetId),
        taskSetsInfo: output.taskSetsInfo != null ? deserializeAws_json1_1ECSTaskSetList(output.taskSetsInfo, context) : void 0
      };
    };
    var deserializeAws_json1_1ECSTaskSet = (output, context) => {
      return {
        desiredCount: (0, smithy_client_1.expectLong)(output.desiredCount),
        identifer: (0, smithy_client_1.expectString)(output.identifer),
        pendingCount: (0, smithy_client_1.expectLong)(output.pendingCount),
        runningCount: (0, smithy_client_1.expectLong)(output.runningCount),
        status: (0, smithy_client_1.expectString)(output.status),
        targetGroup: output.targetGroup != null ? deserializeAws_json1_1TargetGroupInfo(output.targetGroup, context) : void 0,
        taskSetLabel: (0, smithy_client_1.expectString)(output.taskSetLabel),
        trafficWeight: (0, smithy_client_1.limitedParseDouble)(output.trafficWeight)
      };
    };
    var deserializeAws_json1_1ECSTaskSetList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ECSTaskSet(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ELBInfo = (output, context) => {
      return {
        name: (0, smithy_client_1.expectString)(output.name)
      };
    };
    var deserializeAws_json1_1ELBInfoList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ELBInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ErrorInformation = (output, context) => {
      return {
        code: (0, smithy_client_1.expectString)(output.code),
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1GenericRevisionInfo = (output, context) => {
      return {
        deploymentGroups: output.deploymentGroups != null ? deserializeAws_json1_1DeploymentGroupsList(output.deploymentGroups, context) : void 0,
        description: (0, smithy_client_1.expectString)(output.description),
        firstUsedTime: output.firstUsedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.firstUsedTime))) : void 0,
        lastUsedTime: output.lastUsedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastUsedTime))) : void 0,
        registerTime: output.registerTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.registerTime))) : void 0
      };
    };
    var deserializeAws_json1_1GetApplicationOutput = (output, context) => {
      return {
        application: output.application != null ? deserializeAws_json1_1ApplicationInfo(output.application, context) : void 0
      };
    };
    var deserializeAws_json1_1GetApplicationRevisionOutput = (output, context) => {
      return {
        applicationName: (0, smithy_client_1.expectString)(output.applicationName),
        revision: output.revision != null ? deserializeAws_json1_1RevisionLocation(output.revision, context) : void 0,
        revisionInfo: output.revisionInfo != null ? deserializeAws_json1_1GenericRevisionInfo(output.revisionInfo, context) : void 0
      };
    };
    var deserializeAws_json1_1GetDeploymentConfigOutput = (output, context) => {
      return {
        deploymentConfigInfo: output.deploymentConfigInfo != null ? deserializeAws_json1_1DeploymentConfigInfo(output.deploymentConfigInfo, context) : void 0
      };
    };
    var deserializeAws_json1_1GetDeploymentGroupOutput = (output, context) => {
      return {
        deploymentGroupInfo: output.deploymentGroupInfo != null ? deserializeAws_json1_1DeploymentGroupInfo(output.deploymentGroupInfo, context) : void 0
      };
    };
    var deserializeAws_json1_1GetDeploymentInstanceOutput = (output, context) => {
      return {
        instanceSummary: output.instanceSummary != null ? deserializeAws_json1_1InstanceSummary(output.instanceSummary, context) : void 0
      };
    };
    var deserializeAws_json1_1GetDeploymentOutput = (output, context) => {
      return {
        deploymentInfo: output.deploymentInfo != null ? deserializeAws_json1_1DeploymentInfo(output.deploymentInfo, context) : void 0
      };
    };
    var deserializeAws_json1_1GetDeploymentTargetOutput = (output, context) => {
      return {
        deploymentTarget: output.deploymentTarget != null ? deserializeAws_json1_1DeploymentTarget(output.deploymentTarget, context) : void 0
      };
    };
    var deserializeAws_json1_1GetOnPremisesInstanceOutput = (output, context) => {
      return {
        instanceInfo: output.instanceInfo != null ? deserializeAws_json1_1InstanceInfo(output.instanceInfo, context) : void 0
      };
    };
    var deserializeAws_json1_1GitHubAccountTokenDoesNotExistException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1GitHubAccountTokenNameList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1GitHubAccountTokenNameRequiredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1GitHubLocation = (output, context) => {
      return {
        commitId: (0, smithy_client_1.expectString)(output.commitId),
        repository: (0, smithy_client_1.expectString)(output.repository)
      };
    };
    var deserializeAws_json1_1GreenFleetProvisioningOption = (output, context) => {
      return {
        action: (0, smithy_client_1.expectString)(output.action)
      };
    };
    var deserializeAws_json1_1IamArnRequiredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1IamSessionArnAlreadyRegisteredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1IamUserArnAlreadyRegisteredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1IamUserArnRequiredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InstanceDoesNotExistException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InstanceIdRequiredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InstanceInfo = (output, context) => {
      return {
        deregisterTime: output.deregisterTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.deregisterTime))) : void 0,
        iamSessionArn: (0, smithy_client_1.expectString)(output.iamSessionArn),
        iamUserArn: (0, smithy_client_1.expectString)(output.iamUserArn),
        instanceArn: (0, smithy_client_1.expectString)(output.instanceArn),
        instanceName: (0, smithy_client_1.expectString)(output.instanceName),
        registerTime: output.registerTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.registerTime))) : void 0,
        tags: output.tags != null ? deserializeAws_json1_1TagList(output.tags, context) : void 0
      };
    };
    var deserializeAws_json1_1InstanceInfoList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InstanceInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InstanceLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InstanceNameAlreadyRegisteredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InstanceNameList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1InstanceNameRequiredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InstanceNotRegisteredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InstancesList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1InstanceSummary = (output, context) => {
      return {
        deploymentId: (0, smithy_client_1.expectString)(output.deploymentId),
        instanceId: (0, smithy_client_1.expectString)(output.instanceId),
        instanceType: (0, smithy_client_1.expectString)(output.instanceType),
        lastUpdatedAt: output.lastUpdatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastUpdatedAt))) : void 0,
        lifecycleEvents: output.lifecycleEvents != null ? deserializeAws_json1_1LifecycleEventList(output.lifecycleEvents, context) : void 0,
        status: (0, smithy_client_1.expectString)(output.status)
      };
    };
    var deserializeAws_json1_1InstanceSummaryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InstanceSummary(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InstanceTarget = (output, context) => {
      return {
        deploymentId: (0, smithy_client_1.expectString)(output.deploymentId),
        instanceLabel: (0, smithy_client_1.expectString)(output.instanceLabel),
        lastUpdatedAt: output.lastUpdatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastUpdatedAt))) : void 0,
        lifecycleEvents: output.lifecycleEvents != null ? deserializeAws_json1_1LifecycleEventList(output.lifecycleEvents, context) : void 0,
        status: (0, smithy_client_1.expectString)(output.status),
        targetArn: (0, smithy_client_1.expectString)(output.targetArn),
        targetId: (0, smithy_client_1.expectString)(output.targetId)
      };
    };
    var deserializeAws_json1_1InvalidAlarmConfigException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidApplicationNameException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidArnException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidAutoRollbackConfigException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidAutoScalingGroupException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidBlueGreenDeploymentConfigurationException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidBucketNameFilterException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidComputePlatformException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidDeployedStateFilterException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidDeploymentConfigNameException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidDeploymentGroupNameException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidDeploymentIdException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidDeploymentInstanceTypeException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidDeploymentStatusException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidDeploymentStyleException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidDeploymentTargetIdException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidDeploymentWaitTypeException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidEC2TagCombinationException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidEC2TagException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidECSServiceException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidExternalIdException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidFileExistsBehaviorException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidGitHubAccountTokenException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidGitHubAccountTokenNameException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidIamSessionArnException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidIamUserArnException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidIgnoreApplicationStopFailuresValueException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidInputException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidInstanceNameException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidInstanceStatusException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidInstanceTypeException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidKeyPrefixFilterException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidLifecycleEventHookExecutionIdException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidLifecycleEventHookExecutionStatusException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidLoadBalancerInfoException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidMinimumHealthyHostValueException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidNextTokenException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidOnPremisesTagCombinationException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidOperationException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidRegistrationStatusException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidRevisionException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidRoleException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidSortByException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidSortOrderException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidTagException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidTagFilterException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidTagsToAddException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidTargetFilterNameException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidTargetGroupPairException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidTargetInstancesException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidTimeRangeException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidTrafficRoutingConfigurationException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidTriggerConfigException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidUpdateOutdatedInstancesOnlyValueException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1LambdaFunctionInfo = (output, context) => {
      return {
        currentVersion: (0, smithy_client_1.expectString)(output.currentVersion),
        functionAlias: (0, smithy_client_1.expectString)(output.functionAlias),
        functionName: (0, smithy_client_1.expectString)(output.functionName),
        targetVersion: (0, smithy_client_1.expectString)(output.targetVersion),
        targetVersionWeight: (0, smithy_client_1.limitedParseDouble)(output.targetVersionWeight)
      };
    };
    var deserializeAws_json1_1LambdaTarget = (output, context) => {
      return {
        deploymentId: (0, smithy_client_1.expectString)(output.deploymentId),
        lambdaFunctionInfo: output.lambdaFunctionInfo != null ? deserializeAws_json1_1LambdaFunctionInfo(output.lambdaFunctionInfo, context) : void 0,
        lastUpdatedAt: output.lastUpdatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastUpdatedAt))) : void 0,
        lifecycleEvents: output.lifecycleEvents != null ? deserializeAws_json1_1LifecycleEventList(output.lifecycleEvents, context) : void 0,
        status: (0, smithy_client_1.expectString)(output.status),
        targetArn: (0, smithy_client_1.expectString)(output.targetArn),
        targetId: (0, smithy_client_1.expectString)(output.targetId)
      };
    };
    var deserializeAws_json1_1LastDeploymentInfo = (output, context) => {
      return {
        createTime: output.createTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createTime))) : void 0,
        deploymentId: (0, smithy_client_1.expectString)(output.deploymentId),
        endTime: output.endTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.endTime))) : void 0,
        status: (0, smithy_client_1.expectString)(output.status)
      };
    };
    var deserializeAws_json1_1LifecycleEvent = (output, context) => {
      return {
        diagnostics: output.diagnostics != null ? deserializeAws_json1_1Diagnostics(output.diagnostics, context) : void 0,
        endTime: output.endTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.endTime))) : void 0,
        lifecycleEventName: (0, smithy_client_1.expectString)(output.lifecycleEventName),
        startTime: output.startTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.startTime))) : void 0,
        status: (0, smithy_client_1.expectString)(output.status)
      };
    };
    var deserializeAws_json1_1LifecycleEventAlreadyCompletedException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1LifecycleEventList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1LifecycleEvent(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1LifecycleHookLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ListApplicationRevisionsOutput = (output, context) => {
      return {
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
        revisions: output.revisions != null ? deserializeAws_json1_1RevisionLocationList(output.revisions, context) : void 0
      };
    };
    var deserializeAws_json1_1ListApplicationsOutput = (output, context) => {
      return {
        applications: output.applications != null ? deserializeAws_json1_1ApplicationsList(output.applications, context) : void 0,
        nextToken: (0, smithy_client_1.expectString)(output.nextToken)
      };
    };
    var deserializeAws_json1_1ListDeploymentConfigsOutput = (output, context) => {
      return {
        deploymentConfigsList: output.deploymentConfigsList != null ? deserializeAws_json1_1DeploymentConfigsList(output.deploymentConfigsList, context) : void 0,
        nextToken: (0, smithy_client_1.expectString)(output.nextToken)
      };
    };
    var deserializeAws_json1_1ListDeploymentGroupsOutput = (output, context) => {
      return {
        applicationName: (0, smithy_client_1.expectString)(output.applicationName),
        deploymentGroups: output.deploymentGroups != null ? deserializeAws_json1_1DeploymentGroupsList(output.deploymentGroups, context) : void 0,
        nextToken: (0, smithy_client_1.expectString)(output.nextToken)
      };
    };
    var deserializeAws_json1_1ListDeploymentInstancesOutput = (output, context) => {
      return {
        instancesList: output.instancesList != null ? deserializeAws_json1_1InstancesList(output.instancesList, context) : void 0,
        nextToken: (0, smithy_client_1.expectString)(output.nextToken)
      };
    };
    var deserializeAws_json1_1ListDeploymentsOutput = (output, context) => {
      return {
        deployments: output.deployments != null ? deserializeAws_json1_1DeploymentsList(output.deployments, context) : void 0,
        nextToken: (0, smithy_client_1.expectString)(output.nextToken)
      };
    };
    var deserializeAws_json1_1ListDeploymentTargetsOutput = (output, context) => {
      return {
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
        targetIds: output.targetIds != null ? deserializeAws_json1_1TargetIdList(output.targetIds, context) : void 0
      };
    };
    var deserializeAws_json1_1ListenerArnList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1ListGitHubAccountTokenNamesOutput = (output, context) => {
      return {
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
        tokenNameList: output.tokenNameList != null ? deserializeAws_json1_1GitHubAccountTokenNameList(output.tokenNameList, context) : void 0
      };
    };
    var deserializeAws_json1_1ListOnPremisesInstancesOutput = (output, context) => {
      return {
        instanceNames: output.instanceNames != null ? deserializeAws_json1_1InstanceNameList(output.instanceNames, context) : void 0,
        nextToken: (0, smithy_client_1.expectString)(output.nextToken)
      };
    };
    var deserializeAws_json1_1ListTagsForResourceOutput = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Tags: output.Tags != null ? deserializeAws_json1_1TagList(output.Tags, context) : void 0
      };
    };
    var deserializeAws_json1_1LoadBalancerInfo = (output, context) => {
      return {
        elbInfoList: output.elbInfoList != null ? deserializeAws_json1_1ELBInfoList(output.elbInfoList, context) : void 0,
        targetGroupInfoList: output.targetGroupInfoList != null ? deserializeAws_json1_1TargetGroupInfoList(output.targetGroupInfoList, context) : void 0,
        targetGroupPairInfoList: output.targetGroupPairInfoList != null ? deserializeAws_json1_1TargetGroupPairInfoList(output.targetGroupPairInfoList, context) : void 0
      };
    };
    var deserializeAws_json1_1MinimumHealthyHosts = (output, context) => {
      return {
        type: (0, smithy_client_1.expectString)(output.type),
        value: (0, smithy_client_1.expectInt32)(output.value)
      };
    };
    var deserializeAws_json1_1MultipleIamArnsProvidedException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1OnPremisesTagSet = (output, context) => {
      return {
        onPremisesTagSetList: output.onPremisesTagSetList != null ? deserializeAws_json1_1OnPremisesTagSetList(output.onPremisesTagSetList, context) : void 0
      };
    };
    var deserializeAws_json1_1OnPremisesTagSetList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1TagFilterList(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1OperationNotSupportedException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1PutLifecycleEventHookExecutionStatusOutput = (output, context) => {
      return {
        lifecycleEventHookExecutionId: (0, smithy_client_1.expectString)(output.lifecycleEventHookExecutionId)
      };
    };
    var deserializeAws_json1_1RawString = (output, context) => {
      return {
        content: (0, smithy_client_1.expectString)(output.content),
        sha256: (0, smithy_client_1.expectString)(output.sha256)
      };
    };
    var deserializeAws_json1_1RelatedDeployments = (output, context) => {
      return {
        autoUpdateOutdatedInstancesDeploymentIds: output.autoUpdateOutdatedInstancesDeploymentIds != null ? deserializeAws_json1_1DeploymentsList(output.autoUpdateOutdatedInstancesDeploymentIds, context) : void 0,
        autoUpdateOutdatedInstancesRootDeploymentId: (0, smithy_client_1.expectString)(output.autoUpdateOutdatedInstancesRootDeploymentId)
      };
    };
    var deserializeAws_json1_1ResourceArnRequiredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ResourceValidationException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1RevisionDoesNotExistException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1RevisionInfo = (output, context) => {
      return {
        genericRevisionInfo: output.genericRevisionInfo != null ? deserializeAws_json1_1GenericRevisionInfo(output.genericRevisionInfo, context) : void 0,
        revisionLocation: output.revisionLocation != null ? deserializeAws_json1_1RevisionLocation(output.revisionLocation, context) : void 0
      };
    };
    var deserializeAws_json1_1RevisionInfoList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1RevisionInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1RevisionLocation = (output, context) => {
      return {
        appSpecContent: output.appSpecContent != null ? deserializeAws_json1_1AppSpecContent(output.appSpecContent, context) : void 0,
        gitHubLocation: output.gitHubLocation != null ? deserializeAws_json1_1GitHubLocation(output.gitHubLocation, context) : void 0,
        revisionType: (0, smithy_client_1.expectString)(output.revisionType),
        s3Location: output.s3Location != null ? deserializeAws_json1_1S3Location(output.s3Location, context) : void 0,
        string: output.string != null ? deserializeAws_json1_1RawString(output.string, context) : void 0
      };
    };
    var deserializeAws_json1_1RevisionLocationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1RevisionLocation(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1RevisionRequiredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1RoleRequiredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1RollbackInfo = (output, context) => {
      return {
        rollbackDeploymentId: (0, smithy_client_1.expectString)(output.rollbackDeploymentId),
        rollbackMessage: (0, smithy_client_1.expectString)(output.rollbackMessage),
        rollbackTriggeringDeploymentId: (0, smithy_client_1.expectString)(output.rollbackTriggeringDeploymentId)
      };
    };
    var deserializeAws_json1_1S3Location = (output, context) => {
      return {
        bucket: (0, smithy_client_1.expectString)(output.bucket),
        bundleType: (0, smithy_client_1.expectString)(output.bundleType),
        eTag: (0, smithy_client_1.expectString)(output.eTag),
        key: (0, smithy_client_1.expectString)(output.key),
        version: (0, smithy_client_1.expectString)(output.version)
      };
    };
    var deserializeAws_json1_1StopDeploymentOutput = (output, context) => {
      return {
        status: (0, smithy_client_1.expectString)(output.status),
        statusMessage: (0, smithy_client_1.expectString)(output.statusMessage)
      };
    };
    var deserializeAws_json1_1Tag = (output, context) => {
      return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Value: (0, smithy_client_1.expectString)(output.Value)
      };
    };
    var deserializeAws_json1_1TagFilter = (output, context) => {
      return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Type: (0, smithy_client_1.expectString)(output.Type),
        Value: (0, smithy_client_1.expectString)(output.Value)
      };
    };
    var deserializeAws_json1_1TagFilterList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1TagFilter(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1TagLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1TagList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Tag(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1TagRequiredException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1TagResourceOutput = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1TagSetListLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1TargetGroupInfo = (output, context) => {
      return {
        name: (0, smithy_client_1.expectString)(output.name)
      };
    };
    var deserializeAws_json1_1TargetGroupInfoList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1TargetGroupInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1TargetGroupPairInfo = (output, context) => {
      return {
        prodTrafficRoute: output.prodTrafficRoute != null ? deserializeAws_json1_1TrafficRoute(output.prodTrafficRoute, context) : void 0,
        targetGroups: output.targetGroups != null ? deserializeAws_json1_1TargetGroupInfoList(output.targetGroups, context) : void 0,
        testTrafficRoute: output.testTrafficRoute != null ? deserializeAws_json1_1TrafficRoute(output.testTrafficRoute, context) : void 0
      };
    };
    var deserializeAws_json1_1TargetGroupPairInfoList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1TargetGroupPairInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1TargetIdList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1TargetInstances = (output, context) => {
      return {
        autoScalingGroups: output.autoScalingGroups != null ? deserializeAws_json1_1AutoScalingGroupNameList(output.autoScalingGroups, context) : void 0,
        ec2TagSet: output.ec2TagSet != null ? deserializeAws_json1_1EC2TagSet(output.ec2TagSet, context) : void 0,
        tagFilters: output.tagFilters != null ? deserializeAws_json1_1EC2TagFilterList(output.tagFilters, context) : void 0
      };
    };
    var deserializeAws_json1_1ThrottlingException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1TimeBasedCanary = (output, context) => {
      return {
        canaryInterval: (0, smithy_client_1.expectInt32)(output.canaryInterval),
        canaryPercentage: (0, smithy_client_1.expectInt32)(output.canaryPercentage)
      };
    };
    var deserializeAws_json1_1TimeBasedLinear = (output, context) => {
      return {
        linearInterval: (0, smithy_client_1.expectInt32)(output.linearInterval),
        linearPercentage: (0, smithy_client_1.expectInt32)(output.linearPercentage)
      };
    };
    var deserializeAws_json1_1TrafficRoute = (output, context) => {
      return {
        listenerArns: output.listenerArns != null ? deserializeAws_json1_1ListenerArnList(output.listenerArns, context) : void 0
      };
    };
    var deserializeAws_json1_1TrafficRoutingConfig = (output, context) => {
      return {
        timeBasedCanary: output.timeBasedCanary != null ? deserializeAws_json1_1TimeBasedCanary(output.timeBasedCanary, context) : void 0,
        timeBasedLinear: output.timeBasedLinear != null ? deserializeAws_json1_1TimeBasedLinear(output.timeBasedLinear, context) : void 0,
        type: (0, smithy_client_1.expectString)(output.type)
      };
    };
    var deserializeAws_json1_1TriggerConfig = (output, context) => {
      return {
        triggerEvents: output.triggerEvents != null ? deserializeAws_json1_1TriggerEventTypeList(output.triggerEvents, context) : void 0,
        triggerName: (0, smithy_client_1.expectString)(output.triggerName),
        triggerTargetArn: (0, smithy_client_1.expectString)(output.triggerTargetArn)
      };
    };
    var deserializeAws_json1_1TriggerConfigList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1TriggerConfig(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1TriggerEventTypeList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1TriggerTargetsLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1UnsupportedActionForDeploymentTypeException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1UntagResourceOutput = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1UpdateDeploymentGroupOutput = (output, context) => {
      return {
        hooksNotCleanedUp: output.hooksNotCleanedUp != null ? deserializeAws_json1_1AutoScalingGroupList(output.hooksNotCleanedUp, context) : void 0
      };
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/AddTagsToOnPremisesInstancesCommand.js
var require_AddTagsToOnPremisesInstancesCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/AddTagsToOnPremisesInstancesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AddTagsToOnPremisesInstancesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var AddTagsToOnPremisesInstancesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AddTagsToOnPremisesInstancesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "AddTagsToOnPremisesInstancesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AddTagsToOnPremisesInstancesInputFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1AddTagsToOnPremisesInstancesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1AddTagsToOnPremisesInstancesCommand)(output, context);
      }
    };
    exports2.AddTagsToOnPremisesInstancesCommand = AddTagsToOnPremisesInstancesCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/BatchGetApplicationRevisionsCommand.js
var require_BatchGetApplicationRevisionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/BatchGetApplicationRevisionsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BatchGetApplicationRevisionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var BatchGetApplicationRevisionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, BatchGetApplicationRevisionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "BatchGetApplicationRevisionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchGetApplicationRevisionsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.BatchGetApplicationRevisionsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1BatchGetApplicationRevisionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1BatchGetApplicationRevisionsCommand)(output, context);
      }
    };
    exports2.BatchGetApplicationRevisionsCommand = BatchGetApplicationRevisionsCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/BatchGetApplicationsCommand.js
var require_BatchGetApplicationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/BatchGetApplicationsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BatchGetApplicationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var BatchGetApplicationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, BatchGetApplicationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "BatchGetApplicationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchGetApplicationsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.BatchGetApplicationsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1BatchGetApplicationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1BatchGetApplicationsCommand)(output, context);
      }
    };
    exports2.BatchGetApplicationsCommand = BatchGetApplicationsCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/BatchGetDeploymentGroupsCommand.js
var require_BatchGetDeploymentGroupsCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/BatchGetDeploymentGroupsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BatchGetDeploymentGroupsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var BatchGetDeploymentGroupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, BatchGetDeploymentGroupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "BatchGetDeploymentGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchGetDeploymentGroupsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.BatchGetDeploymentGroupsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1BatchGetDeploymentGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1BatchGetDeploymentGroupsCommand)(output, context);
      }
    };
    exports2.BatchGetDeploymentGroupsCommand = BatchGetDeploymentGroupsCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/BatchGetDeploymentInstancesCommand.js
var require_BatchGetDeploymentInstancesCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/BatchGetDeploymentInstancesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BatchGetDeploymentInstancesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var BatchGetDeploymentInstancesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, BatchGetDeploymentInstancesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "BatchGetDeploymentInstancesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchGetDeploymentInstancesInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.BatchGetDeploymentInstancesOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1BatchGetDeploymentInstancesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1BatchGetDeploymentInstancesCommand)(output, context);
      }
    };
    exports2.BatchGetDeploymentInstancesCommand = BatchGetDeploymentInstancesCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/BatchGetDeploymentsCommand.js
var require_BatchGetDeploymentsCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/BatchGetDeploymentsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BatchGetDeploymentsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var BatchGetDeploymentsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, BatchGetDeploymentsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "BatchGetDeploymentsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchGetDeploymentsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.BatchGetDeploymentsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1BatchGetDeploymentsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1BatchGetDeploymentsCommand)(output, context);
      }
    };
    exports2.BatchGetDeploymentsCommand = BatchGetDeploymentsCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/BatchGetDeploymentTargetsCommand.js
var require_BatchGetDeploymentTargetsCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/BatchGetDeploymentTargetsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BatchGetDeploymentTargetsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var BatchGetDeploymentTargetsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, BatchGetDeploymentTargetsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "BatchGetDeploymentTargetsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchGetDeploymentTargetsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.BatchGetDeploymentTargetsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1BatchGetDeploymentTargetsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1BatchGetDeploymentTargetsCommand)(output, context);
      }
    };
    exports2.BatchGetDeploymentTargetsCommand = BatchGetDeploymentTargetsCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/BatchGetOnPremisesInstancesCommand.js
var require_BatchGetOnPremisesInstancesCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/BatchGetOnPremisesInstancesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BatchGetOnPremisesInstancesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var BatchGetOnPremisesInstancesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, BatchGetOnPremisesInstancesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "BatchGetOnPremisesInstancesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchGetOnPremisesInstancesInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.BatchGetOnPremisesInstancesOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1BatchGetOnPremisesInstancesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1BatchGetOnPremisesInstancesCommand)(output, context);
      }
    };
    exports2.BatchGetOnPremisesInstancesCommand = BatchGetOnPremisesInstancesCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ContinueDeploymentCommand.js
var require_ContinueDeploymentCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ContinueDeploymentCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ContinueDeploymentCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ContinueDeploymentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ContinueDeploymentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "ContinueDeploymentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ContinueDeploymentInputFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ContinueDeploymentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ContinueDeploymentCommand)(output, context);
      }
    };
    exports2.ContinueDeploymentCommand = ContinueDeploymentCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/CreateApplicationCommand.js
var require_CreateApplicationCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/CreateApplicationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateApplicationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateApplicationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateApplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "CreateApplicationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateApplicationInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateApplicationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateApplicationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateApplicationCommand)(output, context);
      }
    };
    exports2.CreateApplicationCommand = CreateApplicationCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/CreateDeploymentCommand.js
var require_CreateDeploymentCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/CreateDeploymentCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateDeploymentCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateDeploymentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateDeploymentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "CreateDeploymentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateDeploymentInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateDeploymentOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateDeploymentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateDeploymentCommand)(output, context);
      }
    };
    exports2.CreateDeploymentCommand = CreateDeploymentCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/CreateDeploymentConfigCommand.js
var require_CreateDeploymentConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/CreateDeploymentConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateDeploymentConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateDeploymentConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateDeploymentConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "CreateDeploymentConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateDeploymentConfigInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateDeploymentConfigOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateDeploymentConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateDeploymentConfigCommand)(output, context);
      }
    };
    exports2.CreateDeploymentConfigCommand = CreateDeploymentConfigCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/CreateDeploymentGroupCommand.js
var require_CreateDeploymentGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/CreateDeploymentGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateDeploymentGroupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateDeploymentGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateDeploymentGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "CreateDeploymentGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateDeploymentGroupInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateDeploymentGroupOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateDeploymentGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateDeploymentGroupCommand)(output, context);
      }
    };
    exports2.CreateDeploymentGroupCommand = CreateDeploymentGroupCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/DeleteApplicationCommand.js
var require_DeleteApplicationCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/DeleteApplicationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteApplicationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteApplicationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteApplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "DeleteApplicationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteApplicationInputFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteApplicationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteApplicationCommand)(output, context);
      }
    };
    exports2.DeleteApplicationCommand = DeleteApplicationCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/DeleteDeploymentConfigCommand.js
var require_DeleteDeploymentConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/DeleteDeploymentConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteDeploymentConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteDeploymentConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteDeploymentConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "DeleteDeploymentConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteDeploymentConfigInputFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteDeploymentConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteDeploymentConfigCommand)(output, context);
      }
    };
    exports2.DeleteDeploymentConfigCommand = DeleteDeploymentConfigCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/DeleteDeploymentGroupCommand.js
var require_DeleteDeploymentGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/DeleteDeploymentGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteDeploymentGroupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteDeploymentGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteDeploymentGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "DeleteDeploymentGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteDeploymentGroupInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteDeploymentGroupOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteDeploymentGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteDeploymentGroupCommand)(output, context);
      }
    };
    exports2.DeleteDeploymentGroupCommand = DeleteDeploymentGroupCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/DeleteGitHubAccountTokenCommand.js
var require_DeleteGitHubAccountTokenCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/DeleteGitHubAccountTokenCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteGitHubAccountTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteGitHubAccountTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteGitHubAccountTokenCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "DeleteGitHubAccountTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteGitHubAccountTokenInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteGitHubAccountTokenOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteGitHubAccountTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteGitHubAccountTokenCommand)(output, context);
      }
    };
    exports2.DeleteGitHubAccountTokenCommand = DeleteGitHubAccountTokenCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/DeleteResourcesByExternalIdCommand.js
var require_DeleteResourcesByExternalIdCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/DeleteResourcesByExternalIdCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteResourcesByExternalIdCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteResourcesByExternalIdCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteResourcesByExternalIdCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "DeleteResourcesByExternalIdCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteResourcesByExternalIdInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteResourcesByExternalIdOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteResourcesByExternalIdCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteResourcesByExternalIdCommand)(output, context);
      }
    };
    exports2.DeleteResourcesByExternalIdCommand = DeleteResourcesByExternalIdCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/DeregisterOnPremisesInstanceCommand.js
var require_DeregisterOnPremisesInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/DeregisterOnPremisesInstanceCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeregisterOnPremisesInstanceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeregisterOnPremisesInstanceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeregisterOnPremisesInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "DeregisterOnPremisesInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeregisterOnPremisesInstanceInputFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeregisterOnPremisesInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeregisterOnPremisesInstanceCommand)(output, context);
      }
    };
    exports2.DeregisterOnPremisesInstanceCommand = DeregisterOnPremisesInstanceCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/GetApplicationCommand.js
var require_GetApplicationCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/GetApplicationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetApplicationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetApplicationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetApplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "GetApplicationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetApplicationInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetApplicationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetApplicationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetApplicationCommand)(output, context);
      }
    };
    exports2.GetApplicationCommand = GetApplicationCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/GetApplicationRevisionCommand.js
var require_GetApplicationRevisionCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/GetApplicationRevisionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetApplicationRevisionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetApplicationRevisionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetApplicationRevisionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "GetApplicationRevisionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetApplicationRevisionInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetApplicationRevisionOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetApplicationRevisionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetApplicationRevisionCommand)(output, context);
      }
    };
    exports2.GetApplicationRevisionCommand = GetApplicationRevisionCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/GetDeploymentCommand.js
var require_GetDeploymentCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/GetDeploymentCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetDeploymentCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetDeploymentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetDeploymentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "GetDeploymentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetDeploymentInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetDeploymentOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetDeploymentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetDeploymentCommand)(output, context);
      }
    };
    exports2.GetDeploymentCommand = GetDeploymentCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/GetDeploymentConfigCommand.js
var require_GetDeploymentConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/GetDeploymentConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetDeploymentConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetDeploymentConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetDeploymentConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "GetDeploymentConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetDeploymentConfigInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetDeploymentConfigOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetDeploymentConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetDeploymentConfigCommand)(output, context);
      }
    };
    exports2.GetDeploymentConfigCommand = GetDeploymentConfigCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/GetDeploymentGroupCommand.js
var require_GetDeploymentGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/GetDeploymentGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetDeploymentGroupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetDeploymentGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetDeploymentGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "GetDeploymentGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetDeploymentGroupInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetDeploymentGroupOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetDeploymentGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetDeploymentGroupCommand)(output, context);
      }
    };
    exports2.GetDeploymentGroupCommand = GetDeploymentGroupCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/GetDeploymentInstanceCommand.js
var require_GetDeploymentInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/GetDeploymentInstanceCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetDeploymentInstanceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetDeploymentInstanceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetDeploymentInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "GetDeploymentInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetDeploymentInstanceInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetDeploymentInstanceOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetDeploymentInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetDeploymentInstanceCommand)(output, context);
      }
    };
    exports2.GetDeploymentInstanceCommand = GetDeploymentInstanceCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/GetDeploymentTargetCommand.js
var require_GetDeploymentTargetCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/GetDeploymentTargetCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetDeploymentTargetCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetDeploymentTargetCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetDeploymentTargetCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "GetDeploymentTargetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetDeploymentTargetInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetDeploymentTargetOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetDeploymentTargetCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetDeploymentTargetCommand)(output, context);
      }
    };
    exports2.GetDeploymentTargetCommand = GetDeploymentTargetCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/GetOnPremisesInstanceCommand.js
var require_GetOnPremisesInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/GetOnPremisesInstanceCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetOnPremisesInstanceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetOnPremisesInstanceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetOnPremisesInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "GetOnPremisesInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetOnPremisesInstanceInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetOnPremisesInstanceOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetOnPremisesInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetOnPremisesInstanceCommand)(output, context);
      }
    };
    exports2.GetOnPremisesInstanceCommand = GetOnPremisesInstanceCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListApplicationRevisionsCommand.js
var require_ListApplicationRevisionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListApplicationRevisionsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListApplicationRevisionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListApplicationRevisionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListApplicationRevisionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "ListApplicationRevisionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListApplicationRevisionsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListApplicationRevisionsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListApplicationRevisionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListApplicationRevisionsCommand)(output, context);
      }
    };
    exports2.ListApplicationRevisionsCommand = ListApplicationRevisionsCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListApplicationsCommand.js
var require_ListApplicationsCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListApplicationsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListApplicationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListApplicationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListApplicationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "ListApplicationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListApplicationsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListApplicationsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListApplicationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListApplicationsCommand)(output, context);
      }
    };
    exports2.ListApplicationsCommand = ListApplicationsCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListDeploymentConfigsCommand.js
var require_ListDeploymentConfigsCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListDeploymentConfigsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListDeploymentConfigsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListDeploymentConfigsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListDeploymentConfigsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "ListDeploymentConfigsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListDeploymentConfigsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListDeploymentConfigsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListDeploymentConfigsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListDeploymentConfigsCommand)(output, context);
      }
    };
    exports2.ListDeploymentConfigsCommand = ListDeploymentConfigsCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListDeploymentGroupsCommand.js
var require_ListDeploymentGroupsCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListDeploymentGroupsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListDeploymentGroupsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListDeploymentGroupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListDeploymentGroupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "ListDeploymentGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListDeploymentGroupsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListDeploymentGroupsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListDeploymentGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListDeploymentGroupsCommand)(output, context);
      }
    };
    exports2.ListDeploymentGroupsCommand = ListDeploymentGroupsCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListDeploymentInstancesCommand.js
var require_ListDeploymentInstancesCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListDeploymentInstancesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListDeploymentInstancesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListDeploymentInstancesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListDeploymentInstancesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "ListDeploymentInstancesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListDeploymentInstancesInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListDeploymentInstancesOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListDeploymentInstancesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListDeploymentInstancesCommand)(output, context);
      }
    };
    exports2.ListDeploymentInstancesCommand = ListDeploymentInstancesCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListDeploymentsCommand.js
var require_ListDeploymentsCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListDeploymentsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListDeploymentsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListDeploymentsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListDeploymentsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "ListDeploymentsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListDeploymentsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListDeploymentsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListDeploymentsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListDeploymentsCommand)(output, context);
      }
    };
    exports2.ListDeploymentsCommand = ListDeploymentsCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListDeploymentTargetsCommand.js
var require_ListDeploymentTargetsCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListDeploymentTargetsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListDeploymentTargetsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListDeploymentTargetsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListDeploymentTargetsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "ListDeploymentTargetsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListDeploymentTargetsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListDeploymentTargetsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListDeploymentTargetsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListDeploymentTargetsCommand)(output, context);
      }
    };
    exports2.ListDeploymentTargetsCommand = ListDeploymentTargetsCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListGitHubAccountTokenNamesCommand.js
var require_ListGitHubAccountTokenNamesCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListGitHubAccountTokenNamesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListGitHubAccountTokenNamesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListGitHubAccountTokenNamesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListGitHubAccountTokenNamesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "ListGitHubAccountTokenNamesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListGitHubAccountTokenNamesInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListGitHubAccountTokenNamesOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListGitHubAccountTokenNamesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListGitHubAccountTokenNamesCommand)(output, context);
      }
    };
    exports2.ListGitHubAccountTokenNamesCommand = ListGitHubAccountTokenNamesCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListOnPremisesInstancesCommand.js
var require_ListOnPremisesInstancesCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListOnPremisesInstancesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListOnPremisesInstancesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListOnPremisesInstancesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListOnPremisesInstancesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "ListOnPremisesInstancesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListOnPremisesInstancesInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListOnPremisesInstancesOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListOnPremisesInstancesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListOnPremisesInstancesCommand)(output, context);
      }
    };
    exports2.ListOnPremisesInstancesCommand = ListOnPremisesInstancesCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListTagsForResourceCommand.js
var require_ListTagsForResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/ListTagsForResourceCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListTagsForResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListTagsForResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListTagsForResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "ListTagsForResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListTagsForResourceInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListTagsForResourceOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListTagsForResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListTagsForResourceCommand)(output, context);
      }
    };
    exports2.ListTagsForResourceCommand = ListTagsForResourceCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/PutLifecycleEventHookExecutionStatusCommand.js
var require_PutLifecycleEventHookExecutionStatusCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/PutLifecycleEventHookExecutionStatusCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutLifecycleEventHookExecutionStatusCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var PutLifecycleEventHookExecutionStatusCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutLifecycleEventHookExecutionStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "PutLifecycleEventHookExecutionStatusCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutLifecycleEventHookExecutionStatusInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutLifecycleEventHookExecutionStatusOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1PutLifecycleEventHookExecutionStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1PutLifecycleEventHookExecutionStatusCommand)(output, context);
      }
    };
    exports2.PutLifecycleEventHookExecutionStatusCommand = PutLifecycleEventHookExecutionStatusCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/RegisterApplicationRevisionCommand.js
var require_RegisterApplicationRevisionCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/RegisterApplicationRevisionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RegisterApplicationRevisionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var RegisterApplicationRevisionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterApplicationRevisionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "RegisterApplicationRevisionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RegisterApplicationRevisionInputFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RegisterApplicationRevisionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RegisterApplicationRevisionCommand)(output, context);
      }
    };
    exports2.RegisterApplicationRevisionCommand = RegisterApplicationRevisionCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/RegisterOnPremisesInstanceCommand.js
var require_RegisterOnPremisesInstanceCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/RegisterOnPremisesInstanceCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RegisterOnPremisesInstanceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var RegisterOnPremisesInstanceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterOnPremisesInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "RegisterOnPremisesInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RegisterOnPremisesInstanceInputFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RegisterOnPremisesInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RegisterOnPremisesInstanceCommand)(output, context);
      }
    };
    exports2.RegisterOnPremisesInstanceCommand = RegisterOnPremisesInstanceCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/RemoveTagsFromOnPremisesInstancesCommand.js
var require_RemoveTagsFromOnPremisesInstancesCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/RemoveTagsFromOnPremisesInstancesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RemoveTagsFromOnPremisesInstancesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var RemoveTagsFromOnPremisesInstancesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RemoveTagsFromOnPremisesInstancesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "RemoveTagsFromOnPremisesInstancesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RemoveTagsFromOnPremisesInstancesInputFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RemoveTagsFromOnPremisesInstancesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RemoveTagsFromOnPremisesInstancesCommand)(output, context);
      }
    };
    exports2.RemoveTagsFromOnPremisesInstancesCommand = RemoveTagsFromOnPremisesInstancesCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/SkipWaitTimeForInstanceTerminationCommand.js
var require_SkipWaitTimeForInstanceTerminationCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/SkipWaitTimeForInstanceTerminationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SkipWaitTimeForInstanceTerminationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var SkipWaitTimeForInstanceTerminationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, SkipWaitTimeForInstanceTerminationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "SkipWaitTimeForInstanceTerminationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SkipWaitTimeForInstanceTerminationInputFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1SkipWaitTimeForInstanceTerminationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1SkipWaitTimeForInstanceTerminationCommand)(output, context);
      }
    };
    exports2.SkipWaitTimeForInstanceTerminationCommand = SkipWaitTimeForInstanceTerminationCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/StopDeploymentCommand.js
var require_StopDeploymentCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/StopDeploymentCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StopDeploymentCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var StopDeploymentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StopDeploymentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "StopDeploymentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.StopDeploymentInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.StopDeploymentOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1StopDeploymentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1StopDeploymentCommand)(output, context);
      }
    };
    exports2.StopDeploymentCommand = StopDeploymentCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/TagResourceCommand.js
var require_TagResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/TagResourceCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TagResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var TagResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, TagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "TagResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TagResourceInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.TagResourceOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1TagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1TagResourceCommand)(output, context);
      }
    };
    exports2.TagResourceCommand = TagResourceCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/UntagResourceCommand.js
var require_UntagResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/UntagResourceCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UntagResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UntagResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UntagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "UntagResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UntagResourceInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UntagResourceOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UntagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UntagResourceCommand)(output, context);
      }
    };
    exports2.UntagResourceCommand = UntagResourceCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/UpdateApplicationCommand.js
var require_UpdateApplicationCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/UpdateApplicationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateApplicationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateApplicationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateApplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "UpdateApplicationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateApplicationInputFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateApplicationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateApplicationCommand)(output, context);
      }
    };
    exports2.UpdateApplicationCommand = UpdateApplicationCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/UpdateDeploymentGroupCommand.js
var require_UpdateDeploymentGroupCommand = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/UpdateDeploymentGroupCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateDeploymentGroupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_04();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateDeploymentGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateDeploymentGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "CodeDeployClient";
        const commandName = "UpdateDeploymentGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateDeploymentGroupInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateDeploymentGroupOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateDeploymentGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateDeploymentGroupCommand)(output, context);
      }
    };
    exports2.UpdateDeploymentGroupCommand = UpdateDeploymentGroupCommand;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/CodeDeploy.js
var require_CodeDeploy = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/CodeDeploy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CodeDeploy = void 0;
    var CodeDeployClient_1 = require_CodeDeployClient();
    var AddTagsToOnPremisesInstancesCommand_1 = require_AddTagsToOnPremisesInstancesCommand();
    var BatchGetApplicationRevisionsCommand_1 = require_BatchGetApplicationRevisionsCommand();
    var BatchGetApplicationsCommand_1 = require_BatchGetApplicationsCommand();
    var BatchGetDeploymentGroupsCommand_1 = require_BatchGetDeploymentGroupsCommand();
    var BatchGetDeploymentInstancesCommand_1 = require_BatchGetDeploymentInstancesCommand();
    var BatchGetDeploymentsCommand_1 = require_BatchGetDeploymentsCommand();
    var BatchGetDeploymentTargetsCommand_1 = require_BatchGetDeploymentTargetsCommand();
    var BatchGetOnPremisesInstancesCommand_1 = require_BatchGetOnPremisesInstancesCommand();
    var ContinueDeploymentCommand_1 = require_ContinueDeploymentCommand();
    var CreateApplicationCommand_1 = require_CreateApplicationCommand();
    var CreateDeploymentCommand_1 = require_CreateDeploymentCommand();
    var CreateDeploymentConfigCommand_1 = require_CreateDeploymentConfigCommand();
    var CreateDeploymentGroupCommand_1 = require_CreateDeploymentGroupCommand();
    var DeleteApplicationCommand_1 = require_DeleteApplicationCommand();
    var DeleteDeploymentConfigCommand_1 = require_DeleteDeploymentConfigCommand();
    var DeleteDeploymentGroupCommand_1 = require_DeleteDeploymentGroupCommand();
    var DeleteGitHubAccountTokenCommand_1 = require_DeleteGitHubAccountTokenCommand();
    var DeleteResourcesByExternalIdCommand_1 = require_DeleteResourcesByExternalIdCommand();
    var DeregisterOnPremisesInstanceCommand_1 = require_DeregisterOnPremisesInstanceCommand();
    var GetApplicationCommand_1 = require_GetApplicationCommand();
    var GetApplicationRevisionCommand_1 = require_GetApplicationRevisionCommand();
    var GetDeploymentCommand_1 = require_GetDeploymentCommand();
    var GetDeploymentConfigCommand_1 = require_GetDeploymentConfigCommand();
    var GetDeploymentGroupCommand_1 = require_GetDeploymentGroupCommand();
    var GetDeploymentInstanceCommand_1 = require_GetDeploymentInstanceCommand();
    var GetDeploymentTargetCommand_1 = require_GetDeploymentTargetCommand();
    var GetOnPremisesInstanceCommand_1 = require_GetOnPremisesInstanceCommand();
    var ListApplicationRevisionsCommand_1 = require_ListApplicationRevisionsCommand();
    var ListApplicationsCommand_1 = require_ListApplicationsCommand();
    var ListDeploymentConfigsCommand_1 = require_ListDeploymentConfigsCommand();
    var ListDeploymentGroupsCommand_1 = require_ListDeploymentGroupsCommand();
    var ListDeploymentInstancesCommand_1 = require_ListDeploymentInstancesCommand();
    var ListDeploymentsCommand_1 = require_ListDeploymentsCommand();
    var ListDeploymentTargetsCommand_1 = require_ListDeploymentTargetsCommand();
    var ListGitHubAccountTokenNamesCommand_1 = require_ListGitHubAccountTokenNamesCommand();
    var ListOnPremisesInstancesCommand_1 = require_ListOnPremisesInstancesCommand();
    var ListTagsForResourceCommand_1 = require_ListTagsForResourceCommand();
    var PutLifecycleEventHookExecutionStatusCommand_1 = require_PutLifecycleEventHookExecutionStatusCommand();
    var RegisterApplicationRevisionCommand_1 = require_RegisterApplicationRevisionCommand();
    var RegisterOnPremisesInstanceCommand_1 = require_RegisterOnPremisesInstanceCommand();
    var RemoveTagsFromOnPremisesInstancesCommand_1 = require_RemoveTagsFromOnPremisesInstancesCommand();
    var SkipWaitTimeForInstanceTerminationCommand_1 = require_SkipWaitTimeForInstanceTerminationCommand();
    var StopDeploymentCommand_1 = require_StopDeploymentCommand();
    var TagResourceCommand_1 = require_TagResourceCommand();
    var UntagResourceCommand_1 = require_UntagResourceCommand();
    var UpdateApplicationCommand_1 = require_UpdateApplicationCommand();
    var UpdateDeploymentGroupCommand_1 = require_UpdateDeploymentGroupCommand();
    var CodeDeploy = class extends CodeDeployClient_1.CodeDeployClient {
      addTagsToOnPremisesInstances(args, optionsOrCb, cb) {
        const command = new AddTagsToOnPremisesInstancesCommand_1.AddTagsToOnPremisesInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchGetApplicationRevisions(args, optionsOrCb, cb) {
        const command = new BatchGetApplicationRevisionsCommand_1.BatchGetApplicationRevisionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchGetApplications(args, optionsOrCb, cb) {
        const command = new BatchGetApplicationsCommand_1.BatchGetApplicationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchGetDeploymentGroups(args, optionsOrCb, cb) {
        const command = new BatchGetDeploymentGroupsCommand_1.BatchGetDeploymentGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchGetDeploymentInstances(args, optionsOrCb, cb) {
        const command = new BatchGetDeploymentInstancesCommand_1.BatchGetDeploymentInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchGetDeployments(args, optionsOrCb, cb) {
        const command = new BatchGetDeploymentsCommand_1.BatchGetDeploymentsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchGetDeploymentTargets(args, optionsOrCb, cb) {
        const command = new BatchGetDeploymentTargetsCommand_1.BatchGetDeploymentTargetsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchGetOnPremisesInstances(args, optionsOrCb, cb) {
        const command = new BatchGetOnPremisesInstancesCommand_1.BatchGetOnPremisesInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      continueDeployment(args, optionsOrCb, cb) {
        const command = new ContinueDeploymentCommand_1.ContinueDeploymentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createApplication(args, optionsOrCb, cb) {
        const command = new CreateApplicationCommand_1.CreateApplicationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createDeployment(args, optionsOrCb, cb) {
        const command = new CreateDeploymentCommand_1.CreateDeploymentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createDeploymentConfig(args, optionsOrCb, cb) {
        const command = new CreateDeploymentConfigCommand_1.CreateDeploymentConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createDeploymentGroup(args, optionsOrCb, cb) {
        const command = new CreateDeploymentGroupCommand_1.CreateDeploymentGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteApplication(args, optionsOrCb, cb) {
        const command = new DeleteApplicationCommand_1.DeleteApplicationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteDeploymentConfig(args, optionsOrCb, cb) {
        const command = new DeleteDeploymentConfigCommand_1.DeleteDeploymentConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteDeploymentGroup(args, optionsOrCb, cb) {
        const command = new DeleteDeploymentGroupCommand_1.DeleteDeploymentGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteGitHubAccountToken(args, optionsOrCb, cb) {
        const command = new DeleteGitHubAccountTokenCommand_1.DeleteGitHubAccountTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteResourcesByExternalId(args, optionsOrCb, cb) {
        const command = new DeleteResourcesByExternalIdCommand_1.DeleteResourcesByExternalIdCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deregisterOnPremisesInstance(args, optionsOrCb, cb) {
        const command = new DeregisterOnPremisesInstanceCommand_1.DeregisterOnPremisesInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getApplication(args, optionsOrCb, cb) {
        const command = new GetApplicationCommand_1.GetApplicationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getApplicationRevision(args, optionsOrCb, cb) {
        const command = new GetApplicationRevisionCommand_1.GetApplicationRevisionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getDeployment(args, optionsOrCb, cb) {
        const command = new GetDeploymentCommand_1.GetDeploymentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getDeploymentConfig(args, optionsOrCb, cb) {
        const command = new GetDeploymentConfigCommand_1.GetDeploymentConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getDeploymentGroup(args, optionsOrCb, cb) {
        const command = new GetDeploymentGroupCommand_1.GetDeploymentGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getDeploymentInstance(args, optionsOrCb, cb) {
        const command = new GetDeploymentInstanceCommand_1.GetDeploymentInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getDeploymentTarget(args, optionsOrCb, cb) {
        const command = new GetDeploymentTargetCommand_1.GetDeploymentTargetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getOnPremisesInstance(args, optionsOrCb, cb) {
        const command = new GetOnPremisesInstanceCommand_1.GetOnPremisesInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listApplicationRevisions(args, optionsOrCb, cb) {
        const command = new ListApplicationRevisionsCommand_1.ListApplicationRevisionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listApplications(args, optionsOrCb, cb) {
        const command = new ListApplicationsCommand_1.ListApplicationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listDeploymentConfigs(args, optionsOrCb, cb) {
        const command = new ListDeploymentConfigsCommand_1.ListDeploymentConfigsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listDeploymentGroups(args, optionsOrCb, cb) {
        const command = new ListDeploymentGroupsCommand_1.ListDeploymentGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listDeploymentInstances(args, optionsOrCb, cb) {
        const command = new ListDeploymentInstancesCommand_1.ListDeploymentInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listDeployments(args, optionsOrCb, cb) {
        const command = new ListDeploymentsCommand_1.ListDeploymentsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listDeploymentTargets(args, optionsOrCb, cb) {
        const command = new ListDeploymentTargetsCommand_1.ListDeploymentTargetsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listGitHubAccountTokenNames(args, optionsOrCb, cb) {
        const command = new ListGitHubAccountTokenNamesCommand_1.ListGitHubAccountTokenNamesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listOnPremisesInstances(args, optionsOrCb, cb) {
        const command = new ListOnPremisesInstancesCommand_1.ListOnPremisesInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listTagsForResource(args, optionsOrCb, cb) {
        const command = new ListTagsForResourceCommand_1.ListTagsForResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putLifecycleEventHookExecutionStatus(args, optionsOrCb, cb) {
        const command = new PutLifecycleEventHookExecutionStatusCommand_1.PutLifecycleEventHookExecutionStatusCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerApplicationRevision(args, optionsOrCb, cb) {
        const command = new RegisterApplicationRevisionCommand_1.RegisterApplicationRevisionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerOnPremisesInstance(args, optionsOrCb, cb) {
        const command = new RegisterOnPremisesInstanceCommand_1.RegisterOnPremisesInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      removeTagsFromOnPremisesInstances(args, optionsOrCb, cb) {
        const command = new RemoveTagsFromOnPremisesInstancesCommand_1.RemoveTagsFromOnPremisesInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      skipWaitTimeForInstanceTermination(args, optionsOrCb, cb) {
        const command = new SkipWaitTimeForInstanceTerminationCommand_1.SkipWaitTimeForInstanceTerminationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      stopDeployment(args, optionsOrCb, cb) {
        const command = new StopDeploymentCommand_1.StopDeploymentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      tagResource(args, optionsOrCb, cb) {
        const command = new TagResourceCommand_1.TagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      untagResource(args, optionsOrCb, cb) {
        const command = new UntagResourceCommand_1.UntagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateApplication(args, optionsOrCb, cb) {
        const command = new UpdateApplicationCommand_1.UpdateApplicationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateDeploymentGroup(args, optionsOrCb, cb) {
        const command = new UpdateDeploymentGroupCommand_1.UpdateDeploymentGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports2.CodeDeploy = CodeDeploy;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/index.js
var require_commands4 = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AddTagsToOnPremisesInstancesCommand(), exports2);
    tslib_1.__exportStar(require_BatchGetApplicationRevisionsCommand(), exports2);
    tslib_1.__exportStar(require_BatchGetApplicationsCommand(), exports2);
    tslib_1.__exportStar(require_BatchGetDeploymentGroupsCommand(), exports2);
    tslib_1.__exportStar(require_BatchGetDeploymentInstancesCommand(), exports2);
    tslib_1.__exportStar(require_BatchGetDeploymentTargetsCommand(), exports2);
    tslib_1.__exportStar(require_BatchGetDeploymentsCommand(), exports2);
    tslib_1.__exportStar(require_BatchGetOnPremisesInstancesCommand(), exports2);
    tslib_1.__exportStar(require_ContinueDeploymentCommand(), exports2);
    tslib_1.__exportStar(require_CreateApplicationCommand(), exports2);
    tslib_1.__exportStar(require_CreateDeploymentCommand(), exports2);
    tslib_1.__exportStar(require_CreateDeploymentConfigCommand(), exports2);
    tslib_1.__exportStar(require_CreateDeploymentGroupCommand(), exports2);
    tslib_1.__exportStar(require_DeleteApplicationCommand(), exports2);
    tslib_1.__exportStar(require_DeleteDeploymentConfigCommand(), exports2);
    tslib_1.__exportStar(require_DeleteDeploymentGroupCommand(), exports2);
    tslib_1.__exportStar(require_DeleteGitHubAccountTokenCommand(), exports2);
    tslib_1.__exportStar(require_DeleteResourcesByExternalIdCommand(), exports2);
    tslib_1.__exportStar(require_DeregisterOnPremisesInstanceCommand(), exports2);
    tslib_1.__exportStar(require_GetApplicationCommand(), exports2);
    tslib_1.__exportStar(require_GetApplicationRevisionCommand(), exports2);
    tslib_1.__exportStar(require_GetDeploymentCommand(), exports2);
    tslib_1.__exportStar(require_GetDeploymentConfigCommand(), exports2);
    tslib_1.__exportStar(require_GetDeploymentGroupCommand(), exports2);
    tslib_1.__exportStar(require_GetDeploymentInstanceCommand(), exports2);
    tslib_1.__exportStar(require_GetDeploymentTargetCommand(), exports2);
    tslib_1.__exportStar(require_GetOnPremisesInstanceCommand(), exports2);
    tslib_1.__exportStar(require_ListApplicationRevisionsCommand(), exports2);
    tslib_1.__exportStar(require_ListApplicationsCommand(), exports2);
    tslib_1.__exportStar(require_ListDeploymentConfigsCommand(), exports2);
    tslib_1.__exportStar(require_ListDeploymentGroupsCommand(), exports2);
    tslib_1.__exportStar(require_ListDeploymentInstancesCommand(), exports2);
    tslib_1.__exportStar(require_ListDeploymentTargetsCommand(), exports2);
    tslib_1.__exportStar(require_ListDeploymentsCommand(), exports2);
    tslib_1.__exportStar(require_ListGitHubAccountTokenNamesCommand(), exports2);
    tslib_1.__exportStar(require_ListOnPremisesInstancesCommand(), exports2);
    tslib_1.__exportStar(require_ListTagsForResourceCommand(), exports2);
    tslib_1.__exportStar(require_PutLifecycleEventHookExecutionStatusCommand(), exports2);
    tslib_1.__exportStar(require_RegisterApplicationRevisionCommand(), exports2);
    tslib_1.__exportStar(require_RegisterOnPremisesInstanceCommand(), exports2);
    tslib_1.__exportStar(require_RemoveTagsFromOnPremisesInstancesCommand(), exports2);
    tslib_1.__exportStar(require_SkipWaitTimeForInstanceTerminationCommand(), exports2);
    tslib_1.__exportStar(require_StopDeploymentCommand(), exports2);
    tslib_1.__exportStar(require_TagResourceCommand(), exports2);
    tslib_1.__exportStar(require_UntagResourceCommand(), exports2);
    tslib_1.__exportStar(require_UpdateApplicationCommand(), exports2);
    tslib_1.__exportStar(require_UpdateDeploymentGroupCommand(), exports2);
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/models/index.js
var require_models4 = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_04(), exports2);
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/pagination/Interfaces.js
var require_Interfaces2 = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/pagination/Interfaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/pagination/ListApplicationRevisionsPaginator.js
var require_ListApplicationRevisionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/pagination/ListApplicationRevisionsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListApplicationRevisions = void 0;
    var CodeDeployClient_1 = require_CodeDeployClient();
    var ListApplicationRevisionsCommand_1 = require_ListApplicationRevisionsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListApplicationRevisionsCommand_1.ListApplicationRevisionsCommand(input), ...args);
    };
    async function* paginateListApplicationRevisions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        if (config.client instanceof CodeDeployClient_1.CodeDeployClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CodeDeploy | CodeDeployClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListApplicationRevisions = paginateListApplicationRevisions;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/pagination/ListApplicationsPaginator.js
var require_ListApplicationsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/pagination/ListApplicationsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListApplications = void 0;
    var CodeDeployClient_1 = require_CodeDeployClient();
    var ListApplicationsCommand_1 = require_ListApplicationsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListApplicationsCommand_1.ListApplicationsCommand(input), ...args);
    };
    async function* paginateListApplications(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        if (config.client instanceof CodeDeployClient_1.CodeDeployClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CodeDeploy | CodeDeployClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListApplications = paginateListApplications;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/pagination/ListDeploymentConfigsPaginator.js
var require_ListDeploymentConfigsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/pagination/ListDeploymentConfigsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListDeploymentConfigs = void 0;
    var CodeDeployClient_1 = require_CodeDeployClient();
    var ListDeploymentConfigsCommand_1 = require_ListDeploymentConfigsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListDeploymentConfigsCommand_1.ListDeploymentConfigsCommand(input), ...args);
    };
    async function* paginateListDeploymentConfigs(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        if (config.client instanceof CodeDeployClient_1.CodeDeployClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CodeDeploy | CodeDeployClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListDeploymentConfigs = paginateListDeploymentConfigs;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/pagination/ListDeploymentGroupsPaginator.js
var require_ListDeploymentGroupsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/pagination/ListDeploymentGroupsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListDeploymentGroups = void 0;
    var CodeDeployClient_1 = require_CodeDeployClient();
    var ListDeploymentGroupsCommand_1 = require_ListDeploymentGroupsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListDeploymentGroupsCommand_1.ListDeploymentGroupsCommand(input), ...args);
    };
    async function* paginateListDeploymentGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        if (config.client instanceof CodeDeployClient_1.CodeDeployClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CodeDeploy | CodeDeployClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListDeploymentGroups = paginateListDeploymentGroups;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/pagination/ListDeploymentInstancesPaginator.js
var require_ListDeploymentInstancesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/pagination/ListDeploymentInstancesPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListDeploymentInstances = void 0;
    var CodeDeployClient_1 = require_CodeDeployClient();
    var ListDeploymentInstancesCommand_1 = require_ListDeploymentInstancesCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListDeploymentInstancesCommand_1.ListDeploymentInstancesCommand(input), ...args);
    };
    async function* paginateListDeploymentInstances(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        if (config.client instanceof CodeDeployClient_1.CodeDeployClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CodeDeploy | CodeDeployClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListDeploymentInstances = paginateListDeploymentInstances;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/pagination/ListDeploymentsPaginator.js
var require_ListDeploymentsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/pagination/ListDeploymentsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListDeployments = void 0;
    var CodeDeployClient_1 = require_CodeDeployClient();
    var ListDeploymentsCommand_1 = require_ListDeploymentsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListDeploymentsCommand_1.ListDeploymentsCommand(input), ...args);
    };
    async function* paginateListDeployments(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        if (config.client instanceof CodeDeployClient_1.CodeDeployClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CodeDeploy | CodeDeployClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListDeployments = paginateListDeployments;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/pagination/index.js
var require_pagination3 = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/pagination/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces2(), exports2);
    tslib_1.__exportStar(require_ListApplicationRevisionsPaginator(), exports2);
    tslib_1.__exportStar(require_ListApplicationsPaginator(), exports2);
    tslib_1.__exportStar(require_ListDeploymentConfigsPaginator(), exports2);
    tslib_1.__exportStar(require_ListDeploymentGroupsPaginator(), exports2);
    tslib_1.__exportStar(require_ListDeploymentInstancesPaginator(), exports2);
    tslib_1.__exportStar(require_ListDeploymentsPaginator(), exports2);
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js
var require_sleep = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sleep = void 0;
    var sleep = (seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    };
    exports2.sleep = sleep;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js
var require_waiter2 = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkExceptions = exports2.WaiterState = exports2.waiterServiceDefaults = void 0;
    exports2.waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    var WaiterState;
    (function(WaiterState2) {
      WaiterState2["ABORTED"] = "ABORTED";
      WaiterState2["FAILURE"] = "FAILURE";
      WaiterState2["SUCCESS"] = "SUCCESS";
      WaiterState2["RETRY"] = "RETRY";
      WaiterState2["TIMEOUT"] = "TIMEOUT";
    })(WaiterState = exports2.WaiterState || (exports2.WaiterState = {}));
    var checkExceptions = (result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify({
          ...result,
          reason: "Request was aborted"
        })}`);
        abortError.name = "AbortError";
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify({
          ...result,
          reason: "Waiter has timed out"
        })}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
      }
      return result;
    };
    exports2.checkExceptions = checkExceptions;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js
var require_poller = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.runPolling = void 0;
    var sleep_1 = require_sleep();
    var waiter_1 = require_waiter2();
    var exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    };
    var randomInRange = (min, max) => min + Math.random() * (max - min);
    var runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
      var _a;
      const { state, reason } = await acceptorChecks(client, input);
      if (state !== waiter_1.WaiterState.RETRY) {
        return { state, reason };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (((_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _a === void 0 ? void 0 : _a.aborted) || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) {
          return { state: waiter_1.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: waiter_1.WaiterState.TIMEOUT };
        }
        await (0, sleep_1.sleep)(delay);
        const { state: state2, reason: reason2 } = await acceptorChecks(client, input);
        if (state2 !== waiter_1.WaiterState.RETRY) {
          return { state: state2, reason: reason2 };
        }
        currentAttempt += 1;
      }
    };
    exports2.runPolling = runPolling;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js
var require_validate = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateWaiterOptions = void 0;
    var validateWaiterOptions = (options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      }
    };
    exports2.validateWaiterOptions = validateWaiterOptions;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js
var require_utils2 = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_sleep(), exports2);
    tslib_1.__exportStar(require_validate(), exports2);
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js
var require_createWaiter = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createWaiter = void 0;
    var poller_1 = require_poller();
    var utils_1 = require_utils2();
    var waiter_1 = require_waiter2();
    var abortTimeout = async (abortSignal) => {
      return new Promise((resolve) => {
        abortSignal.onabort = () => resolve({ state: waiter_1.WaiterState.ABORTED });
      });
    };
    var createWaiter = async (options, input, acceptorChecks) => {
      const params = {
        ...waiter_1.waiterServiceDefaults,
        ...options
      };
      (0, utils_1.validateWaiterOptions)(params);
      const exitConditions = [(0, poller_1.runPolling)(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    };
    exports2.createWaiter = createWaiter;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/index.js
var require_dist_cjs50 = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_createWaiter(), exports2);
    tslib_1.__exportStar(require_waiter2(), exports2);
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/waiters/waitForDeploymentSuccessful.js
var require_waitForDeploymentSuccessful = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/waiters/waitForDeploymentSuccessful.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilDeploymentSuccessful = exports2.waitForDeploymentSuccessful = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var GetDeploymentCommand_1 = require_GetDeploymentCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetDeploymentCommand_1.GetDeploymentCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.deploymentInfo.status;
          };
          if (returnComparator() === "Succeeded") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.deploymentInfo.status;
          };
          if (returnComparator() === "Failed") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.deploymentInfo.status;
          };
          if (returnComparator() === "Stopped") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForDeploymentSuccessful = async (params, input) => {
      const serviceDefaults = { minDelay: 15, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForDeploymentSuccessful = waitForDeploymentSuccessful;
    var waitUntilDeploymentSuccessful = async (params, input) => {
      const serviceDefaults = { minDelay: 15, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilDeploymentSuccessful = waitUntilDeploymentSuccessful;
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/waiters/index.js
var require_waiters = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/waiters/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_waitForDeploymentSuccessful(), exports2);
  }
});

// node_modules/@aws-sdk/client-codedeploy/dist-cjs/index.js
var require_dist_cjs51 = __commonJS({
  "node_modules/@aws-sdk/client-codedeploy/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CodeDeployServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CodeDeploy(), exports2);
    tslib_1.__exportStar(require_CodeDeployClient(), exports2);
    tslib_1.__exportStar(require_commands4(), exports2);
    tslib_1.__exportStar(require_models4(), exports2);
    tslib_1.__exportStar(require_pagination3(), exports2);
    tslib_1.__exportStar(require_waiters(), exports2);
    var CodeDeployServiceException_1 = require_CodeDeployServiceException();
    Object.defineProperty(exports2, "CodeDeployServiceException", { enumerable: true, get: function() {
      return CodeDeployServiceException_1.CodeDeployServiceException;
    } });
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/models/LambdaServiceException.js
var require_LambdaServiceException = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/models/LambdaServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LambdaServiceException = void 0;
    var smithy_client_1 = require_dist_cjs26();
    var LambdaServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, LambdaServiceException.prototype);
      }
    };
    exports2.LambdaServiceException = LambdaServiceException;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/models/models_0.js
var require_models_05 = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.KMSDisabledException = exports2.KMSAccessDeniedException = exports2.LogType = exports2.InvocationType = exports2.InvalidZipFileException = exports2.InvalidSubnetIDException = exports2.InvalidSecurityGroupIDException = exports2.InvalidRuntimeException = exports2.InvalidRequestContentException = exports2.ENILimitReachedException = exports2.EFSMountTimeoutException = exports2.EFSMountFailureException = exports2.EFSMountConnectivityException = exports2.EFSIOException = exports2.EC2UnexpectedException = exports2.EC2ThrottledException = exports2.EC2AccessDeniedException = exports2.UpdateRuntimeOn = exports2.ProvisionedConcurrencyConfigNotFoundException = exports2.ProvisionedConcurrencyStatusEnum = exports2.ResourceInUseException = exports2.InvalidCodeSignatureException = exports2.StateReasonCode = exports2.State = exports2.SnapStartOptimizationStatus = exports2.LastUpdateStatusReasonCode = exports2.LastUpdateStatus = exports2.TracingMode = exports2.SnapStartApplyOn = exports2.Runtime = exports2.PackageType = exports2.CodeVerificationFailedException = exports2.CodeStorageExceededException = exports2.CodeSigningConfigNotFoundException = exports2.EventSourcePosition = exports2.SourceAccessType = exports2.EndPointType = exports2.FunctionResponseType = exports2.FullDocument = exports2.CodeSigningPolicy = exports2.Architecture = exports2.FunctionUrlAuthType = exports2.TooManyRequestsException = exports2.ThrottleReason = exports2.ServiceException = exports2.ResourceNotFoundException = exports2.ResourceConflictException = exports2.PreconditionFailedException = exports2.PolicyLengthExceededException = exports2.InvalidParameterValueException = void 0;
    exports2.ImageConfigErrorFilterSensitiveLog = exports2.EnvironmentResponseFilterSensitiveLog = exports2.EnvironmentErrorFilterSensitiveLog = exports2.CreateFunctionRequestFilterSensitiveLog = exports2.VpcConfigFilterSensitiveLog = exports2.TracingConfigFilterSensitiveLog = exports2.SnapStartFilterSensitiveLog = exports2.ImageConfigFilterSensitiveLog = exports2.FileSystemConfigFilterSensitiveLog = exports2.EphemeralStorageFilterSensitiveLog = exports2.EnvironmentFilterSensitiveLog = exports2.DeadLetterConfigFilterSensitiveLog = exports2.FunctionCodeFilterSensitiveLog = exports2.EventSourceMappingConfigurationFilterSensitiveLog = exports2.CreateEventSourceMappingRequestFilterSensitiveLog = exports2.SourceAccessConfigurationFilterSensitiveLog = exports2.SelfManagedKafkaEventSourceConfigFilterSensitiveLog = exports2.SelfManagedEventSourceFilterSensitiveLog = exports2.ScalingConfigFilterSensitiveLog = exports2.FilterCriteriaFilterSensitiveLog = exports2.FilterFilterSensitiveLog = exports2.DocumentDBEventSourceConfigFilterSensitiveLog = exports2.DestinationConfigFilterSensitiveLog = exports2.OnSuccessFilterSensitiveLog = exports2.OnFailureFilterSensitiveLog = exports2.CreateCodeSigningConfigResponseFilterSensitiveLog = exports2.CodeSigningConfigFilterSensitiveLog = exports2.CreateCodeSigningConfigRequestFilterSensitiveLog = exports2.CodeSigningPoliciesFilterSensitiveLog = exports2.CreateAliasRequestFilterSensitiveLog = exports2.AmazonManagedKafkaEventSourceConfigFilterSensitiveLog = exports2.AllowedPublishersFilterSensitiveLog = exports2.AliasConfigurationFilterSensitiveLog = exports2.AliasRoutingConfigurationFilterSensitiveLog = exports2.AddPermissionResponseFilterSensitiveLog = exports2.AddPermissionRequestFilterSensitiveLog = exports2.AddLayerVersionPermissionResponseFilterSensitiveLog = exports2.AddLayerVersionPermissionRequestFilterSensitiveLog = exports2.AccountUsageFilterSensitiveLog = exports2.AccountLimitFilterSensitiveLog = exports2.FunctionVersion = exports2.UnsupportedMediaTypeException = exports2.SubnetIPAddressLimitReachedException = exports2.SnapStartTimeoutException = exports2.SnapStartNotReadyException = exports2.SnapStartException = exports2.ResourceNotReadyException = exports2.RequestTooLargeException = exports2.KMSNotFoundException = exports2.KMSInvalidStateException = void 0;
    exports2.GetProvisionedConcurrencyConfigRequestFilterSensitiveLog = exports2.GetPolicyResponseFilterSensitiveLog = exports2.GetPolicyRequestFilterSensitiveLog = exports2.GetLayerVersionPolicyResponseFilterSensitiveLog = exports2.GetLayerVersionPolicyRequestFilterSensitiveLog = exports2.GetLayerVersionByArnRequestFilterSensitiveLog = exports2.GetLayerVersionResponseFilterSensitiveLog = exports2.LayerVersionContentOutputFilterSensitiveLog = exports2.GetLayerVersionRequestFilterSensitiveLog = exports2.GetFunctionUrlConfigResponseFilterSensitiveLog = exports2.GetFunctionUrlConfigRequestFilterSensitiveLog = exports2.GetFunctionEventInvokeConfigRequestFilterSensitiveLog = exports2.FunctionEventInvokeConfigFilterSensitiveLog = exports2.GetFunctionConfigurationRequestFilterSensitiveLog = exports2.GetFunctionConcurrencyResponseFilterSensitiveLog = exports2.GetFunctionConcurrencyRequestFilterSensitiveLog = exports2.GetFunctionCodeSigningConfigResponseFilterSensitiveLog = exports2.GetFunctionCodeSigningConfigRequestFilterSensitiveLog = exports2.GetFunctionResponseFilterSensitiveLog = exports2.ConcurrencyFilterSensitiveLog = exports2.FunctionCodeLocationFilterSensitiveLog = exports2.GetFunctionRequestFilterSensitiveLog = exports2.GetEventSourceMappingRequestFilterSensitiveLog = exports2.GetCodeSigningConfigResponseFilterSensitiveLog = exports2.GetCodeSigningConfigRequestFilterSensitiveLog = exports2.GetAliasRequestFilterSensitiveLog = exports2.GetAccountSettingsResponseFilterSensitiveLog = exports2.GetAccountSettingsRequestFilterSensitiveLog = exports2.DeleteProvisionedConcurrencyConfigRequestFilterSensitiveLog = exports2.DeleteLayerVersionRequestFilterSensitiveLog = exports2.DeleteFunctionUrlConfigRequestFilterSensitiveLog = exports2.DeleteFunctionEventInvokeConfigRequestFilterSensitiveLog = exports2.DeleteFunctionConcurrencyRequestFilterSensitiveLog = exports2.DeleteFunctionCodeSigningConfigRequestFilterSensitiveLog = exports2.DeleteFunctionRequestFilterSensitiveLog = exports2.DeleteEventSourceMappingRequestFilterSensitiveLog = exports2.DeleteCodeSigningConfigResponseFilterSensitiveLog = exports2.DeleteCodeSigningConfigRequestFilterSensitiveLog = exports2.DeleteAliasRequestFilterSensitiveLog = exports2.CreateFunctionUrlConfigResponseFilterSensitiveLog = exports2.CreateFunctionUrlConfigRequestFilterSensitiveLog = exports2.CorsFilterSensitiveLog = exports2.FunctionConfigurationFilterSensitiveLog = exports2.VpcConfigResponseFilterSensitiveLog = exports2.TracingConfigResponseFilterSensitiveLog = exports2.SnapStartResponseFilterSensitiveLog = exports2.RuntimeVersionConfigFilterSensitiveLog = exports2.RuntimeVersionErrorFilterSensitiveLog = exports2.LayerFilterSensitiveLog = exports2.ImageConfigResponseFilterSensitiveLog = void 0;
    exports2.TagResourceRequestFilterSensitiveLog = exports2.RemovePermissionRequestFilterSensitiveLog = exports2.RemoveLayerVersionPermissionRequestFilterSensitiveLog = exports2.PutRuntimeManagementConfigResponseFilterSensitiveLog = exports2.PutRuntimeManagementConfigRequestFilterSensitiveLog = exports2.PutProvisionedConcurrencyConfigResponseFilterSensitiveLog = exports2.PutProvisionedConcurrencyConfigRequestFilterSensitiveLog = exports2.PutFunctionEventInvokeConfigRequestFilterSensitiveLog = exports2.PutFunctionConcurrencyRequestFilterSensitiveLog = exports2.PutFunctionCodeSigningConfigResponseFilterSensitiveLog = exports2.PutFunctionCodeSigningConfigRequestFilterSensitiveLog = exports2.PublishVersionRequestFilterSensitiveLog = exports2.PublishLayerVersionResponseFilterSensitiveLog = exports2.PublishLayerVersionRequestFilterSensitiveLog = exports2.LayerVersionContentInputFilterSensitiveLog = exports2.ListVersionsByFunctionResponseFilterSensitiveLog = exports2.ListVersionsByFunctionRequestFilterSensitiveLog = exports2.ListTagsResponseFilterSensitiveLog = exports2.ListTagsRequestFilterSensitiveLog = exports2.ListProvisionedConcurrencyConfigsResponseFilterSensitiveLog = exports2.ProvisionedConcurrencyConfigListItemFilterSensitiveLog = exports2.ListProvisionedConcurrencyConfigsRequestFilterSensitiveLog = exports2.ListLayerVersionsResponseFilterSensitiveLog = exports2.ListLayerVersionsRequestFilterSensitiveLog = exports2.ListLayersResponseFilterSensitiveLog = exports2.LayersListItemFilterSensitiveLog = exports2.LayerVersionsListItemFilterSensitiveLog = exports2.ListLayersRequestFilterSensitiveLog = exports2.ListFunctionUrlConfigsResponseFilterSensitiveLog = exports2.FunctionUrlConfigFilterSensitiveLog = exports2.ListFunctionUrlConfigsRequestFilterSensitiveLog = exports2.ListFunctionsByCodeSigningConfigResponseFilterSensitiveLog = exports2.ListFunctionsByCodeSigningConfigRequestFilterSensitiveLog = exports2.ListFunctionsResponseFilterSensitiveLog = exports2.ListFunctionsRequestFilterSensitiveLog = exports2.ListFunctionEventInvokeConfigsResponseFilterSensitiveLog = exports2.ListFunctionEventInvokeConfigsRequestFilterSensitiveLog = exports2.ListEventSourceMappingsResponseFilterSensitiveLog = exports2.ListEventSourceMappingsRequestFilterSensitiveLog = exports2.ListCodeSigningConfigsResponseFilterSensitiveLog = exports2.ListCodeSigningConfigsRequestFilterSensitiveLog = exports2.ListAliasesResponseFilterSensitiveLog = exports2.ListAliasesRequestFilterSensitiveLog = exports2.InvokeAsyncResponseFilterSensitiveLog = exports2.InvokeAsyncRequestFilterSensitiveLog = exports2.InvocationResponseFilterSensitiveLog = exports2.InvocationRequestFilterSensitiveLog = exports2.GetRuntimeManagementConfigResponseFilterSensitiveLog = exports2.GetRuntimeManagementConfigRequestFilterSensitiveLog = exports2.GetProvisionedConcurrencyConfigResponseFilterSensitiveLog = void 0;
    exports2.UpdateFunctionUrlConfigResponseFilterSensitiveLog = exports2.UpdateFunctionUrlConfigRequestFilterSensitiveLog = exports2.UpdateFunctionEventInvokeConfigRequestFilterSensitiveLog = exports2.UpdateFunctionConfigurationRequestFilterSensitiveLog = exports2.UpdateFunctionCodeRequestFilterSensitiveLog = exports2.UpdateEventSourceMappingRequestFilterSensitiveLog = exports2.UpdateCodeSigningConfigResponseFilterSensitiveLog = exports2.UpdateCodeSigningConfigRequestFilterSensitiveLog = exports2.UpdateAliasRequestFilterSensitiveLog = exports2.UntagResourceRequestFilterSensitiveLog = void 0;
    var smithy_client_1 = require_dist_cjs26();
    var LambdaServiceException_1 = require_LambdaServiceException();
    var InvalidParameterValueException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "InvalidParameterValueException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidParameterValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterValueException.prototype);
        this.Type = opts.Type;
      }
    };
    exports2.InvalidParameterValueException = InvalidParameterValueException;
    var PolicyLengthExceededException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "PolicyLengthExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "PolicyLengthExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PolicyLengthExceededException.prototype);
        this.Type = opts.Type;
      }
    };
    exports2.PolicyLengthExceededException = PolicyLengthExceededException;
    var PreconditionFailedException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "PreconditionFailedException",
          $fault: "client",
          ...opts
        });
        this.name = "PreconditionFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PreconditionFailedException.prototype);
        this.Type = opts.Type;
      }
    };
    exports2.PreconditionFailedException = PreconditionFailedException;
    var ResourceConflictException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "ResourceConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceConflictException.prototype);
        this.Type = opts.Type;
      }
    };
    exports2.ResourceConflictException = ResourceConflictException;
    var ResourceNotFoundException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.ResourceNotFoundException = ResourceNotFoundException;
    var ServiceException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "ServiceException",
          $fault: "server",
          ...opts
        });
        this.name = "ServiceException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.ServiceException = ServiceException;
    var ThrottleReason;
    (function(ThrottleReason2) {
      ThrottleReason2["CallerRateLimitExceeded"] = "CallerRateLimitExceeded";
      ThrottleReason2["ConcurrentInvocationLimitExceeded"] = "ConcurrentInvocationLimitExceeded";
      ThrottleReason2["ConcurrentSnapshotCreateLimitExceeded"] = "ConcurrentSnapshotCreateLimitExceeded";
      ThrottleReason2["FunctionInvocationRateLimitExceeded"] = "FunctionInvocationRateLimitExceeded";
      ThrottleReason2["ReservedFunctionConcurrentInvocationLimitExceeded"] = "ReservedFunctionConcurrentInvocationLimitExceeded";
      ThrottleReason2["ReservedFunctionInvocationRateLimitExceeded"] = "ReservedFunctionInvocationRateLimitExceeded";
    })(ThrottleReason = exports2.ThrottleReason || (exports2.ThrottleReason = {}));
    var TooManyRequestsException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.retryAfterSeconds = opts.retryAfterSeconds;
        this.Type = opts.Type;
        this.Reason = opts.Reason;
      }
    };
    exports2.TooManyRequestsException = TooManyRequestsException;
    var FunctionUrlAuthType;
    (function(FunctionUrlAuthType2) {
      FunctionUrlAuthType2["AWS_IAM"] = "AWS_IAM";
      FunctionUrlAuthType2["NONE"] = "NONE";
    })(FunctionUrlAuthType = exports2.FunctionUrlAuthType || (exports2.FunctionUrlAuthType = {}));
    var Architecture;
    (function(Architecture2) {
      Architecture2["arm64"] = "arm64";
      Architecture2["x86_64"] = "x86_64";
    })(Architecture = exports2.Architecture || (exports2.Architecture = {}));
    var CodeSigningPolicy;
    (function(CodeSigningPolicy2) {
      CodeSigningPolicy2["Enforce"] = "Enforce";
      CodeSigningPolicy2["Warn"] = "Warn";
    })(CodeSigningPolicy = exports2.CodeSigningPolicy || (exports2.CodeSigningPolicy = {}));
    var FullDocument;
    (function(FullDocument2) {
      FullDocument2["Default"] = "Default";
      FullDocument2["UpdateLookup"] = "UpdateLookup";
    })(FullDocument = exports2.FullDocument || (exports2.FullDocument = {}));
    var FunctionResponseType;
    (function(FunctionResponseType2) {
      FunctionResponseType2["ReportBatchItemFailures"] = "ReportBatchItemFailures";
    })(FunctionResponseType = exports2.FunctionResponseType || (exports2.FunctionResponseType = {}));
    var EndPointType;
    (function(EndPointType2) {
      EndPointType2["KAFKA_BOOTSTRAP_SERVERS"] = "KAFKA_BOOTSTRAP_SERVERS";
    })(EndPointType = exports2.EndPointType || (exports2.EndPointType = {}));
    var SourceAccessType;
    (function(SourceAccessType2) {
      SourceAccessType2["BASIC_AUTH"] = "BASIC_AUTH";
      SourceAccessType2["CLIENT_CERTIFICATE_TLS_AUTH"] = "CLIENT_CERTIFICATE_TLS_AUTH";
      SourceAccessType2["SASL_SCRAM_256_AUTH"] = "SASL_SCRAM_256_AUTH";
      SourceAccessType2["SASL_SCRAM_512_AUTH"] = "SASL_SCRAM_512_AUTH";
      SourceAccessType2["SERVER_ROOT_CA_CERTIFICATE"] = "SERVER_ROOT_CA_CERTIFICATE";
      SourceAccessType2["VIRTUAL_HOST"] = "VIRTUAL_HOST";
      SourceAccessType2["VPC_SECURITY_GROUP"] = "VPC_SECURITY_GROUP";
      SourceAccessType2["VPC_SUBNET"] = "VPC_SUBNET";
    })(SourceAccessType = exports2.SourceAccessType || (exports2.SourceAccessType = {}));
    var EventSourcePosition;
    (function(EventSourcePosition2) {
      EventSourcePosition2["AT_TIMESTAMP"] = "AT_TIMESTAMP";
      EventSourcePosition2["LATEST"] = "LATEST";
      EventSourcePosition2["TRIM_HORIZON"] = "TRIM_HORIZON";
    })(EventSourcePosition = exports2.EventSourcePosition || (exports2.EventSourcePosition = {}));
    var CodeSigningConfigNotFoundException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "CodeSigningConfigNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "CodeSigningConfigNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CodeSigningConfigNotFoundException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.CodeSigningConfigNotFoundException = CodeSigningConfigNotFoundException;
    var CodeStorageExceededException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "CodeStorageExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "CodeStorageExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CodeStorageExceededException.prototype);
        this.Type = opts.Type;
      }
    };
    exports2.CodeStorageExceededException = CodeStorageExceededException;
    var CodeVerificationFailedException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "CodeVerificationFailedException",
          $fault: "client",
          ...opts
        });
        this.name = "CodeVerificationFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CodeVerificationFailedException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.CodeVerificationFailedException = CodeVerificationFailedException;
    var PackageType;
    (function(PackageType2) {
      PackageType2["Image"] = "Image";
      PackageType2["Zip"] = "Zip";
    })(PackageType = exports2.PackageType || (exports2.PackageType = {}));
    var Runtime;
    (function(Runtime2) {
      Runtime2["dotnet6"] = "dotnet6";
      Runtime2["dotnetcore10"] = "dotnetcore1.0";
      Runtime2["dotnetcore20"] = "dotnetcore2.0";
      Runtime2["dotnetcore21"] = "dotnetcore2.1";
      Runtime2["dotnetcore31"] = "dotnetcore3.1";
      Runtime2["go1x"] = "go1.x";
      Runtime2["java11"] = "java11";
      Runtime2["java8"] = "java8";
      Runtime2["java8al2"] = "java8.al2";
      Runtime2["nodejs"] = "nodejs";
      Runtime2["nodejs10x"] = "nodejs10.x";
      Runtime2["nodejs12x"] = "nodejs12.x";
      Runtime2["nodejs14x"] = "nodejs14.x";
      Runtime2["nodejs16x"] = "nodejs16.x";
      Runtime2["nodejs18x"] = "nodejs18.x";
      Runtime2["nodejs43"] = "nodejs4.3";
      Runtime2["nodejs43edge"] = "nodejs4.3-edge";
      Runtime2["nodejs610"] = "nodejs6.10";
      Runtime2["nodejs810"] = "nodejs8.10";
      Runtime2["provided"] = "provided";
      Runtime2["providedal2"] = "provided.al2";
      Runtime2["python27"] = "python2.7";
      Runtime2["python36"] = "python3.6";
      Runtime2["python37"] = "python3.7";
      Runtime2["python38"] = "python3.8";
      Runtime2["python39"] = "python3.9";
      Runtime2["ruby25"] = "ruby2.5";
      Runtime2["ruby27"] = "ruby2.7";
    })(Runtime = exports2.Runtime || (exports2.Runtime = {}));
    var SnapStartApplyOn;
    (function(SnapStartApplyOn2) {
      SnapStartApplyOn2["None"] = "None";
      SnapStartApplyOn2["PublishedVersions"] = "PublishedVersions";
    })(SnapStartApplyOn = exports2.SnapStartApplyOn || (exports2.SnapStartApplyOn = {}));
    var TracingMode;
    (function(TracingMode2) {
      TracingMode2["Active"] = "Active";
      TracingMode2["PassThrough"] = "PassThrough";
    })(TracingMode = exports2.TracingMode || (exports2.TracingMode = {}));
    var LastUpdateStatus;
    (function(LastUpdateStatus2) {
      LastUpdateStatus2["Failed"] = "Failed";
      LastUpdateStatus2["InProgress"] = "InProgress";
      LastUpdateStatus2["Successful"] = "Successful";
    })(LastUpdateStatus = exports2.LastUpdateStatus || (exports2.LastUpdateStatus = {}));
    var LastUpdateStatusReasonCode;
    (function(LastUpdateStatusReasonCode2) {
      LastUpdateStatusReasonCode2["DisabledKMSKey"] = "DisabledKMSKey";
      LastUpdateStatusReasonCode2["EFSIOError"] = "EFSIOError";
      LastUpdateStatusReasonCode2["EFSMountConnectivityError"] = "EFSMountConnectivityError";
      LastUpdateStatusReasonCode2["EFSMountFailure"] = "EFSMountFailure";
      LastUpdateStatusReasonCode2["EFSMountTimeout"] = "EFSMountTimeout";
      LastUpdateStatusReasonCode2["EniLimitExceeded"] = "EniLimitExceeded";
      LastUpdateStatusReasonCode2["FunctionError"] = "FunctionError";
      LastUpdateStatusReasonCode2["ImageAccessDenied"] = "ImageAccessDenied";
      LastUpdateStatusReasonCode2["ImageDeleted"] = "ImageDeleted";
      LastUpdateStatusReasonCode2["InsufficientRolePermissions"] = "InsufficientRolePermissions";
      LastUpdateStatusReasonCode2["InternalError"] = "InternalError";
      LastUpdateStatusReasonCode2["InvalidConfiguration"] = "InvalidConfiguration";
      LastUpdateStatusReasonCode2["InvalidImage"] = "InvalidImage";
      LastUpdateStatusReasonCode2["InvalidRuntime"] = "InvalidRuntime";
      LastUpdateStatusReasonCode2["InvalidSecurityGroup"] = "InvalidSecurityGroup";
      LastUpdateStatusReasonCode2["InvalidStateKMSKey"] = "InvalidStateKMSKey";
      LastUpdateStatusReasonCode2["InvalidSubnet"] = "InvalidSubnet";
      LastUpdateStatusReasonCode2["InvalidZipFileException"] = "InvalidZipFileException";
      LastUpdateStatusReasonCode2["KMSKeyAccessDenied"] = "KMSKeyAccessDenied";
      LastUpdateStatusReasonCode2["KMSKeyNotFound"] = "KMSKeyNotFound";
      LastUpdateStatusReasonCode2["SubnetOutOfIPAddresses"] = "SubnetOutOfIPAddresses";
    })(LastUpdateStatusReasonCode = exports2.LastUpdateStatusReasonCode || (exports2.LastUpdateStatusReasonCode = {}));
    var SnapStartOptimizationStatus;
    (function(SnapStartOptimizationStatus2) {
      SnapStartOptimizationStatus2["Off"] = "Off";
      SnapStartOptimizationStatus2["On"] = "On";
    })(SnapStartOptimizationStatus = exports2.SnapStartOptimizationStatus || (exports2.SnapStartOptimizationStatus = {}));
    var State;
    (function(State2) {
      State2["Active"] = "Active";
      State2["Failed"] = "Failed";
      State2["Inactive"] = "Inactive";
      State2["Pending"] = "Pending";
    })(State = exports2.State || (exports2.State = {}));
    var StateReasonCode;
    (function(StateReasonCode2) {
      StateReasonCode2["Creating"] = "Creating";
      StateReasonCode2["DisabledKMSKey"] = "DisabledKMSKey";
      StateReasonCode2["EFSIOError"] = "EFSIOError";
      StateReasonCode2["EFSMountConnectivityError"] = "EFSMountConnectivityError";
      StateReasonCode2["EFSMountFailure"] = "EFSMountFailure";
      StateReasonCode2["EFSMountTimeout"] = "EFSMountTimeout";
      StateReasonCode2["EniLimitExceeded"] = "EniLimitExceeded";
      StateReasonCode2["FunctionError"] = "FunctionError";
      StateReasonCode2["Idle"] = "Idle";
      StateReasonCode2["ImageAccessDenied"] = "ImageAccessDenied";
      StateReasonCode2["ImageDeleted"] = "ImageDeleted";
      StateReasonCode2["InsufficientRolePermissions"] = "InsufficientRolePermissions";
      StateReasonCode2["InternalError"] = "InternalError";
      StateReasonCode2["InvalidConfiguration"] = "InvalidConfiguration";
      StateReasonCode2["InvalidImage"] = "InvalidImage";
      StateReasonCode2["InvalidRuntime"] = "InvalidRuntime";
      StateReasonCode2["InvalidSecurityGroup"] = "InvalidSecurityGroup";
      StateReasonCode2["InvalidStateKMSKey"] = "InvalidStateKMSKey";
      StateReasonCode2["InvalidSubnet"] = "InvalidSubnet";
      StateReasonCode2["InvalidZipFileException"] = "InvalidZipFileException";
      StateReasonCode2["KMSKeyAccessDenied"] = "KMSKeyAccessDenied";
      StateReasonCode2["KMSKeyNotFound"] = "KMSKeyNotFound";
      StateReasonCode2["Restoring"] = "Restoring";
      StateReasonCode2["SubnetOutOfIPAddresses"] = "SubnetOutOfIPAddresses";
    })(StateReasonCode = exports2.StateReasonCode || (exports2.StateReasonCode = {}));
    var InvalidCodeSignatureException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "InvalidCodeSignatureException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidCodeSignatureException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidCodeSignatureException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.InvalidCodeSignatureException = InvalidCodeSignatureException;
    var ResourceInUseException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "ResourceInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.ResourceInUseException = ResourceInUseException;
    var ProvisionedConcurrencyStatusEnum;
    (function(ProvisionedConcurrencyStatusEnum2) {
      ProvisionedConcurrencyStatusEnum2["FAILED"] = "FAILED";
      ProvisionedConcurrencyStatusEnum2["IN_PROGRESS"] = "IN_PROGRESS";
      ProvisionedConcurrencyStatusEnum2["READY"] = "READY";
    })(ProvisionedConcurrencyStatusEnum = exports2.ProvisionedConcurrencyStatusEnum || (exports2.ProvisionedConcurrencyStatusEnum = {}));
    var ProvisionedConcurrencyConfigNotFoundException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "ProvisionedConcurrencyConfigNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ProvisionedConcurrencyConfigNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ProvisionedConcurrencyConfigNotFoundException.prototype);
        this.Type = opts.Type;
      }
    };
    exports2.ProvisionedConcurrencyConfigNotFoundException = ProvisionedConcurrencyConfigNotFoundException;
    var UpdateRuntimeOn;
    (function(UpdateRuntimeOn2) {
      UpdateRuntimeOn2["Auto"] = "Auto";
      UpdateRuntimeOn2["FunctionUpdate"] = "FunctionUpdate";
      UpdateRuntimeOn2["Manual"] = "Manual";
    })(UpdateRuntimeOn = exports2.UpdateRuntimeOn || (exports2.UpdateRuntimeOn = {}));
    var EC2AccessDeniedException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "EC2AccessDeniedException",
          $fault: "server",
          ...opts
        });
        this.name = "EC2AccessDeniedException";
        this.$fault = "server";
        Object.setPrototypeOf(this, EC2AccessDeniedException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.EC2AccessDeniedException = EC2AccessDeniedException;
    var EC2ThrottledException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "EC2ThrottledException",
          $fault: "server",
          ...opts
        });
        this.name = "EC2ThrottledException";
        this.$fault = "server";
        Object.setPrototypeOf(this, EC2ThrottledException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.EC2ThrottledException = EC2ThrottledException;
    var EC2UnexpectedException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "EC2UnexpectedException",
          $fault: "server",
          ...opts
        });
        this.name = "EC2UnexpectedException";
        this.$fault = "server";
        Object.setPrototypeOf(this, EC2UnexpectedException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
        this.EC2ErrorCode = opts.EC2ErrorCode;
      }
    };
    exports2.EC2UnexpectedException = EC2UnexpectedException;
    var EFSIOException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "EFSIOException",
          $fault: "client",
          ...opts
        });
        this.name = "EFSIOException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EFSIOException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.EFSIOException = EFSIOException;
    var EFSMountConnectivityException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "EFSMountConnectivityException",
          $fault: "client",
          ...opts
        });
        this.name = "EFSMountConnectivityException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EFSMountConnectivityException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.EFSMountConnectivityException = EFSMountConnectivityException;
    var EFSMountFailureException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "EFSMountFailureException",
          $fault: "client",
          ...opts
        });
        this.name = "EFSMountFailureException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EFSMountFailureException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.EFSMountFailureException = EFSMountFailureException;
    var EFSMountTimeoutException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "EFSMountTimeoutException",
          $fault: "client",
          ...opts
        });
        this.name = "EFSMountTimeoutException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EFSMountTimeoutException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.EFSMountTimeoutException = EFSMountTimeoutException;
    var ENILimitReachedException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "ENILimitReachedException",
          $fault: "server",
          ...opts
        });
        this.name = "ENILimitReachedException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ENILimitReachedException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.ENILimitReachedException = ENILimitReachedException;
    var InvalidRequestContentException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestContentException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestContentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestContentException.prototype);
        this.Type = opts.Type;
      }
    };
    exports2.InvalidRequestContentException = InvalidRequestContentException;
    var InvalidRuntimeException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "InvalidRuntimeException",
          $fault: "server",
          ...opts
        });
        this.name = "InvalidRuntimeException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InvalidRuntimeException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.InvalidRuntimeException = InvalidRuntimeException;
    var InvalidSecurityGroupIDException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "InvalidSecurityGroupIDException",
          $fault: "server",
          ...opts
        });
        this.name = "InvalidSecurityGroupIDException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InvalidSecurityGroupIDException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.InvalidSecurityGroupIDException = InvalidSecurityGroupIDException;
    var InvalidSubnetIDException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "InvalidSubnetIDException",
          $fault: "server",
          ...opts
        });
        this.name = "InvalidSubnetIDException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InvalidSubnetIDException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.InvalidSubnetIDException = InvalidSubnetIDException;
    var InvalidZipFileException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "InvalidZipFileException",
          $fault: "server",
          ...opts
        });
        this.name = "InvalidZipFileException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InvalidZipFileException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.InvalidZipFileException = InvalidZipFileException;
    var InvocationType;
    (function(InvocationType2) {
      InvocationType2["DryRun"] = "DryRun";
      InvocationType2["Event"] = "Event";
      InvocationType2["RequestResponse"] = "RequestResponse";
    })(InvocationType = exports2.InvocationType || (exports2.InvocationType = {}));
    var LogType;
    (function(LogType2) {
      LogType2["None"] = "None";
      LogType2["Tail"] = "Tail";
    })(LogType = exports2.LogType || (exports2.LogType = {}));
    var KMSAccessDeniedException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "KMSAccessDeniedException",
          $fault: "server",
          ...opts
        });
        this.name = "KMSAccessDeniedException";
        this.$fault = "server";
        Object.setPrototypeOf(this, KMSAccessDeniedException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.KMSAccessDeniedException = KMSAccessDeniedException;
    var KMSDisabledException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "KMSDisabledException",
          $fault: "server",
          ...opts
        });
        this.name = "KMSDisabledException";
        this.$fault = "server";
        Object.setPrototypeOf(this, KMSDisabledException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.KMSDisabledException = KMSDisabledException;
    var KMSInvalidStateException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "KMSInvalidStateException",
          $fault: "server",
          ...opts
        });
        this.name = "KMSInvalidStateException";
        this.$fault = "server";
        Object.setPrototypeOf(this, KMSInvalidStateException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.KMSInvalidStateException = KMSInvalidStateException;
    var KMSNotFoundException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "KMSNotFoundException",
          $fault: "server",
          ...opts
        });
        this.name = "KMSNotFoundException";
        this.$fault = "server";
        Object.setPrototypeOf(this, KMSNotFoundException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.KMSNotFoundException = KMSNotFoundException;
    var RequestTooLargeException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "RequestTooLargeException",
          $fault: "client",
          ...opts
        });
        this.name = "RequestTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RequestTooLargeException.prototype);
        this.Type = opts.Type;
      }
    };
    exports2.RequestTooLargeException = RequestTooLargeException;
    var ResourceNotReadyException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotReadyException",
          $fault: "server",
          ...opts
        });
        this.name = "ResourceNotReadyException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ResourceNotReadyException.prototype);
        this.Type = opts.Type;
      }
    };
    exports2.ResourceNotReadyException = ResourceNotReadyException;
    var SnapStartException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "SnapStartException",
          $fault: "client",
          ...opts
        });
        this.name = "SnapStartException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SnapStartException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.SnapStartException = SnapStartException;
    var SnapStartNotReadyException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "SnapStartNotReadyException",
          $fault: "client",
          ...opts
        });
        this.name = "SnapStartNotReadyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SnapStartNotReadyException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.SnapStartNotReadyException = SnapStartNotReadyException;
    var SnapStartTimeoutException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "SnapStartTimeoutException",
          $fault: "client",
          ...opts
        });
        this.name = "SnapStartTimeoutException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SnapStartTimeoutException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.SnapStartTimeoutException = SnapStartTimeoutException;
    var SubnetIPAddressLimitReachedException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "SubnetIPAddressLimitReachedException",
          $fault: "server",
          ...opts
        });
        this.name = "SubnetIPAddressLimitReachedException";
        this.$fault = "server";
        Object.setPrototypeOf(this, SubnetIPAddressLimitReachedException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports2.SubnetIPAddressLimitReachedException = SubnetIPAddressLimitReachedException;
    var UnsupportedMediaTypeException = class extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedMediaTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedMediaTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedMediaTypeException.prototype);
        this.Type = opts.Type;
      }
    };
    exports2.UnsupportedMediaTypeException = UnsupportedMediaTypeException;
    var FunctionVersion;
    (function(FunctionVersion2) {
      FunctionVersion2["ALL"] = "ALL";
    })(FunctionVersion = exports2.FunctionVersion || (exports2.FunctionVersion = {}));
    var AccountLimitFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AccountLimitFilterSensitiveLog = AccountLimitFilterSensitiveLog;
    var AccountUsageFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AccountUsageFilterSensitiveLog = AccountUsageFilterSensitiveLog;
    var AddLayerVersionPermissionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AddLayerVersionPermissionRequestFilterSensitiveLog = AddLayerVersionPermissionRequestFilterSensitiveLog;
    var AddLayerVersionPermissionResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AddLayerVersionPermissionResponseFilterSensitiveLog = AddLayerVersionPermissionResponseFilterSensitiveLog;
    var AddPermissionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AddPermissionRequestFilterSensitiveLog = AddPermissionRequestFilterSensitiveLog;
    var AddPermissionResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AddPermissionResponseFilterSensitiveLog = AddPermissionResponseFilterSensitiveLog;
    var AliasRoutingConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AliasRoutingConfigurationFilterSensitiveLog = AliasRoutingConfigurationFilterSensitiveLog;
    var AliasConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AliasConfigurationFilterSensitiveLog = AliasConfigurationFilterSensitiveLog;
    var AllowedPublishersFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AllowedPublishersFilterSensitiveLog = AllowedPublishersFilterSensitiveLog;
    var AmazonManagedKafkaEventSourceConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AmazonManagedKafkaEventSourceConfigFilterSensitiveLog = AmazonManagedKafkaEventSourceConfigFilterSensitiveLog;
    var CreateAliasRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateAliasRequestFilterSensitiveLog = CreateAliasRequestFilterSensitiveLog;
    var CodeSigningPoliciesFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CodeSigningPoliciesFilterSensitiveLog = CodeSigningPoliciesFilterSensitiveLog;
    var CreateCodeSigningConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateCodeSigningConfigRequestFilterSensitiveLog = CreateCodeSigningConfigRequestFilterSensitiveLog;
    var CodeSigningConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CodeSigningConfigFilterSensitiveLog = CodeSigningConfigFilterSensitiveLog;
    var CreateCodeSigningConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateCodeSigningConfigResponseFilterSensitiveLog = CreateCodeSigningConfigResponseFilterSensitiveLog;
    var OnFailureFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.OnFailureFilterSensitiveLog = OnFailureFilterSensitiveLog;
    var OnSuccessFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.OnSuccessFilterSensitiveLog = OnSuccessFilterSensitiveLog;
    var DestinationConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DestinationConfigFilterSensitiveLog = DestinationConfigFilterSensitiveLog;
    var DocumentDBEventSourceConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DocumentDBEventSourceConfigFilterSensitiveLog = DocumentDBEventSourceConfigFilterSensitiveLog;
    var FilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.FilterFilterSensitiveLog = FilterFilterSensitiveLog;
    var FilterCriteriaFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.FilterCriteriaFilterSensitiveLog = FilterCriteriaFilterSensitiveLog;
    var ScalingConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ScalingConfigFilterSensitiveLog = ScalingConfigFilterSensitiveLog;
    var SelfManagedEventSourceFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.SelfManagedEventSourceFilterSensitiveLog = SelfManagedEventSourceFilterSensitiveLog;
    var SelfManagedKafkaEventSourceConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.SelfManagedKafkaEventSourceConfigFilterSensitiveLog = SelfManagedKafkaEventSourceConfigFilterSensitiveLog;
    var SourceAccessConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.SourceAccessConfigurationFilterSensitiveLog = SourceAccessConfigurationFilterSensitiveLog;
    var CreateEventSourceMappingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateEventSourceMappingRequestFilterSensitiveLog = CreateEventSourceMappingRequestFilterSensitiveLog;
    var EventSourceMappingConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.EventSourceMappingConfigurationFilterSensitiveLog = EventSourceMappingConfigurationFilterSensitiveLog;
    var FunctionCodeFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ZipFile && { ZipFile: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.FunctionCodeFilterSensitiveLog = FunctionCodeFilterSensitiveLog;
    var DeadLetterConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeadLetterConfigFilterSensitiveLog = DeadLetterConfigFilterSensitiveLog;
    var EnvironmentFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Variables && { Variables: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.EnvironmentFilterSensitiveLog = EnvironmentFilterSensitiveLog;
    var EphemeralStorageFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.EphemeralStorageFilterSensitiveLog = EphemeralStorageFilterSensitiveLog;
    var FileSystemConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.FileSystemConfigFilterSensitiveLog = FileSystemConfigFilterSensitiveLog;
    var ImageConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ImageConfigFilterSensitiveLog = ImageConfigFilterSensitiveLog;
    var SnapStartFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.SnapStartFilterSensitiveLog = SnapStartFilterSensitiveLog;
    var TracingConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TracingConfigFilterSensitiveLog = TracingConfigFilterSensitiveLog;
    var VpcConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.VpcConfigFilterSensitiveLog = VpcConfigFilterSensitiveLog;
    var CreateFunctionRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Code && { Code: (0, exports2.FunctionCodeFilterSensitiveLog)(obj.Code) },
      ...obj.Environment && { Environment: (0, exports2.EnvironmentFilterSensitiveLog)(obj.Environment) }
    });
    exports2.CreateFunctionRequestFilterSensitiveLog = CreateFunctionRequestFilterSensitiveLog;
    var EnvironmentErrorFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Message && { Message: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.EnvironmentErrorFilterSensitiveLog = EnvironmentErrorFilterSensitiveLog;
    var EnvironmentResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Variables && { Variables: smithy_client_1.SENSITIVE_STRING },
      ...obj.Error && { Error: (0, exports2.EnvironmentErrorFilterSensitiveLog)(obj.Error) }
    });
    exports2.EnvironmentResponseFilterSensitiveLog = EnvironmentResponseFilterSensitiveLog;
    var ImageConfigErrorFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Message && { Message: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.ImageConfigErrorFilterSensitiveLog = ImageConfigErrorFilterSensitiveLog;
    var ImageConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Error && { Error: (0, exports2.ImageConfigErrorFilterSensitiveLog)(obj.Error) }
    });
    exports2.ImageConfigResponseFilterSensitiveLog = ImageConfigResponseFilterSensitiveLog;
    var LayerFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.LayerFilterSensitiveLog = LayerFilterSensitiveLog;
    var RuntimeVersionErrorFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Message && { Message: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.RuntimeVersionErrorFilterSensitiveLog = RuntimeVersionErrorFilterSensitiveLog;
    var RuntimeVersionConfigFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Error && { Error: (0, exports2.RuntimeVersionErrorFilterSensitiveLog)(obj.Error) }
    });
    exports2.RuntimeVersionConfigFilterSensitiveLog = RuntimeVersionConfigFilterSensitiveLog;
    var SnapStartResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.SnapStartResponseFilterSensitiveLog = SnapStartResponseFilterSensitiveLog;
    var TracingConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TracingConfigResponseFilterSensitiveLog = TracingConfigResponseFilterSensitiveLog;
    var VpcConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.VpcConfigResponseFilterSensitiveLog = VpcConfigResponseFilterSensitiveLog;
    var FunctionConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Environment && { Environment: (0, exports2.EnvironmentResponseFilterSensitiveLog)(obj.Environment) },
      ...obj.ImageConfigResponse && {
        ImageConfigResponse: (0, exports2.ImageConfigResponseFilterSensitiveLog)(obj.ImageConfigResponse)
      },
      ...obj.RuntimeVersionConfig && {
        RuntimeVersionConfig: (0, exports2.RuntimeVersionConfigFilterSensitiveLog)(obj.RuntimeVersionConfig)
      }
    });
    exports2.FunctionConfigurationFilterSensitiveLog = FunctionConfigurationFilterSensitiveLog;
    var CorsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CorsFilterSensitiveLog = CorsFilterSensitiveLog;
    var CreateFunctionUrlConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateFunctionUrlConfigRequestFilterSensitiveLog = CreateFunctionUrlConfigRequestFilterSensitiveLog;
    var CreateFunctionUrlConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateFunctionUrlConfigResponseFilterSensitiveLog = CreateFunctionUrlConfigResponseFilterSensitiveLog;
    var DeleteAliasRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteAliasRequestFilterSensitiveLog = DeleteAliasRequestFilterSensitiveLog;
    var DeleteCodeSigningConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteCodeSigningConfigRequestFilterSensitiveLog = DeleteCodeSigningConfigRequestFilterSensitiveLog;
    var DeleteCodeSigningConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteCodeSigningConfigResponseFilterSensitiveLog = DeleteCodeSigningConfigResponseFilterSensitiveLog;
    var DeleteEventSourceMappingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteEventSourceMappingRequestFilterSensitiveLog = DeleteEventSourceMappingRequestFilterSensitiveLog;
    var DeleteFunctionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteFunctionRequestFilterSensitiveLog = DeleteFunctionRequestFilterSensitiveLog;
    var DeleteFunctionCodeSigningConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteFunctionCodeSigningConfigRequestFilterSensitiveLog = DeleteFunctionCodeSigningConfigRequestFilterSensitiveLog;
    var DeleteFunctionConcurrencyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteFunctionConcurrencyRequestFilterSensitiveLog = DeleteFunctionConcurrencyRequestFilterSensitiveLog;
    var DeleteFunctionEventInvokeConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteFunctionEventInvokeConfigRequestFilterSensitiveLog = DeleteFunctionEventInvokeConfigRequestFilterSensitiveLog;
    var DeleteFunctionUrlConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteFunctionUrlConfigRequestFilterSensitiveLog = DeleteFunctionUrlConfigRequestFilterSensitiveLog;
    var DeleteLayerVersionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteLayerVersionRequestFilterSensitiveLog = DeleteLayerVersionRequestFilterSensitiveLog;
    var DeleteProvisionedConcurrencyConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteProvisionedConcurrencyConfigRequestFilterSensitiveLog = DeleteProvisionedConcurrencyConfigRequestFilterSensitiveLog;
    var GetAccountSettingsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetAccountSettingsRequestFilterSensitiveLog = GetAccountSettingsRequestFilterSensitiveLog;
    var GetAccountSettingsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetAccountSettingsResponseFilterSensitiveLog = GetAccountSettingsResponseFilterSensitiveLog;
    var GetAliasRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetAliasRequestFilterSensitiveLog = GetAliasRequestFilterSensitiveLog;
    var GetCodeSigningConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetCodeSigningConfigRequestFilterSensitiveLog = GetCodeSigningConfigRequestFilterSensitiveLog;
    var GetCodeSigningConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetCodeSigningConfigResponseFilterSensitiveLog = GetCodeSigningConfigResponseFilterSensitiveLog;
    var GetEventSourceMappingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetEventSourceMappingRequestFilterSensitiveLog = GetEventSourceMappingRequestFilterSensitiveLog;
    var GetFunctionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetFunctionRequestFilterSensitiveLog = GetFunctionRequestFilterSensitiveLog;
    var FunctionCodeLocationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.FunctionCodeLocationFilterSensitiveLog = FunctionCodeLocationFilterSensitiveLog;
    var ConcurrencyFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ConcurrencyFilterSensitiveLog = ConcurrencyFilterSensitiveLog;
    var GetFunctionResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Configuration && { Configuration: (0, exports2.FunctionConfigurationFilterSensitiveLog)(obj.Configuration) }
    });
    exports2.GetFunctionResponseFilterSensitiveLog = GetFunctionResponseFilterSensitiveLog;
    var GetFunctionCodeSigningConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetFunctionCodeSigningConfigRequestFilterSensitiveLog = GetFunctionCodeSigningConfigRequestFilterSensitiveLog;
    var GetFunctionCodeSigningConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetFunctionCodeSigningConfigResponseFilterSensitiveLog = GetFunctionCodeSigningConfigResponseFilterSensitiveLog;
    var GetFunctionConcurrencyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetFunctionConcurrencyRequestFilterSensitiveLog = GetFunctionConcurrencyRequestFilterSensitiveLog;
    var GetFunctionConcurrencyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetFunctionConcurrencyResponseFilterSensitiveLog = GetFunctionConcurrencyResponseFilterSensitiveLog;
    var GetFunctionConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetFunctionConfigurationRequestFilterSensitiveLog = GetFunctionConfigurationRequestFilterSensitiveLog;
    var FunctionEventInvokeConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.FunctionEventInvokeConfigFilterSensitiveLog = FunctionEventInvokeConfigFilterSensitiveLog;
    var GetFunctionEventInvokeConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetFunctionEventInvokeConfigRequestFilterSensitiveLog = GetFunctionEventInvokeConfigRequestFilterSensitiveLog;
    var GetFunctionUrlConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetFunctionUrlConfigRequestFilterSensitiveLog = GetFunctionUrlConfigRequestFilterSensitiveLog;
    var GetFunctionUrlConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetFunctionUrlConfigResponseFilterSensitiveLog = GetFunctionUrlConfigResponseFilterSensitiveLog;
    var GetLayerVersionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetLayerVersionRequestFilterSensitiveLog = GetLayerVersionRequestFilterSensitiveLog;
    var LayerVersionContentOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.LayerVersionContentOutputFilterSensitiveLog = LayerVersionContentOutputFilterSensitiveLog;
    var GetLayerVersionResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetLayerVersionResponseFilterSensitiveLog = GetLayerVersionResponseFilterSensitiveLog;
    var GetLayerVersionByArnRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetLayerVersionByArnRequestFilterSensitiveLog = GetLayerVersionByArnRequestFilterSensitiveLog;
    var GetLayerVersionPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetLayerVersionPolicyRequestFilterSensitiveLog = GetLayerVersionPolicyRequestFilterSensitiveLog;
    var GetLayerVersionPolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetLayerVersionPolicyResponseFilterSensitiveLog = GetLayerVersionPolicyResponseFilterSensitiveLog;
    var GetPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetPolicyRequestFilterSensitiveLog = GetPolicyRequestFilterSensitiveLog;
    var GetPolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetPolicyResponseFilterSensitiveLog = GetPolicyResponseFilterSensitiveLog;
    var GetProvisionedConcurrencyConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetProvisionedConcurrencyConfigRequestFilterSensitiveLog = GetProvisionedConcurrencyConfigRequestFilterSensitiveLog;
    var GetProvisionedConcurrencyConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetProvisionedConcurrencyConfigResponseFilterSensitiveLog = GetProvisionedConcurrencyConfigResponseFilterSensitiveLog;
    var GetRuntimeManagementConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetRuntimeManagementConfigRequestFilterSensitiveLog = GetRuntimeManagementConfigRequestFilterSensitiveLog;
    var GetRuntimeManagementConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetRuntimeManagementConfigResponseFilterSensitiveLog = GetRuntimeManagementConfigResponseFilterSensitiveLog;
    var InvocationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Payload && { Payload: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.InvocationRequestFilterSensitiveLog = InvocationRequestFilterSensitiveLog;
    var InvocationResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Payload && { Payload: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.InvocationResponseFilterSensitiveLog = InvocationResponseFilterSensitiveLog;
    var InvokeAsyncRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.InvokeAsyncRequestFilterSensitiveLog = InvokeAsyncRequestFilterSensitiveLog;
    var InvokeAsyncResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.InvokeAsyncResponseFilterSensitiveLog = InvokeAsyncResponseFilterSensitiveLog;
    var ListAliasesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListAliasesRequestFilterSensitiveLog = ListAliasesRequestFilterSensitiveLog;
    var ListAliasesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListAliasesResponseFilterSensitiveLog = ListAliasesResponseFilterSensitiveLog;
    var ListCodeSigningConfigsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListCodeSigningConfigsRequestFilterSensitiveLog = ListCodeSigningConfigsRequestFilterSensitiveLog;
    var ListCodeSigningConfigsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListCodeSigningConfigsResponseFilterSensitiveLog = ListCodeSigningConfigsResponseFilterSensitiveLog;
    var ListEventSourceMappingsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListEventSourceMappingsRequestFilterSensitiveLog = ListEventSourceMappingsRequestFilterSensitiveLog;
    var ListEventSourceMappingsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListEventSourceMappingsResponseFilterSensitiveLog = ListEventSourceMappingsResponseFilterSensitiveLog;
    var ListFunctionEventInvokeConfigsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListFunctionEventInvokeConfigsRequestFilterSensitiveLog = ListFunctionEventInvokeConfigsRequestFilterSensitiveLog;
    var ListFunctionEventInvokeConfigsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListFunctionEventInvokeConfigsResponseFilterSensitiveLog = ListFunctionEventInvokeConfigsResponseFilterSensitiveLog;
    var ListFunctionsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListFunctionsRequestFilterSensitiveLog = ListFunctionsRequestFilterSensitiveLog;
    var ListFunctionsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Functions && { Functions: obj.Functions.map((item) => (0, exports2.FunctionConfigurationFilterSensitiveLog)(item)) }
    });
    exports2.ListFunctionsResponseFilterSensitiveLog = ListFunctionsResponseFilterSensitiveLog;
    var ListFunctionsByCodeSigningConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListFunctionsByCodeSigningConfigRequestFilterSensitiveLog = ListFunctionsByCodeSigningConfigRequestFilterSensitiveLog;
    var ListFunctionsByCodeSigningConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListFunctionsByCodeSigningConfigResponseFilterSensitiveLog = ListFunctionsByCodeSigningConfigResponseFilterSensitiveLog;
    var ListFunctionUrlConfigsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListFunctionUrlConfigsRequestFilterSensitiveLog = ListFunctionUrlConfigsRequestFilterSensitiveLog;
    var FunctionUrlConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.FunctionUrlConfigFilterSensitiveLog = FunctionUrlConfigFilterSensitiveLog;
    var ListFunctionUrlConfigsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListFunctionUrlConfigsResponseFilterSensitiveLog = ListFunctionUrlConfigsResponseFilterSensitiveLog;
    var ListLayersRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListLayersRequestFilterSensitiveLog = ListLayersRequestFilterSensitiveLog;
    var LayerVersionsListItemFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.LayerVersionsListItemFilterSensitiveLog = LayerVersionsListItemFilterSensitiveLog;
    var LayersListItemFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.LayersListItemFilterSensitiveLog = LayersListItemFilterSensitiveLog;
    var ListLayersResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListLayersResponseFilterSensitiveLog = ListLayersResponseFilterSensitiveLog;
    var ListLayerVersionsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListLayerVersionsRequestFilterSensitiveLog = ListLayerVersionsRequestFilterSensitiveLog;
    var ListLayerVersionsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListLayerVersionsResponseFilterSensitiveLog = ListLayerVersionsResponseFilterSensitiveLog;
    var ListProvisionedConcurrencyConfigsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListProvisionedConcurrencyConfigsRequestFilterSensitiveLog = ListProvisionedConcurrencyConfigsRequestFilterSensitiveLog;
    var ProvisionedConcurrencyConfigListItemFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ProvisionedConcurrencyConfigListItemFilterSensitiveLog = ProvisionedConcurrencyConfigListItemFilterSensitiveLog;
    var ListProvisionedConcurrencyConfigsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListProvisionedConcurrencyConfigsResponseFilterSensitiveLog = ListProvisionedConcurrencyConfigsResponseFilterSensitiveLog;
    var ListTagsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListTagsRequestFilterSensitiveLog = ListTagsRequestFilterSensitiveLog;
    var ListTagsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListTagsResponseFilterSensitiveLog = ListTagsResponseFilterSensitiveLog;
    var ListVersionsByFunctionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListVersionsByFunctionRequestFilterSensitiveLog = ListVersionsByFunctionRequestFilterSensitiveLog;
    var ListVersionsByFunctionResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Versions && { Versions: obj.Versions.map((item) => (0, exports2.FunctionConfigurationFilterSensitiveLog)(item)) }
    });
    exports2.ListVersionsByFunctionResponseFilterSensitiveLog = ListVersionsByFunctionResponseFilterSensitiveLog;
    var LayerVersionContentInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ZipFile && { ZipFile: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.LayerVersionContentInputFilterSensitiveLog = LayerVersionContentInputFilterSensitiveLog;
    var PublishLayerVersionRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Content && { Content: (0, exports2.LayerVersionContentInputFilterSensitiveLog)(obj.Content) }
    });
    exports2.PublishLayerVersionRequestFilterSensitiveLog = PublishLayerVersionRequestFilterSensitiveLog;
    var PublishLayerVersionResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PublishLayerVersionResponseFilterSensitiveLog = PublishLayerVersionResponseFilterSensitiveLog;
    var PublishVersionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PublishVersionRequestFilterSensitiveLog = PublishVersionRequestFilterSensitiveLog;
    var PutFunctionCodeSigningConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutFunctionCodeSigningConfigRequestFilterSensitiveLog = PutFunctionCodeSigningConfigRequestFilterSensitiveLog;
    var PutFunctionCodeSigningConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutFunctionCodeSigningConfigResponseFilterSensitiveLog = PutFunctionCodeSigningConfigResponseFilterSensitiveLog;
    var PutFunctionConcurrencyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutFunctionConcurrencyRequestFilterSensitiveLog = PutFunctionConcurrencyRequestFilterSensitiveLog;
    var PutFunctionEventInvokeConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutFunctionEventInvokeConfigRequestFilterSensitiveLog = PutFunctionEventInvokeConfigRequestFilterSensitiveLog;
    var PutProvisionedConcurrencyConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutProvisionedConcurrencyConfigRequestFilterSensitiveLog = PutProvisionedConcurrencyConfigRequestFilterSensitiveLog;
    var PutProvisionedConcurrencyConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutProvisionedConcurrencyConfigResponseFilterSensitiveLog = PutProvisionedConcurrencyConfigResponseFilterSensitiveLog;
    var PutRuntimeManagementConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutRuntimeManagementConfigRequestFilterSensitiveLog = PutRuntimeManagementConfigRequestFilterSensitiveLog;
    var PutRuntimeManagementConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutRuntimeManagementConfigResponseFilterSensitiveLog = PutRuntimeManagementConfigResponseFilterSensitiveLog;
    var RemoveLayerVersionPermissionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RemoveLayerVersionPermissionRequestFilterSensitiveLog = RemoveLayerVersionPermissionRequestFilterSensitiveLog;
    var RemovePermissionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RemovePermissionRequestFilterSensitiveLog = RemovePermissionRequestFilterSensitiveLog;
    var TagResourceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TagResourceRequestFilterSensitiveLog = TagResourceRequestFilterSensitiveLog;
    var UntagResourceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UntagResourceRequestFilterSensitiveLog = UntagResourceRequestFilterSensitiveLog;
    var UpdateAliasRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateAliasRequestFilterSensitiveLog = UpdateAliasRequestFilterSensitiveLog;
    var UpdateCodeSigningConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateCodeSigningConfigRequestFilterSensitiveLog = UpdateCodeSigningConfigRequestFilterSensitiveLog;
    var UpdateCodeSigningConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateCodeSigningConfigResponseFilterSensitiveLog = UpdateCodeSigningConfigResponseFilterSensitiveLog;
    var UpdateEventSourceMappingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateEventSourceMappingRequestFilterSensitiveLog = UpdateEventSourceMappingRequestFilterSensitiveLog;
    var UpdateFunctionCodeRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ZipFile && { ZipFile: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.UpdateFunctionCodeRequestFilterSensitiveLog = UpdateFunctionCodeRequestFilterSensitiveLog;
    var UpdateFunctionConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Environment && { Environment: (0, exports2.EnvironmentFilterSensitiveLog)(obj.Environment) }
    });
    exports2.UpdateFunctionConfigurationRequestFilterSensitiveLog = UpdateFunctionConfigurationRequestFilterSensitiveLog;
    var UpdateFunctionEventInvokeConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateFunctionEventInvokeConfigRequestFilterSensitiveLog = UpdateFunctionEventInvokeConfigRequestFilterSensitiveLog;
    var UpdateFunctionUrlConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateFunctionUrlConfigRequestFilterSensitiveLog = UpdateFunctionUrlConfigRequestFilterSensitiveLog;
    var UpdateFunctionUrlConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateFunctionUrlConfigResponseFilterSensitiveLog = UpdateFunctionUrlConfigResponseFilterSensitiveLog;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson13 = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/protocols/Aws_restJson1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializeAws_restJson1PutFunctionCodeSigningConfigCommand = exports2.serializeAws_restJson1PublishVersionCommand = exports2.serializeAws_restJson1PublishLayerVersionCommand = exports2.serializeAws_restJson1ListVersionsByFunctionCommand = exports2.serializeAws_restJson1ListTagsCommand = exports2.serializeAws_restJson1ListProvisionedConcurrencyConfigsCommand = exports2.serializeAws_restJson1ListLayerVersionsCommand = exports2.serializeAws_restJson1ListLayersCommand = exports2.serializeAws_restJson1ListFunctionUrlConfigsCommand = exports2.serializeAws_restJson1ListFunctionsByCodeSigningConfigCommand = exports2.serializeAws_restJson1ListFunctionsCommand = exports2.serializeAws_restJson1ListFunctionEventInvokeConfigsCommand = exports2.serializeAws_restJson1ListEventSourceMappingsCommand = exports2.serializeAws_restJson1ListCodeSigningConfigsCommand = exports2.serializeAws_restJson1ListAliasesCommand = exports2.serializeAws_restJson1InvokeAsyncCommand = exports2.serializeAws_restJson1InvokeCommand = exports2.serializeAws_restJson1GetRuntimeManagementConfigCommand = exports2.serializeAws_restJson1GetProvisionedConcurrencyConfigCommand = exports2.serializeAws_restJson1GetPolicyCommand = exports2.serializeAws_restJson1GetLayerVersionPolicyCommand = exports2.serializeAws_restJson1GetLayerVersionByArnCommand = exports2.serializeAws_restJson1GetLayerVersionCommand = exports2.serializeAws_restJson1GetFunctionUrlConfigCommand = exports2.serializeAws_restJson1GetFunctionEventInvokeConfigCommand = exports2.serializeAws_restJson1GetFunctionConfigurationCommand = exports2.serializeAws_restJson1GetFunctionConcurrencyCommand = exports2.serializeAws_restJson1GetFunctionCodeSigningConfigCommand = exports2.serializeAws_restJson1GetFunctionCommand = exports2.serializeAws_restJson1GetEventSourceMappingCommand = exports2.serializeAws_restJson1GetCodeSigningConfigCommand = exports2.serializeAws_restJson1GetAliasCommand = exports2.serializeAws_restJson1GetAccountSettingsCommand = exports2.serializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand = exports2.serializeAws_restJson1DeleteLayerVersionCommand = exports2.serializeAws_restJson1DeleteFunctionUrlConfigCommand = exports2.serializeAws_restJson1DeleteFunctionEventInvokeConfigCommand = exports2.serializeAws_restJson1DeleteFunctionConcurrencyCommand = exports2.serializeAws_restJson1DeleteFunctionCodeSigningConfigCommand = exports2.serializeAws_restJson1DeleteFunctionCommand = exports2.serializeAws_restJson1DeleteEventSourceMappingCommand = exports2.serializeAws_restJson1DeleteCodeSigningConfigCommand = exports2.serializeAws_restJson1DeleteAliasCommand = exports2.serializeAws_restJson1CreateFunctionUrlConfigCommand = exports2.serializeAws_restJson1CreateFunctionCommand = exports2.serializeAws_restJson1CreateEventSourceMappingCommand = exports2.serializeAws_restJson1CreateCodeSigningConfigCommand = exports2.serializeAws_restJson1CreateAliasCommand = exports2.serializeAws_restJson1AddPermissionCommand = exports2.serializeAws_restJson1AddLayerVersionPermissionCommand = void 0;
    exports2.deserializeAws_restJson1InvokeAsyncCommand = exports2.deserializeAws_restJson1InvokeCommand = exports2.deserializeAws_restJson1GetRuntimeManagementConfigCommand = exports2.deserializeAws_restJson1GetProvisionedConcurrencyConfigCommand = exports2.deserializeAws_restJson1GetPolicyCommand = exports2.deserializeAws_restJson1GetLayerVersionPolicyCommand = exports2.deserializeAws_restJson1GetLayerVersionByArnCommand = exports2.deserializeAws_restJson1GetLayerVersionCommand = exports2.deserializeAws_restJson1GetFunctionUrlConfigCommand = exports2.deserializeAws_restJson1GetFunctionEventInvokeConfigCommand = exports2.deserializeAws_restJson1GetFunctionConfigurationCommand = exports2.deserializeAws_restJson1GetFunctionConcurrencyCommand = exports2.deserializeAws_restJson1GetFunctionCodeSigningConfigCommand = exports2.deserializeAws_restJson1GetFunctionCommand = exports2.deserializeAws_restJson1GetEventSourceMappingCommand = exports2.deserializeAws_restJson1GetCodeSigningConfigCommand = exports2.deserializeAws_restJson1GetAliasCommand = exports2.deserializeAws_restJson1GetAccountSettingsCommand = exports2.deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand = exports2.deserializeAws_restJson1DeleteLayerVersionCommand = exports2.deserializeAws_restJson1DeleteFunctionUrlConfigCommand = exports2.deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommand = exports2.deserializeAws_restJson1DeleteFunctionConcurrencyCommand = exports2.deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommand = exports2.deserializeAws_restJson1DeleteFunctionCommand = exports2.deserializeAws_restJson1DeleteEventSourceMappingCommand = exports2.deserializeAws_restJson1DeleteCodeSigningConfigCommand = exports2.deserializeAws_restJson1DeleteAliasCommand = exports2.deserializeAws_restJson1CreateFunctionUrlConfigCommand = exports2.deserializeAws_restJson1CreateFunctionCommand = exports2.deserializeAws_restJson1CreateEventSourceMappingCommand = exports2.deserializeAws_restJson1CreateCodeSigningConfigCommand = exports2.deserializeAws_restJson1CreateAliasCommand = exports2.deserializeAws_restJson1AddPermissionCommand = exports2.deserializeAws_restJson1AddLayerVersionPermissionCommand = exports2.serializeAws_restJson1UpdateFunctionUrlConfigCommand = exports2.serializeAws_restJson1UpdateFunctionEventInvokeConfigCommand = exports2.serializeAws_restJson1UpdateFunctionConfigurationCommand = exports2.serializeAws_restJson1UpdateFunctionCodeCommand = exports2.serializeAws_restJson1UpdateEventSourceMappingCommand = exports2.serializeAws_restJson1UpdateCodeSigningConfigCommand = exports2.serializeAws_restJson1UpdateAliasCommand = exports2.serializeAws_restJson1UntagResourceCommand = exports2.serializeAws_restJson1TagResourceCommand = exports2.serializeAws_restJson1RemovePermissionCommand = exports2.serializeAws_restJson1RemoveLayerVersionPermissionCommand = exports2.serializeAws_restJson1PutRuntimeManagementConfigCommand = exports2.serializeAws_restJson1PutProvisionedConcurrencyConfigCommand = exports2.serializeAws_restJson1PutFunctionEventInvokeConfigCommand = exports2.serializeAws_restJson1PutFunctionConcurrencyCommand = void 0;
    exports2.deserializeAws_restJson1UpdateFunctionUrlConfigCommand = exports2.deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommand = exports2.deserializeAws_restJson1UpdateFunctionConfigurationCommand = exports2.deserializeAws_restJson1UpdateFunctionCodeCommand = exports2.deserializeAws_restJson1UpdateEventSourceMappingCommand = exports2.deserializeAws_restJson1UpdateCodeSigningConfigCommand = exports2.deserializeAws_restJson1UpdateAliasCommand = exports2.deserializeAws_restJson1UntagResourceCommand = exports2.deserializeAws_restJson1TagResourceCommand = exports2.deserializeAws_restJson1RemovePermissionCommand = exports2.deserializeAws_restJson1RemoveLayerVersionPermissionCommand = exports2.deserializeAws_restJson1PutRuntimeManagementConfigCommand = exports2.deserializeAws_restJson1PutProvisionedConcurrencyConfigCommand = exports2.deserializeAws_restJson1PutFunctionEventInvokeConfigCommand = exports2.deserializeAws_restJson1PutFunctionConcurrencyCommand = exports2.deserializeAws_restJson1PutFunctionCodeSigningConfigCommand = exports2.deserializeAws_restJson1PublishVersionCommand = exports2.deserializeAws_restJson1PublishLayerVersionCommand = exports2.deserializeAws_restJson1ListVersionsByFunctionCommand = exports2.deserializeAws_restJson1ListTagsCommand = exports2.deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommand = exports2.deserializeAws_restJson1ListLayerVersionsCommand = exports2.deserializeAws_restJson1ListLayersCommand = exports2.deserializeAws_restJson1ListFunctionUrlConfigsCommand = exports2.deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommand = exports2.deserializeAws_restJson1ListFunctionsCommand = exports2.deserializeAws_restJson1ListFunctionEventInvokeConfigsCommand = exports2.deserializeAws_restJson1ListEventSourceMappingsCommand = exports2.deserializeAws_restJson1ListCodeSigningConfigsCommand = exports2.deserializeAws_restJson1ListAliasesCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs26();
    var LambdaServiceException_1 = require_LambdaServiceException();
    var models_0_1 = require_models_05();
    var serializeAws_restJson1AddLayerVersionPermissionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
      const query = map({
        RevisionId: [, input.RevisionId]
      });
      let body;
      body = JSON.stringify({
        ...input.Action != null && { Action: input.Action },
        ...input.OrganizationId != null && { OrganizationId: input.OrganizationId },
        ...input.Principal != null && { Principal: input.Principal },
        ...input.StatementId != null && { StatementId: input.StatementId }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1AddLayerVersionPermissionCommand = serializeAws_restJson1AddLayerVersionPermissionCommand;
    var serializeAws_restJson1AddPermissionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/policy`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      body = JSON.stringify({
        ...input.Action != null && { Action: input.Action },
        ...input.EventSourceToken != null && { EventSourceToken: input.EventSourceToken },
        ...input.FunctionUrlAuthType != null && { FunctionUrlAuthType: input.FunctionUrlAuthType },
        ...input.Principal != null && { Principal: input.Principal },
        ...input.PrincipalOrgID != null && { PrincipalOrgID: input.PrincipalOrgID },
        ...input.RevisionId != null && { RevisionId: input.RevisionId },
        ...input.SourceAccount != null && { SourceAccount: input.SourceAccount },
        ...input.SourceArn != null && { SourceArn: input.SourceArn },
        ...input.StatementId != null && { StatementId: input.StatementId }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1AddPermissionCommand = serializeAws_restJson1AddPermissionCommand;
    var serializeAws_restJson1CreateAliasCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/aliases`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      body = JSON.stringify({
        ...input.Description != null && { Description: input.Description },
        ...input.FunctionVersion != null && { FunctionVersion: input.FunctionVersion },
        ...input.Name != null && { Name: input.Name },
        ...input.RoutingConfig != null && {
          RoutingConfig: serializeAws_restJson1AliasRoutingConfiguration(input.RoutingConfig, context)
        }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1CreateAliasCommand = serializeAws_restJson1CreateAliasCommand;
    var serializeAws_restJson1CreateCodeSigningConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2020-04-22/code-signing-configs`;
      let body;
      body = JSON.stringify({
        ...input.AllowedPublishers != null && {
          AllowedPublishers: serializeAws_restJson1AllowedPublishers(input.AllowedPublishers, context)
        },
        ...input.CodeSigningPolicies != null && {
          CodeSigningPolicies: serializeAws_restJson1CodeSigningPolicies(input.CodeSigningPolicies, context)
        },
        ...input.Description != null && { Description: input.Description }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1CreateCodeSigningConfigCommand = serializeAws_restJson1CreateCodeSigningConfigCommand;
    var serializeAws_restJson1CreateEventSourceMappingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/event-source-mappings`;
      let body;
      body = JSON.stringify({
        ...input.AmazonManagedKafkaEventSourceConfig != null && {
          AmazonManagedKafkaEventSourceConfig: serializeAws_restJson1AmazonManagedKafkaEventSourceConfig(input.AmazonManagedKafkaEventSourceConfig, context)
        },
        ...input.BatchSize != null && { BatchSize: input.BatchSize },
        ...input.BisectBatchOnFunctionError != null && { BisectBatchOnFunctionError: input.BisectBatchOnFunctionError },
        ...input.DestinationConfig != null && {
          DestinationConfig: serializeAws_restJson1DestinationConfig(input.DestinationConfig, context)
        },
        ...input.DocumentDBEventSourceConfig != null && {
          DocumentDBEventSourceConfig: serializeAws_restJson1DocumentDBEventSourceConfig(input.DocumentDBEventSourceConfig, context)
        },
        ...input.Enabled != null && { Enabled: input.Enabled },
        ...input.EventSourceArn != null && { EventSourceArn: input.EventSourceArn },
        ...input.FilterCriteria != null && {
          FilterCriteria: serializeAws_restJson1FilterCriteria(input.FilterCriteria, context)
        },
        ...input.FunctionName != null && { FunctionName: input.FunctionName },
        ...input.FunctionResponseTypes != null && {
          FunctionResponseTypes: serializeAws_restJson1FunctionResponseTypeList(input.FunctionResponseTypes, context)
        },
        ...input.MaximumBatchingWindowInSeconds != null && {
          MaximumBatchingWindowInSeconds: input.MaximumBatchingWindowInSeconds
        },
        ...input.MaximumRecordAgeInSeconds != null && { MaximumRecordAgeInSeconds: input.MaximumRecordAgeInSeconds },
        ...input.MaximumRetryAttempts != null && { MaximumRetryAttempts: input.MaximumRetryAttempts },
        ...input.ParallelizationFactor != null && { ParallelizationFactor: input.ParallelizationFactor },
        ...input.Queues != null && { Queues: serializeAws_restJson1Queues(input.Queues, context) },
        ...input.ScalingConfig != null && {
          ScalingConfig: serializeAws_restJson1ScalingConfig(input.ScalingConfig, context)
        },
        ...input.SelfManagedEventSource != null && {
          SelfManagedEventSource: serializeAws_restJson1SelfManagedEventSource(input.SelfManagedEventSource, context)
        },
        ...input.SelfManagedKafkaEventSourceConfig != null && {
          SelfManagedKafkaEventSourceConfig: serializeAws_restJson1SelfManagedKafkaEventSourceConfig(input.SelfManagedKafkaEventSourceConfig, context)
        },
        ...input.SourceAccessConfigurations != null && {
          SourceAccessConfigurations: serializeAws_restJson1SourceAccessConfigurations(input.SourceAccessConfigurations, context)
        },
        ...input.StartingPosition != null && { StartingPosition: input.StartingPosition },
        ...input.StartingPositionTimestamp != null && {
          StartingPositionTimestamp: Math.round(input.StartingPositionTimestamp.getTime() / 1e3)
        },
        ...input.Topics != null && { Topics: serializeAws_restJson1Topics(input.Topics, context) },
        ...input.TumblingWindowInSeconds != null && { TumblingWindowInSeconds: input.TumblingWindowInSeconds }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1CreateEventSourceMappingCommand = serializeAws_restJson1CreateEventSourceMappingCommand;
    var serializeAws_restJson1CreateFunctionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions`;
      let body;
      body = JSON.stringify({
        ...input.Architectures != null && {
          Architectures: serializeAws_restJson1ArchitecturesList(input.Architectures, context)
        },
        ...input.Code != null && { Code: serializeAws_restJson1FunctionCode(input.Code, context) },
        ...input.CodeSigningConfigArn != null && { CodeSigningConfigArn: input.CodeSigningConfigArn },
        ...input.DeadLetterConfig != null && {
          DeadLetterConfig: serializeAws_restJson1DeadLetterConfig(input.DeadLetterConfig, context)
        },
        ...input.Description != null && { Description: input.Description },
        ...input.Environment != null && { Environment: serializeAws_restJson1Environment(input.Environment, context) },
        ...input.EphemeralStorage != null && {
          EphemeralStorage: serializeAws_restJson1EphemeralStorage(input.EphemeralStorage, context)
        },
        ...input.FileSystemConfigs != null && {
          FileSystemConfigs: serializeAws_restJson1FileSystemConfigList(input.FileSystemConfigs, context)
        },
        ...input.FunctionName != null && { FunctionName: input.FunctionName },
        ...input.Handler != null && { Handler: input.Handler },
        ...input.ImageConfig != null && { ImageConfig: serializeAws_restJson1ImageConfig(input.ImageConfig, context) },
        ...input.KMSKeyArn != null && { KMSKeyArn: input.KMSKeyArn },
        ...input.Layers != null && { Layers: serializeAws_restJson1LayerList(input.Layers, context) },
        ...input.MemorySize != null && { MemorySize: input.MemorySize },
        ...input.PackageType != null && { PackageType: input.PackageType },
        ...input.Publish != null && { Publish: input.Publish },
        ...input.Role != null && { Role: input.Role },
        ...input.Runtime != null && { Runtime: input.Runtime },
        ...input.SnapStart != null && { SnapStart: serializeAws_restJson1SnapStart(input.SnapStart, context) },
        ...input.Tags != null && { Tags: serializeAws_restJson1Tags(input.Tags, context) },
        ...input.Timeout != null && { Timeout: input.Timeout },
        ...input.TracingConfig != null && {
          TracingConfig: serializeAws_restJson1TracingConfig(input.TracingConfig, context)
        },
        ...input.VpcConfig != null && { VpcConfig: serializeAws_restJson1VpcConfig(input.VpcConfig, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1CreateFunctionCommand = serializeAws_restJson1CreateFunctionCommand;
    var serializeAws_restJson1CreateFunctionUrlConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2021-10-31/functions/{FunctionName}/url`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      body = JSON.stringify({
        ...input.AuthType != null && { AuthType: input.AuthType },
        ...input.Cors != null && { Cors: serializeAws_restJson1Cors(input.Cors, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1CreateFunctionUrlConfigCommand = serializeAws_restJson1CreateFunctionUrlConfigCommand;
    var serializeAws_restJson1DeleteAliasCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/aliases/{Name}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Name", () => input.Name, "{Name}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1DeleteAliasCommand = serializeAws_restJson1DeleteAliasCommand;
    var serializeAws_restJson1DeleteCodeSigningConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2020-04-22/code-signing-configs/{CodeSigningConfigArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1DeleteCodeSigningConfigCommand = serializeAws_restJson1DeleteCodeSigningConfigCommand;
    var serializeAws_restJson1DeleteEventSourceMappingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/event-source-mappings/{UUID}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UUID", () => input.UUID, "{UUID}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1DeleteEventSourceMappingCommand = serializeAws_restJson1DeleteEventSourceMappingCommand;
    var serializeAws_restJson1DeleteFunctionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1DeleteFunctionCommand = serializeAws_restJson1DeleteFunctionCommand;
    var serializeAws_restJson1DeleteFunctionCodeSigningConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2020-06-30/functions/{FunctionName}/code-signing-config`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1DeleteFunctionCodeSigningConfigCommand = serializeAws_restJson1DeleteFunctionCodeSigningConfigCommand;
    var serializeAws_restJson1DeleteFunctionConcurrencyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2017-10-31/functions/{FunctionName}/concurrency`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1DeleteFunctionConcurrencyCommand = serializeAws_restJson1DeleteFunctionConcurrencyCommand;
    var serializeAws_restJson1DeleteFunctionEventInvokeConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-25/functions/{FunctionName}/event-invoke-config`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1DeleteFunctionEventInvokeConfigCommand = serializeAws_restJson1DeleteFunctionEventInvokeConfigCommand;
    var serializeAws_restJson1DeleteFunctionUrlConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2021-10-31/functions/{FunctionName}/url`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1DeleteFunctionUrlConfigCommand = serializeAws_restJson1DeleteFunctionUrlConfigCommand;
    var serializeAws_restJson1DeleteLayerVersionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2018-10-31/layers/{LayerName}/versions/{VersionNumber}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1DeleteLayerVersionCommand = serializeAws_restJson1DeleteLayerVersionCommand;
    var serializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-30/functions/{FunctionName}/provisioned-concurrency`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, (0, smithy_client_1.expectNonNull)(input.Qualifier, `Qualifier`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand = serializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand;
    var serializeAws_restJson1GetAccountSettingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2016-08-19/account-settings`;
      let body;
      body = "";
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1GetAccountSettingsCommand = serializeAws_restJson1GetAccountSettingsCommand;
    var serializeAws_restJson1GetAliasCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/aliases/{Name}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Name", () => input.Name, "{Name}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1GetAliasCommand = serializeAws_restJson1GetAliasCommand;
    var serializeAws_restJson1GetCodeSigningConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2020-04-22/code-signing-configs/{CodeSigningConfigArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1GetCodeSigningConfigCommand = serializeAws_restJson1GetCodeSigningConfigCommand;
    var serializeAws_restJson1GetEventSourceMappingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/event-source-mappings/{UUID}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UUID", () => input.UUID, "{UUID}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1GetEventSourceMappingCommand = serializeAws_restJson1GetEventSourceMappingCommand;
    var serializeAws_restJson1GetFunctionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1GetFunctionCommand = serializeAws_restJson1GetFunctionCommand;
    var serializeAws_restJson1GetFunctionCodeSigningConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2020-06-30/functions/{FunctionName}/code-signing-config`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1GetFunctionCodeSigningConfigCommand = serializeAws_restJson1GetFunctionCodeSigningConfigCommand;
    var serializeAws_restJson1GetFunctionConcurrencyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-30/functions/{FunctionName}/concurrency`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1GetFunctionConcurrencyCommand = serializeAws_restJson1GetFunctionConcurrencyCommand;
    var serializeAws_restJson1GetFunctionConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/configuration`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1GetFunctionConfigurationCommand = serializeAws_restJson1GetFunctionConfigurationCommand;
    var serializeAws_restJson1GetFunctionEventInvokeConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-25/functions/{FunctionName}/event-invoke-config`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1GetFunctionEventInvokeConfigCommand = serializeAws_restJson1GetFunctionEventInvokeConfigCommand;
    var serializeAws_restJson1GetFunctionUrlConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2021-10-31/functions/{FunctionName}/url`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1GetFunctionUrlConfigCommand = serializeAws_restJson1GetFunctionUrlConfigCommand;
    var serializeAws_restJson1GetLayerVersionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2018-10-31/layers/{LayerName}/versions/{VersionNumber}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1GetLayerVersionCommand = serializeAws_restJson1GetLayerVersionCommand;
    var serializeAws_restJson1GetLayerVersionByArnCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2018-10-31/layers`;
      const query = map({
        find: [, "LayerVersion"],
        Arn: [, (0, smithy_client_1.expectNonNull)(input.Arn, `Arn`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1GetLayerVersionByArnCommand = serializeAws_restJson1GetLayerVersionByArnCommand;
    var serializeAws_restJson1GetLayerVersionPolicyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1GetLayerVersionPolicyCommand = serializeAws_restJson1GetLayerVersionPolicyCommand;
    var serializeAws_restJson1GetPolicyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/policy`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1GetPolicyCommand = serializeAws_restJson1GetPolicyCommand;
    var serializeAws_restJson1GetProvisionedConcurrencyConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-30/functions/{FunctionName}/provisioned-concurrency`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, (0, smithy_client_1.expectNonNull)(input.Qualifier, `Qualifier`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1GetProvisionedConcurrencyConfigCommand = serializeAws_restJson1GetProvisionedConcurrencyConfigCommand;
    var serializeAws_restJson1GetRuntimeManagementConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2021-07-20/functions/{FunctionName}/runtime-management-config`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1GetRuntimeManagementConfigCommand = serializeAws_restJson1GetRuntimeManagementConfigCommand;
    var serializeAws_restJson1InvokeCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/octet-stream",
        "x-amz-invocation-type": input.InvocationType,
        "x-amz-log-type": input.LogType,
        "x-amz-client-context": input.ClientContext
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/invocations`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      if (input.Payload !== void 0) {
        body = input.Payload;
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1InvokeCommand = serializeAws_restJson1InvokeCommand;
    var serializeAws_restJson1InvokeAsyncCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/octet-stream"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2014-11-13/functions/{FunctionName}/invoke-async`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      if (input.InvokeArgs !== void 0) {
        body = input.InvokeArgs;
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1InvokeAsyncCommand = serializeAws_restJson1InvokeAsyncCommand;
    var serializeAws_restJson1ListAliasesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/aliases`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        FunctionVersion: [, input.FunctionVersion],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListAliasesCommand = serializeAws_restJson1ListAliasesCommand;
    var serializeAws_restJson1ListCodeSigningConfigsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2020-04-22/code-signing-configs`;
      const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListCodeSigningConfigsCommand = serializeAws_restJson1ListCodeSigningConfigsCommand;
    var serializeAws_restJson1ListEventSourceMappingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/event-source-mappings`;
      const query = map({
        EventSourceArn: [, input.EventSourceArn],
        FunctionName: [, input.FunctionName],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListEventSourceMappingsCommand = serializeAws_restJson1ListEventSourceMappingsCommand;
    var serializeAws_restJson1ListFunctionEventInvokeConfigsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-25/functions/{FunctionName}/event-invoke-config/list`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListFunctionEventInvokeConfigsCommand = serializeAws_restJson1ListFunctionEventInvokeConfigsCommand;
    var serializeAws_restJson1ListFunctionsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions`;
      const query = map({
        MasterRegion: [, input.MasterRegion],
        FunctionVersion: [, input.FunctionVersion],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListFunctionsCommand = serializeAws_restJson1ListFunctionsCommand;
    var serializeAws_restJson1ListFunctionsByCodeSigningConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2020-04-22/code-signing-configs/{CodeSigningConfigArn}/functions`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
      const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListFunctionsByCodeSigningConfigCommand = serializeAws_restJson1ListFunctionsByCodeSigningConfigCommand;
    var serializeAws_restJson1ListFunctionUrlConfigsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2021-10-31/functions/{FunctionName}/urls`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListFunctionUrlConfigsCommand = serializeAws_restJson1ListFunctionUrlConfigsCommand;
    var serializeAws_restJson1ListLayersCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2018-10-31/layers`;
      const query = map({
        CompatibleRuntime: [, input.CompatibleRuntime],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
        CompatibleArchitecture: [, input.CompatibleArchitecture]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListLayersCommand = serializeAws_restJson1ListLayersCommand;
    var serializeAws_restJson1ListLayerVersionsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2018-10-31/layers/{LayerName}/versions`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
      const query = map({
        CompatibleRuntime: [, input.CompatibleRuntime],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
        CompatibleArchitecture: [, input.CompatibleArchitecture]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListLayerVersionsCommand = serializeAws_restJson1ListLayerVersionsCommand;
    var serializeAws_restJson1ListProvisionedConcurrencyConfigsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-30/functions/{FunctionName}/provisioned-concurrency`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        List: [, "ALL"],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListProvisionedConcurrencyConfigsCommand = serializeAws_restJson1ListProvisionedConcurrencyConfigsCommand;
    var serializeAws_restJson1ListTagsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2017-03-31/tags/{Resource}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Resource", () => input.Resource, "{Resource}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1ListTagsCommand = serializeAws_restJson1ListTagsCommand;
    var serializeAws_restJson1ListVersionsByFunctionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/versions`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListVersionsByFunctionCommand = serializeAws_restJson1ListVersionsByFunctionCommand;
    var serializeAws_restJson1PublishLayerVersionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2018-10-31/layers/{LayerName}/versions`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
      let body;
      body = JSON.stringify({
        ...input.CompatibleArchitectures != null && {
          CompatibleArchitectures: serializeAws_restJson1CompatibleArchitectures(input.CompatibleArchitectures, context)
        },
        ...input.CompatibleRuntimes != null && {
          CompatibleRuntimes: serializeAws_restJson1CompatibleRuntimes(input.CompatibleRuntimes, context)
        },
        ...input.Content != null && { Content: serializeAws_restJson1LayerVersionContentInput(input.Content, context) },
        ...input.Description != null && { Description: input.Description },
        ...input.LicenseInfo != null && { LicenseInfo: input.LicenseInfo }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1PublishLayerVersionCommand = serializeAws_restJson1PublishLayerVersionCommand;
    var serializeAws_restJson1PublishVersionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/versions`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      body = JSON.stringify({
        ...input.CodeSha256 != null && { CodeSha256: input.CodeSha256 },
        ...input.Description != null && { Description: input.Description },
        ...input.RevisionId != null && { RevisionId: input.RevisionId }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1PublishVersionCommand = serializeAws_restJson1PublishVersionCommand;
    var serializeAws_restJson1PutFunctionCodeSigningConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2020-06-30/functions/{FunctionName}/code-signing-config`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      body = JSON.stringify({
        ...input.CodeSigningConfigArn != null && { CodeSigningConfigArn: input.CodeSigningConfigArn }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1PutFunctionCodeSigningConfigCommand = serializeAws_restJson1PutFunctionCodeSigningConfigCommand;
    var serializeAws_restJson1PutFunctionConcurrencyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2017-10-31/functions/{FunctionName}/concurrency`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      body = JSON.stringify({
        ...input.ReservedConcurrentExecutions != null && {
          ReservedConcurrentExecutions: input.ReservedConcurrentExecutions
        }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1PutFunctionConcurrencyCommand = serializeAws_restJson1PutFunctionConcurrencyCommand;
    var serializeAws_restJson1PutFunctionEventInvokeConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-25/functions/{FunctionName}/event-invoke-config`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      body = JSON.stringify({
        ...input.DestinationConfig != null && {
          DestinationConfig: serializeAws_restJson1DestinationConfig(input.DestinationConfig, context)
        },
        ...input.MaximumEventAgeInSeconds != null && { MaximumEventAgeInSeconds: input.MaximumEventAgeInSeconds },
        ...input.MaximumRetryAttempts != null && { MaximumRetryAttempts: input.MaximumRetryAttempts }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1PutFunctionEventInvokeConfigCommand = serializeAws_restJson1PutFunctionEventInvokeConfigCommand;
    var serializeAws_restJson1PutProvisionedConcurrencyConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-30/functions/{FunctionName}/provisioned-concurrency`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, (0, smithy_client_1.expectNonNull)(input.Qualifier, `Qualifier`)]
      });
      let body;
      body = JSON.stringify({
        ...input.ProvisionedConcurrentExecutions != null && {
          ProvisionedConcurrentExecutions: input.ProvisionedConcurrentExecutions
        }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1PutProvisionedConcurrencyConfigCommand = serializeAws_restJson1PutProvisionedConcurrencyConfigCommand;
    var serializeAws_restJson1PutRuntimeManagementConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2021-07-20/functions/{FunctionName}/runtime-management-config`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      body = JSON.stringify({
        ...input.RuntimeVersionArn != null && { RuntimeVersionArn: input.RuntimeVersionArn },
        ...input.UpdateRuntimeOn != null && { UpdateRuntimeOn: input.UpdateRuntimeOn }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1PutRuntimeManagementConfigCommand = serializeAws_restJson1PutRuntimeManagementConfigCommand;
    var serializeAws_restJson1RemoveLayerVersionPermissionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy/{StatementId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "StatementId", () => input.StatementId, "{StatementId}", false);
      const query = map({
        RevisionId: [, input.RevisionId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1RemoveLayerVersionPermissionCommand = serializeAws_restJson1RemoveLayerVersionPermissionCommand;
    var serializeAws_restJson1RemovePermissionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/policy/{StatementId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "StatementId", () => input.StatementId, "{StatementId}", false);
      const query = map({
        Qualifier: [, input.Qualifier],
        RevisionId: [, input.RevisionId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1RemovePermissionCommand = serializeAws_restJson1RemovePermissionCommand;
    var serializeAws_restJson1TagResourceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2017-03-31/tags/{Resource}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Resource", () => input.Resource, "{Resource}", false);
      let body;
      body = JSON.stringify({
        ...input.Tags != null && { Tags: serializeAws_restJson1Tags(input.Tags, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1TagResourceCommand = serializeAws_restJson1TagResourceCommand;
    var serializeAws_restJson1UntagResourceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2017-03-31/tags/{Resource}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Resource", () => input.Resource, "{Resource}", false);
      const query = map({
        tagKeys: [
          (0, smithy_client_1.expectNonNull)(input.TagKeys, `TagKeys`) != null,
          () => (input.TagKeys || []).map((_entry) => _entry)
        ]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1UntagResourceCommand = serializeAws_restJson1UntagResourceCommand;
    var serializeAws_restJson1UpdateAliasCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/aliases/{Name}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Name", () => input.Name, "{Name}", false);
      let body;
      body = JSON.stringify({
        ...input.Description != null && { Description: input.Description },
        ...input.FunctionVersion != null && { FunctionVersion: input.FunctionVersion },
        ...input.RevisionId != null && { RevisionId: input.RevisionId },
        ...input.RoutingConfig != null && {
          RoutingConfig: serializeAws_restJson1AliasRoutingConfiguration(input.RoutingConfig, context)
        }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1UpdateAliasCommand = serializeAws_restJson1UpdateAliasCommand;
    var serializeAws_restJson1UpdateCodeSigningConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2020-04-22/code-signing-configs/{CodeSigningConfigArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
      let body;
      body = JSON.stringify({
        ...input.AllowedPublishers != null && {
          AllowedPublishers: serializeAws_restJson1AllowedPublishers(input.AllowedPublishers, context)
        },
        ...input.CodeSigningPolicies != null && {
          CodeSigningPolicies: serializeAws_restJson1CodeSigningPolicies(input.CodeSigningPolicies, context)
        },
        ...input.Description != null && { Description: input.Description }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1UpdateCodeSigningConfigCommand = serializeAws_restJson1UpdateCodeSigningConfigCommand;
    var serializeAws_restJson1UpdateEventSourceMappingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/event-source-mappings/{UUID}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UUID", () => input.UUID, "{UUID}", false);
      let body;
      body = JSON.stringify({
        ...input.BatchSize != null && { BatchSize: input.BatchSize },
        ...input.BisectBatchOnFunctionError != null && { BisectBatchOnFunctionError: input.BisectBatchOnFunctionError },
        ...input.DestinationConfig != null && {
          DestinationConfig: serializeAws_restJson1DestinationConfig(input.DestinationConfig, context)
        },
        ...input.DocumentDBEventSourceConfig != null && {
          DocumentDBEventSourceConfig: serializeAws_restJson1DocumentDBEventSourceConfig(input.DocumentDBEventSourceConfig, context)
        },
        ...input.Enabled != null && { Enabled: input.Enabled },
        ...input.FilterCriteria != null && {
          FilterCriteria: serializeAws_restJson1FilterCriteria(input.FilterCriteria, context)
        },
        ...input.FunctionName != null && { FunctionName: input.FunctionName },
        ...input.FunctionResponseTypes != null && {
          FunctionResponseTypes: serializeAws_restJson1FunctionResponseTypeList(input.FunctionResponseTypes, context)
        },
        ...input.MaximumBatchingWindowInSeconds != null && {
          MaximumBatchingWindowInSeconds: input.MaximumBatchingWindowInSeconds
        },
        ...input.MaximumRecordAgeInSeconds != null && { MaximumRecordAgeInSeconds: input.MaximumRecordAgeInSeconds },
        ...input.MaximumRetryAttempts != null && { MaximumRetryAttempts: input.MaximumRetryAttempts },
        ...input.ParallelizationFactor != null && { ParallelizationFactor: input.ParallelizationFactor },
        ...input.ScalingConfig != null && {
          ScalingConfig: serializeAws_restJson1ScalingConfig(input.ScalingConfig, context)
        },
        ...input.SourceAccessConfigurations != null && {
          SourceAccessConfigurations: serializeAws_restJson1SourceAccessConfigurations(input.SourceAccessConfigurations, context)
        },
        ...input.TumblingWindowInSeconds != null && { TumblingWindowInSeconds: input.TumblingWindowInSeconds }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1UpdateEventSourceMappingCommand = serializeAws_restJson1UpdateEventSourceMappingCommand;
    var serializeAws_restJson1UpdateFunctionCodeCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/code`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      body = JSON.stringify({
        ...input.Architectures != null && {
          Architectures: serializeAws_restJson1ArchitecturesList(input.Architectures, context)
        },
        ...input.DryRun != null && { DryRun: input.DryRun },
        ...input.ImageUri != null && { ImageUri: input.ImageUri },
        ...input.Publish != null && { Publish: input.Publish },
        ...input.RevisionId != null && { RevisionId: input.RevisionId },
        ...input.S3Bucket != null && { S3Bucket: input.S3Bucket },
        ...input.S3Key != null && { S3Key: input.S3Key },
        ...input.S3ObjectVersion != null && { S3ObjectVersion: input.S3ObjectVersion },
        ...input.ZipFile != null && { ZipFile: context.base64Encoder(input.ZipFile) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1UpdateFunctionCodeCommand = serializeAws_restJson1UpdateFunctionCodeCommand;
    var serializeAws_restJson1UpdateFunctionConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/configuration`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      body = JSON.stringify({
        ...input.DeadLetterConfig != null && {
          DeadLetterConfig: serializeAws_restJson1DeadLetterConfig(input.DeadLetterConfig, context)
        },
        ...input.Description != null && { Description: input.Description },
        ...input.Environment != null && { Environment: serializeAws_restJson1Environment(input.Environment, context) },
        ...input.EphemeralStorage != null && {
          EphemeralStorage: serializeAws_restJson1EphemeralStorage(input.EphemeralStorage, context)
        },
        ...input.FileSystemConfigs != null && {
          FileSystemConfigs: serializeAws_restJson1FileSystemConfigList(input.FileSystemConfigs, context)
        },
        ...input.Handler != null && { Handler: input.Handler },
        ...input.ImageConfig != null && { ImageConfig: serializeAws_restJson1ImageConfig(input.ImageConfig, context) },
        ...input.KMSKeyArn != null && { KMSKeyArn: input.KMSKeyArn },
        ...input.Layers != null && { Layers: serializeAws_restJson1LayerList(input.Layers, context) },
        ...input.MemorySize != null && { MemorySize: input.MemorySize },
        ...input.RevisionId != null && { RevisionId: input.RevisionId },
        ...input.Role != null && { Role: input.Role },
        ...input.Runtime != null && { Runtime: input.Runtime },
        ...input.SnapStart != null && { SnapStart: serializeAws_restJson1SnapStart(input.SnapStart, context) },
        ...input.Timeout != null && { Timeout: input.Timeout },
        ...input.TracingConfig != null && {
          TracingConfig: serializeAws_restJson1TracingConfig(input.TracingConfig, context)
        },
        ...input.VpcConfig != null && { VpcConfig: serializeAws_restJson1VpcConfig(input.VpcConfig, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1UpdateFunctionConfigurationCommand = serializeAws_restJson1UpdateFunctionConfigurationCommand;
    var serializeAws_restJson1UpdateFunctionEventInvokeConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-25/functions/{FunctionName}/event-invoke-config`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      body = JSON.stringify({
        ...input.DestinationConfig != null && {
          DestinationConfig: serializeAws_restJson1DestinationConfig(input.DestinationConfig, context)
        },
        ...input.MaximumEventAgeInSeconds != null && { MaximumEventAgeInSeconds: input.MaximumEventAgeInSeconds },
        ...input.MaximumRetryAttempts != null && { MaximumRetryAttempts: input.MaximumRetryAttempts }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1UpdateFunctionEventInvokeConfigCommand = serializeAws_restJson1UpdateFunctionEventInvokeConfigCommand;
    var serializeAws_restJson1UpdateFunctionUrlConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2021-10-31/functions/{FunctionName}/url`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      body = JSON.stringify({
        ...input.AuthType != null && { AuthType: input.AuthType },
        ...input.Cors != null && { Cors: serializeAws_restJson1Cors(input.Cors, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1UpdateFunctionUrlConfigCommand = serializeAws_restJson1UpdateFunctionUrlConfigCommand;
    var deserializeAws_restJson1AddLayerVersionPermissionCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1AddLayerVersionPermissionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      if (data.Statement != null) {
        contents.Statement = (0, smithy_client_1.expectString)(data.Statement);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1AddLayerVersionPermissionCommand = deserializeAws_restJson1AddLayerVersionPermissionCommand;
    var deserializeAws_restJson1AddLayerVersionPermissionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PolicyLengthExceededException":
        case "com.amazonaws.lambda#PolicyLengthExceededException":
          throw await deserializeAws_restJson1PolicyLengthExceededExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
          throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1AddPermissionCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1AddPermissionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Statement != null) {
        contents.Statement = (0, smithy_client_1.expectString)(data.Statement);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1AddPermissionCommand = deserializeAws_restJson1AddPermissionCommand;
    var deserializeAws_restJson1AddPermissionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PolicyLengthExceededException":
        case "com.amazonaws.lambda#PolicyLengthExceededException":
          throw await deserializeAws_restJson1PolicyLengthExceededExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
          throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1CreateAliasCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateAliasCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AliasArn != null) {
        contents.AliasArn = (0, smithy_client_1.expectString)(data.AliasArn);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.FunctionVersion != null) {
        contents.FunctionVersion = (0, smithy_client_1.expectString)(data.FunctionVersion);
      }
      if (data.Name != null) {
        contents.Name = (0, smithy_client_1.expectString)(data.Name);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      if (data.RoutingConfig != null) {
        contents.RoutingConfig = deserializeAws_restJson1AliasRoutingConfiguration(data.RoutingConfig, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1CreateAliasCommand = deserializeAws_restJson1CreateAliasCommand;
    var deserializeAws_restJson1CreateAliasCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1CreateCodeSigningConfigCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateCodeSigningConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CodeSigningConfig != null) {
        contents.CodeSigningConfig = deserializeAws_restJson1CodeSigningConfig(data.CodeSigningConfig, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1CreateCodeSigningConfigCommand = deserializeAws_restJson1CreateCodeSigningConfigCommand;
    var deserializeAws_restJson1CreateCodeSigningConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1CreateEventSourceMappingCommand = async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateEventSourceMappingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AmazonManagedKafkaEventSourceConfig != null) {
        contents.AmazonManagedKafkaEventSourceConfig = deserializeAws_restJson1AmazonManagedKafkaEventSourceConfig(data.AmazonManagedKafkaEventSourceConfig, context);
      }
      if (data.BatchSize != null) {
        contents.BatchSize = (0, smithy_client_1.expectInt32)(data.BatchSize);
      }
      if (data.BisectBatchOnFunctionError != null) {
        contents.BisectBatchOnFunctionError = (0, smithy_client_1.expectBoolean)(data.BisectBatchOnFunctionError);
      }
      if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
      }
      if (data.DocumentDBEventSourceConfig != null) {
        contents.DocumentDBEventSourceConfig = deserializeAws_restJson1DocumentDBEventSourceConfig(data.DocumentDBEventSourceConfig, context);
      }
      if (data.EventSourceArn != null) {
        contents.EventSourceArn = (0, smithy_client_1.expectString)(data.EventSourceArn);
      }
      if (data.FilterCriteria != null) {
        contents.FilterCriteria = deserializeAws_restJson1FilterCriteria(data.FilterCriteria, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionResponseTypes != null) {
        contents.FunctionResponseTypes = deserializeAws_restJson1FunctionResponseTypeList(data.FunctionResponseTypes, context);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
      }
      if (data.LastProcessingResult != null) {
        contents.LastProcessingResult = (0, smithy_client_1.expectString)(data.LastProcessingResult);
      }
      if (data.MaximumBatchingWindowInSeconds != null) {
        contents.MaximumBatchingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumBatchingWindowInSeconds);
      }
      if (data.MaximumRecordAgeInSeconds != null) {
        contents.MaximumRecordAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumRecordAgeInSeconds);
      }
      if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
      }
      if (data.ParallelizationFactor != null) {
        contents.ParallelizationFactor = (0, smithy_client_1.expectInt32)(data.ParallelizationFactor);
      }
      if (data.Queues != null) {
        contents.Queues = deserializeAws_restJson1Queues(data.Queues, context);
      }
      if (data.ScalingConfig != null) {
        contents.ScalingConfig = deserializeAws_restJson1ScalingConfig(data.ScalingConfig, context);
      }
      if (data.SelfManagedEventSource != null) {
        contents.SelfManagedEventSource = deserializeAws_restJson1SelfManagedEventSource(data.SelfManagedEventSource, context);
      }
      if (data.SelfManagedKafkaEventSourceConfig != null) {
        contents.SelfManagedKafkaEventSourceConfig = deserializeAws_restJson1SelfManagedKafkaEventSourceConfig(data.SelfManagedKafkaEventSourceConfig, context);
      }
      if (data.SourceAccessConfigurations != null) {
        contents.SourceAccessConfigurations = deserializeAws_restJson1SourceAccessConfigurations(data.SourceAccessConfigurations, context);
      }
      if (data.StartingPosition != null) {
        contents.StartingPosition = (0, smithy_client_1.expectString)(data.StartingPosition);
      }
      if (data.StartingPositionTimestamp != null) {
        contents.StartingPositionTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.StartingPositionTimestamp)));
      }
      if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
      }
      if (data.StateTransitionReason != null) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(data.StateTransitionReason);
      }
      if (data.Topics != null) {
        contents.Topics = deserializeAws_restJson1Topics(data.Topics, context);
      }
      if (data.TumblingWindowInSeconds != null) {
        contents.TumblingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.TumblingWindowInSeconds);
      }
      if (data.UUID != null) {
        contents.UUID = (0, smithy_client_1.expectString)(data.UUID);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1CreateEventSourceMappingCommand = deserializeAws_restJson1CreateEventSourceMappingCommand;
    var deserializeAws_restJson1CreateEventSourceMappingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1CreateFunctionCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateFunctionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Architectures != null) {
        contents.Architectures = deserializeAws_restJson1ArchitecturesList(data.Architectures, context);
      }
      if (data.CodeSha256 != null) {
        contents.CodeSha256 = (0, smithy_client_1.expectString)(data.CodeSha256);
      }
      if (data.CodeSize != null) {
        contents.CodeSize = (0, smithy_client_1.expectLong)(data.CodeSize);
      }
      if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = deserializeAws_restJson1DeadLetterConfig(data.DeadLetterConfig, context);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.Environment != null) {
        contents.Environment = deserializeAws_restJson1EnvironmentResponse(data.Environment, context);
      }
      if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = deserializeAws_restJson1EphemeralStorage(data.EphemeralStorage, context);
      }
      if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = deserializeAws_restJson1FileSystemConfigList(data.FileSystemConfigs, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
      }
      if (data.Handler != null) {
        contents.Handler = (0, smithy_client_1.expectString)(data.Handler);
      }
      if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = deserializeAws_restJson1ImageConfigResponse(data.ImageConfigResponse, context);
      }
      if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = (0, smithy_client_1.expectString)(data.KMSKeyArn);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
      }
      if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = (0, smithy_client_1.expectString)(data.LastUpdateStatus);
      }
      if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = (0, smithy_client_1.expectString)(data.LastUpdateStatusReason);
      }
      if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = (0, smithy_client_1.expectString)(data.LastUpdateStatusReasonCode);
      }
      if (data.Layers != null) {
        contents.Layers = deserializeAws_restJson1LayersReferenceList(data.Layers, context);
      }
      if (data.MasterArn != null) {
        contents.MasterArn = (0, smithy_client_1.expectString)(data.MasterArn);
      }
      if (data.MemorySize != null) {
        contents.MemorySize = (0, smithy_client_1.expectInt32)(data.MemorySize);
      }
      if (data.PackageType != null) {
        contents.PackageType = (0, smithy_client_1.expectString)(data.PackageType);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      if (data.Role != null) {
        contents.Role = (0, smithy_client_1.expectString)(data.Role);
      }
      if (data.Runtime != null) {
        contents.Runtime = (0, smithy_client_1.expectString)(data.Runtime);
      }
      if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = deserializeAws_restJson1RuntimeVersionConfig(data.RuntimeVersionConfig, context);
      }
      if (data.SigningJobArn != null) {
        contents.SigningJobArn = (0, smithy_client_1.expectString)(data.SigningJobArn);
      }
      if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = (0, smithy_client_1.expectString)(data.SigningProfileVersionArn);
      }
      if (data.SnapStart != null) {
        contents.SnapStart = deserializeAws_restJson1SnapStartResponse(data.SnapStart, context);
      }
      if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
      }
      if (data.StateReason != null) {
        contents.StateReason = (0, smithy_client_1.expectString)(data.StateReason);
      }
      if (data.StateReasonCode != null) {
        contents.StateReasonCode = (0, smithy_client_1.expectString)(data.StateReasonCode);
      }
      if (data.Timeout != null) {
        contents.Timeout = (0, smithy_client_1.expectInt32)(data.Timeout);
      }
      if (data.TracingConfig != null) {
        contents.TracingConfig = deserializeAws_restJson1TracingConfigResponse(data.TracingConfig, context);
      }
      if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectString)(data.Version);
      }
      if (data.VpcConfig != null) {
        contents.VpcConfig = deserializeAws_restJson1VpcConfigResponse(data.VpcConfig, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1CreateFunctionCommand = deserializeAws_restJson1CreateFunctionCommand;
    var deserializeAws_restJson1CreateFunctionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
          throw await deserializeAws_restJson1CodeSigningConfigNotFoundExceptionResponse(parsedOutput, context);
        case "CodeStorageExceededException":
        case "com.amazonaws.lambda#CodeStorageExceededException":
          throw await deserializeAws_restJson1CodeStorageExceededExceptionResponse(parsedOutput, context);
        case "CodeVerificationFailedException":
        case "com.amazonaws.lambda#CodeVerificationFailedException":
          throw await deserializeAws_restJson1CodeVerificationFailedExceptionResponse(parsedOutput, context);
        case "InvalidCodeSignatureException":
        case "com.amazonaws.lambda#InvalidCodeSignatureException":
          throw await deserializeAws_restJson1InvalidCodeSignatureExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1CreateFunctionUrlConfigCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateFunctionUrlConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AuthType != null) {
        contents.AuthType = (0, smithy_client_1.expectString)(data.AuthType);
      }
      if (data.Cors != null) {
        contents.Cors = deserializeAws_restJson1Cors(data.Cors, context);
      }
      if (data.CreationTime != null) {
        contents.CreationTime = (0, smithy_client_1.expectString)(data.CreationTime);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionUrl != null) {
        contents.FunctionUrl = (0, smithy_client_1.expectString)(data.FunctionUrl);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1CreateFunctionUrlConfigCommand = deserializeAws_restJson1CreateFunctionUrlConfigCommand;
    var deserializeAws_restJson1CreateFunctionUrlConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteAliasCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteAliasCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restJson1DeleteAliasCommand = deserializeAws_restJson1DeleteAliasCommand;
    var deserializeAws_restJson1DeleteAliasCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteCodeSigningConfigCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteCodeSigningConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restJson1DeleteCodeSigningConfigCommand = deserializeAws_restJson1DeleteCodeSigningConfigCommand;
    var deserializeAws_restJson1DeleteCodeSigningConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteEventSourceMappingCommand = async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteEventSourceMappingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AmazonManagedKafkaEventSourceConfig != null) {
        contents.AmazonManagedKafkaEventSourceConfig = deserializeAws_restJson1AmazonManagedKafkaEventSourceConfig(data.AmazonManagedKafkaEventSourceConfig, context);
      }
      if (data.BatchSize != null) {
        contents.BatchSize = (0, smithy_client_1.expectInt32)(data.BatchSize);
      }
      if (data.BisectBatchOnFunctionError != null) {
        contents.BisectBatchOnFunctionError = (0, smithy_client_1.expectBoolean)(data.BisectBatchOnFunctionError);
      }
      if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
      }
      if (data.DocumentDBEventSourceConfig != null) {
        contents.DocumentDBEventSourceConfig = deserializeAws_restJson1DocumentDBEventSourceConfig(data.DocumentDBEventSourceConfig, context);
      }
      if (data.EventSourceArn != null) {
        contents.EventSourceArn = (0, smithy_client_1.expectString)(data.EventSourceArn);
      }
      if (data.FilterCriteria != null) {
        contents.FilterCriteria = deserializeAws_restJson1FilterCriteria(data.FilterCriteria, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionResponseTypes != null) {
        contents.FunctionResponseTypes = deserializeAws_restJson1FunctionResponseTypeList(data.FunctionResponseTypes, context);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
      }
      if (data.LastProcessingResult != null) {
        contents.LastProcessingResult = (0, smithy_client_1.expectString)(data.LastProcessingResult);
      }
      if (data.MaximumBatchingWindowInSeconds != null) {
        contents.MaximumBatchingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumBatchingWindowInSeconds);
      }
      if (data.MaximumRecordAgeInSeconds != null) {
        contents.MaximumRecordAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumRecordAgeInSeconds);
      }
      if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
      }
      if (data.ParallelizationFactor != null) {
        contents.ParallelizationFactor = (0, smithy_client_1.expectInt32)(data.ParallelizationFactor);
      }
      if (data.Queues != null) {
        contents.Queues = deserializeAws_restJson1Queues(data.Queues, context);
      }
      if (data.ScalingConfig != null) {
        contents.ScalingConfig = deserializeAws_restJson1ScalingConfig(data.ScalingConfig, context);
      }
      if (data.SelfManagedEventSource != null) {
        contents.SelfManagedEventSource = deserializeAws_restJson1SelfManagedEventSource(data.SelfManagedEventSource, context);
      }
      if (data.SelfManagedKafkaEventSourceConfig != null) {
        contents.SelfManagedKafkaEventSourceConfig = deserializeAws_restJson1SelfManagedKafkaEventSourceConfig(data.SelfManagedKafkaEventSourceConfig, context);
      }
      if (data.SourceAccessConfigurations != null) {
        contents.SourceAccessConfigurations = deserializeAws_restJson1SourceAccessConfigurations(data.SourceAccessConfigurations, context);
      }
      if (data.StartingPosition != null) {
        contents.StartingPosition = (0, smithy_client_1.expectString)(data.StartingPosition);
      }
      if (data.StartingPositionTimestamp != null) {
        contents.StartingPositionTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.StartingPositionTimestamp)));
      }
      if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
      }
      if (data.StateTransitionReason != null) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(data.StateTransitionReason);
      }
      if (data.Topics != null) {
        contents.Topics = deserializeAws_restJson1Topics(data.Topics, context);
      }
      if (data.TumblingWindowInSeconds != null) {
        contents.TumblingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.TumblingWindowInSeconds);
      }
      if (data.UUID != null) {
        contents.UUID = (0, smithy_client_1.expectString)(data.UUID);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1DeleteEventSourceMappingCommand = deserializeAws_restJson1DeleteEventSourceMappingCommand;
    var deserializeAws_restJson1DeleteEventSourceMappingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.lambda#ResourceInUseException":
          throw await deserializeAws_restJson1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteFunctionCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteFunctionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restJson1DeleteFunctionCommand = deserializeAws_restJson1DeleteFunctionCommand;
    var deserializeAws_restJson1DeleteFunctionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommand = deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommand;
    var deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
          throw await deserializeAws_restJson1CodeSigningConfigNotFoundExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteFunctionConcurrencyCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteFunctionConcurrencyCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restJson1DeleteFunctionConcurrencyCommand = deserializeAws_restJson1DeleteFunctionConcurrencyCommand;
    var deserializeAws_restJson1DeleteFunctionConcurrencyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommand = deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommand;
    var deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteFunctionUrlConfigCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteFunctionUrlConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restJson1DeleteFunctionUrlConfigCommand = deserializeAws_restJson1DeleteFunctionUrlConfigCommand;
    var deserializeAws_restJson1DeleteFunctionUrlConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteLayerVersionCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteLayerVersionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restJson1DeleteLayerVersionCommand = deserializeAws_restJson1DeleteLayerVersionCommand;
    var deserializeAws_restJson1DeleteLayerVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand = deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand;
    var deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetAccountSettingsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetAccountSettingsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AccountLimit != null) {
        contents.AccountLimit = deserializeAws_restJson1AccountLimit(data.AccountLimit, context);
      }
      if (data.AccountUsage != null) {
        contents.AccountUsage = deserializeAws_restJson1AccountUsage(data.AccountUsage, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetAccountSettingsCommand = deserializeAws_restJson1GetAccountSettingsCommand;
    var deserializeAws_restJson1GetAccountSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetAliasCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetAliasCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AliasArn != null) {
        contents.AliasArn = (0, smithy_client_1.expectString)(data.AliasArn);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.FunctionVersion != null) {
        contents.FunctionVersion = (0, smithy_client_1.expectString)(data.FunctionVersion);
      }
      if (data.Name != null) {
        contents.Name = (0, smithy_client_1.expectString)(data.Name);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      if (data.RoutingConfig != null) {
        contents.RoutingConfig = deserializeAws_restJson1AliasRoutingConfiguration(data.RoutingConfig, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetAliasCommand = deserializeAws_restJson1GetAliasCommand;
    var deserializeAws_restJson1GetAliasCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetCodeSigningConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetCodeSigningConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CodeSigningConfig != null) {
        contents.CodeSigningConfig = deserializeAws_restJson1CodeSigningConfig(data.CodeSigningConfig, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetCodeSigningConfigCommand = deserializeAws_restJson1GetCodeSigningConfigCommand;
    var deserializeAws_restJson1GetCodeSigningConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetEventSourceMappingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetEventSourceMappingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AmazonManagedKafkaEventSourceConfig != null) {
        contents.AmazonManagedKafkaEventSourceConfig = deserializeAws_restJson1AmazonManagedKafkaEventSourceConfig(data.AmazonManagedKafkaEventSourceConfig, context);
      }
      if (data.BatchSize != null) {
        contents.BatchSize = (0, smithy_client_1.expectInt32)(data.BatchSize);
      }
      if (data.BisectBatchOnFunctionError != null) {
        contents.BisectBatchOnFunctionError = (0, smithy_client_1.expectBoolean)(data.BisectBatchOnFunctionError);
      }
      if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
      }
      if (data.DocumentDBEventSourceConfig != null) {
        contents.DocumentDBEventSourceConfig = deserializeAws_restJson1DocumentDBEventSourceConfig(data.DocumentDBEventSourceConfig, context);
      }
      if (data.EventSourceArn != null) {
        contents.EventSourceArn = (0, smithy_client_1.expectString)(data.EventSourceArn);
      }
      if (data.FilterCriteria != null) {
        contents.FilterCriteria = deserializeAws_restJson1FilterCriteria(data.FilterCriteria, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionResponseTypes != null) {
        contents.FunctionResponseTypes = deserializeAws_restJson1FunctionResponseTypeList(data.FunctionResponseTypes, context);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
      }
      if (data.LastProcessingResult != null) {
        contents.LastProcessingResult = (0, smithy_client_1.expectString)(data.LastProcessingResult);
      }
      if (data.MaximumBatchingWindowInSeconds != null) {
        contents.MaximumBatchingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumBatchingWindowInSeconds);
      }
      if (data.MaximumRecordAgeInSeconds != null) {
        contents.MaximumRecordAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumRecordAgeInSeconds);
      }
      if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
      }
      if (data.ParallelizationFactor != null) {
        contents.ParallelizationFactor = (0, smithy_client_1.expectInt32)(data.ParallelizationFactor);
      }
      if (data.Queues != null) {
        contents.Queues = deserializeAws_restJson1Queues(data.Queues, context);
      }
      if (data.ScalingConfig != null) {
        contents.ScalingConfig = deserializeAws_restJson1ScalingConfig(data.ScalingConfig, context);
      }
      if (data.SelfManagedEventSource != null) {
        contents.SelfManagedEventSource = deserializeAws_restJson1SelfManagedEventSource(data.SelfManagedEventSource, context);
      }
      if (data.SelfManagedKafkaEventSourceConfig != null) {
        contents.SelfManagedKafkaEventSourceConfig = deserializeAws_restJson1SelfManagedKafkaEventSourceConfig(data.SelfManagedKafkaEventSourceConfig, context);
      }
      if (data.SourceAccessConfigurations != null) {
        contents.SourceAccessConfigurations = deserializeAws_restJson1SourceAccessConfigurations(data.SourceAccessConfigurations, context);
      }
      if (data.StartingPosition != null) {
        contents.StartingPosition = (0, smithy_client_1.expectString)(data.StartingPosition);
      }
      if (data.StartingPositionTimestamp != null) {
        contents.StartingPositionTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.StartingPositionTimestamp)));
      }
      if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
      }
      if (data.StateTransitionReason != null) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(data.StateTransitionReason);
      }
      if (data.Topics != null) {
        contents.Topics = deserializeAws_restJson1Topics(data.Topics, context);
      }
      if (data.TumblingWindowInSeconds != null) {
        contents.TumblingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.TumblingWindowInSeconds);
      }
      if (data.UUID != null) {
        contents.UUID = (0, smithy_client_1.expectString)(data.UUID);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetEventSourceMappingCommand = deserializeAws_restJson1GetEventSourceMappingCommand;
    var deserializeAws_restJson1GetEventSourceMappingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetFunctionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetFunctionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Code != null) {
        contents.Code = deserializeAws_restJson1FunctionCodeLocation(data.Code, context);
      }
      if (data.Concurrency != null) {
        contents.Concurrency = deserializeAws_restJson1Concurrency(data.Concurrency, context);
      }
      if (data.Configuration != null) {
        contents.Configuration = deserializeAws_restJson1FunctionConfiguration(data.Configuration, context);
      }
      if (data.Tags != null) {
        contents.Tags = deserializeAws_restJson1Tags(data.Tags, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetFunctionCommand = deserializeAws_restJson1GetFunctionCommand;
    var deserializeAws_restJson1GetFunctionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetFunctionCodeSigningConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetFunctionCodeSigningConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CodeSigningConfigArn != null) {
        contents.CodeSigningConfigArn = (0, smithy_client_1.expectString)(data.CodeSigningConfigArn);
      }
      if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetFunctionCodeSigningConfigCommand = deserializeAws_restJson1GetFunctionCodeSigningConfigCommand;
    var deserializeAws_restJson1GetFunctionCodeSigningConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetFunctionConcurrencyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetFunctionConcurrencyCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.ReservedConcurrentExecutions != null) {
        contents.ReservedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.ReservedConcurrentExecutions);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetFunctionConcurrencyCommand = deserializeAws_restJson1GetFunctionConcurrencyCommand;
    var deserializeAws_restJson1GetFunctionConcurrencyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetFunctionConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetFunctionConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Architectures != null) {
        contents.Architectures = deserializeAws_restJson1ArchitecturesList(data.Architectures, context);
      }
      if (data.CodeSha256 != null) {
        contents.CodeSha256 = (0, smithy_client_1.expectString)(data.CodeSha256);
      }
      if (data.CodeSize != null) {
        contents.CodeSize = (0, smithy_client_1.expectLong)(data.CodeSize);
      }
      if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = deserializeAws_restJson1DeadLetterConfig(data.DeadLetterConfig, context);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.Environment != null) {
        contents.Environment = deserializeAws_restJson1EnvironmentResponse(data.Environment, context);
      }
      if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = deserializeAws_restJson1EphemeralStorage(data.EphemeralStorage, context);
      }
      if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = deserializeAws_restJson1FileSystemConfigList(data.FileSystemConfigs, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
      }
      if (data.Handler != null) {
        contents.Handler = (0, smithy_client_1.expectString)(data.Handler);
      }
      if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = deserializeAws_restJson1ImageConfigResponse(data.ImageConfigResponse, context);
      }
      if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = (0, smithy_client_1.expectString)(data.KMSKeyArn);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
      }
      if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = (0, smithy_client_1.expectString)(data.LastUpdateStatus);
      }
      if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = (0, smithy_client_1.expectString)(data.LastUpdateStatusReason);
      }
      if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = (0, smithy_client_1.expectString)(data.LastUpdateStatusReasonCode);
      }
      if (data.Layers != null) {
        contents.Layers = deserializeAws_restJson1LayersReferenceList(data.Layers, context);
      }
      if (data.MasterArn != null) {
        contents.MasterArn = (0, smithy_client_1.expectString)(data.MasterArn);
      }
      if (data.MemorySize != null) {
        contents.MemorySize = (0, smithy_client_1.expectInt32)(data.MemorySize);
      }
      if (data.PackageType != null) {
        contents.PackageType = (0, smithy_client_1.expectString)(data.PackageType);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      if (data.Role != null) {
        contents.Role = (0, smithy_client_1.expectString)(data.Role);
      }
      if (data.Runtime != null) {
        contents.Runtime = (0, smithy_client_1.expectString)(data.Runtime);
      }
      if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = deserializeAws_restJson1RuntimeVersionConfig(data.RuntimeVersionConfig, context);
      }
      if (data.SigningJobArn != null) {
        contents.SigningJobArn = (0, smithy_client_1.expectString)(data.SigningJobArn);
      }
      if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = (0, smithy_client_1.expectString)(data.SigningProfileVersionArn);
      }
      if (data.SnapStart != null) {
        contents.SnapStart = deserializeAws_restJson1SnapStartResponse(data.SnapStart, context);
      }
      if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
      }
      if (data.StateReason != null) {
        contents.StateReason = (0, smithy_client_1.expectString)(data.StateReason);
      }
      if (data.StateReasonCode != null) {
        contents.StateReasonCode = (0, smithy_client_1.expectString)(data.StateReasonCode);
      }
      if (data.Timeout != null) {
        contents.Timeout = (0, smithy_client_1.expectInt32)(data.Timeout);
      }
      if (data.TracingConfig != null) {
        contents.TracingConfig = deserializeAws_restJson1TracingConfigResponse(data.TracingConfig, context);
      }
      if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectString)(data.Version);
      }
      if (data.VpcConfig != null) {
        contents.VpcConfig = deserializeAws_restJson1VpcConfigResponse(data.VpcConfig, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetFunctionConfigurationCommand = deserializeAws_restJson1GetFunctionConfigurationCommand;
    var deserializeAws_restJson1GetFunctionConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetFunctionEventInvokeConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetFunctionEventInvokeConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
      }
      if (data.MaximumEventAgeInSeconds != null) {
        contents.MaximumEventAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumEventAgeInSeconds);
      }
      if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetFunctionEventInvokeConfigCommand = deserializeAws_restJson1GetFunctionEventInvokeConfigCommand;
    var deserializeAws_restJson1GetFunctionEventInvokeConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetFunctionUrlConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetFunctionUrlConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AuthType != null) {
        contents.AuthType = (0, smithy_client_1.expectString)(data.AuthType);
      }
      if (data.Cors != null) {
        contents.Cors = deserializeAws_restJson1Cors(data.Cors, context);
      }
      if (data.CreationTime != null) {
        contents.CreationTime = (0, smithy_client_1.expectString)(data.CreationTime);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionUrl != null) {
        contents.FunctionUrl = (0, smithy_client_1.expectString)(data.FunctionUrl);
      }
      if (data.LastModifiedTime != null) {
        contents.LastModifiedTime = (0, smithy_client_1.expectString)(data.LastModifiedTime);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetFunctionUrlConfigCommand = deserializeAws_restJson1GetFunctionUrlConfigCommand;
    var deserializeAws_restJson1GetFunctionUrlConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetLayerVersionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetLayerVersionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CompatibleArchitectures != null) {
        contents.CompatibleArchitectures = deserializeAws_restJson1CompatibleArchitectures(data.CompatibleArchitectures, context);
      }
      if (data.CompatibleRuntimes != null) {
        contents.CompatibleRuntimes = deserializeAws_restJson1CompatibleRuntimes(data.CompatibleRuntimes, context);
      }
      if (data.Content != null) {
        contents.Content = deserializeAws_restJson1LayerVersionContentOutput(data.Content, context);
      }
      if (data.CreatedDate != null) {
        contents.CreatedDate = (0, smithy_client_1.expectString)(data.CreatedDate);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.LayerArn != null) {
        contents.LayerArn = (0, smithy_client_1.expectString)(data.LayerArn);
      }
      if (data.LayerVersionArn != null) {
        contents.LayerVersionArn = (0, smithy_client_1.expectString)(data.LayerVersionArn);
      }
      if (data.LicenseInfo != null) {
        contents.LicenseInfo = (0, smithy_client_1.expectString)(data.LicenseInfo);
      }
      if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectLong)(data.Version);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetLayerVersionCommand = deserializeAws_restJson1GetLayerVersionCommand;
    var deserializeAws_restJson1GetLayerVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetLayerVersionByArnCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetLayerVersionByArnCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CompatibleArchitectures != null) {
        contents.CompatibleArchitectures = deserializeAws_restJson1CompatibleArchitectures(data.CompatibleArchitectures, context);
      }
      if (data.CompatibleRuntimes != null) {
        contents.CompatibleRuntimes = deserializeAws_restJson1CompatibleRuntimes(data.CompatibleRuntimes, context);
      }
      if (data.Content != null) {
        contents.Content = deserializeAws_restJson1LayerVersionContentOutput(data.Content, context);
      }
      if (data.CreatedDate != null) {
        contents.CreatedDate = (0, smithy_client_1.expectString)(data.CreatedDate);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.LayerArn != null) {
        contents.LayerArn = (0, smithy_client_1.expectString)(data.LayerArn);
      }
      if (data.LayerVersionArn != null) {
        contents.LayerVersionArn = (0, smithy_client_1.expectString)(data.LayerVersionArn);
      }
      if (data.LicenseInfo != null) {
        contents.LicenseInfo = (0, smithy_client_1.expectString)(data.LicenseInfo);
      }
      if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectLong)(data.Version);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetLayerVersionByArnCommand = deserializeAws_restJson1GetLayerVersionByArnCommand;
    var deserializeAws_restJson1GetLayerVersionByArnCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetLayerVersionPolicyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetLayerVersionPolicyCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Policy != null) {
        contents.Policy = (0, smithy_client_1.expectString)(data.Policy);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetLayerVersionPolicyCommand = deserializeAws_restJson1GetLayerVersionPolicyCommand;
    var deserializeAws_restJson1GetLayerVersionPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetPolicyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetPolicyCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Policy != null) {
        contents.Policy = (0, smithy_client_1.expectString)(data.Policy);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetPolicyCommand = deserializeAws_restJson1GetPolicyCommand;
    var deserializeAws_restJson1GetPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetProvisionedConcurrencyConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetProvisionedConcurrencyConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AllocatedProvisionedConcurrentExecutions != null) {
        contents.AllocatedProvisionedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.AllocatedProvisionedConcurrentExecutions);
      }
      if (data.AvailableProvisionedConcurrentExecutions != null) {
        contents.AvailableProvisionedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.AvailableProvisionedConcurrentExecutions);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
      }
      if (data.RequestedProvisionedConcurrentExecutions != null) {
        contents.RequestedProvisionedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.RequestedProvisionedConcurrentExecutions);
      }
      if (data.Status != null) {
        contents.Status = (0, smithy_client_1.expectString)(data.Status);
      }
      if (data.StatusReason != null) {
        contents.StatusReason = (0, smithy_client_1.expectString)(data.StatusReason);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetProvisionedConcurrencyConfigCommand = deserializeAws_restJson1GetProvisionedConcurrencyConfigCommand;
    var deserializeAws_restJson1GetProvisionedConcurrencyConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ProvisionedConcurrencyConfigNotFoundException":
        case "com.amazonaws.lambda#ProvisionedConcurrencyConfigNotFoundException":
          throw await deserializeAws_restJson1ProvisionedConcurrencyConfigNotFoundExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetRuntimeManagementConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRuntimeManagementConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.RuntimeVersionArn != null) {
        contents.RuntimeVersionArn = (0, smithy_client_1.expectString)(data.RuntimeVersionArn);
      }
      if (data.UpdateRuntimeOn != null) {
        contents.UpdateRuntimeOn = (0, smithy_client_1.expectString)(data.UpdateRuntimeOn);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetRuntimeManagementConfigCommand = deserializeAws_restJson1GetRuntimeManagementConfigCommand;
    var deserializeAws_restJson1GetRuntimeManagementConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1InvokeCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1InvokeCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        FunctionError: [, output.headers["x-amz-function-error"]],
        LogResult: [, output.headers["x-amz-log-result"]],
        ExecutedVersion: [, output.headers["x-amz-executed-version"]]
      });
      const data = await collectBody(output.body, context);
      contents.Payload = data;
      map(contents, {
        StatusCode: [, output.statusCode]
      });
      return contents;
    };
    exports2.deserializeAws_restJson1InvokeCommand = deserializeAws_restJson1InvokeCommand;
    var deserializeAws_restJson1InvokeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "EC2AccessDeniedException":
        case "com.amazonaws.lambda#EC2AccessDeniedException":
          throw await deserializeAws_restJson1EC2AccessDeniedExceptionResponse(parsedOutput, context);
        case "EC2ThrottledException":
        case "com.amazonaws.lambda#EC2ThrottledException":
          throw await deserializeAws_restJson1EC2ThrottledExceptionResponse(parsedOutput, context);
        case "EC2UnexpectedException":
        case "com.amazonaws.lambda#EC2UnexpectedException":
          throw await deserializeAws_restJson1EC2UnexpectedExceptionResponse(parsedOutput, context);
        case "EFSIOException":
        case "com.amazonaws.lambda#EFSIOException":
          throw await deserializeAws_restJson1EFSIOExceptionResponse(parsedOutput, context);
        case "EFSMountConnectivityException":
        case "com.amazonaws.lambda#EFSMountConnectivityException":
          throw await deserializeAws_restJson1EFSMountConnectivityExceptionResponse(parsedOutput, context);
        case "EFSMountFailureException":
        case "com.amazonaws.lambda#EFSMountFailureException":
          throw await deserializeAws_restJson1EFSMountFailureExceptionResponse(parsedOutput, context);
        case "EFSMountTimeoutException":
        case "com.amazonaws.lambda#EFSMountTimeoutException":
          throw await deserializeAws_restJson1EFSMountTimeoutExceptionResponse(parsedOutput, context);
        case "ENILimitReachedException":
        case "com.amazonaws.lambda#ENILimitReachedException":
          throw await deserializeAws_restJson1ENILimitReachedExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "InvalidRequestContentException":
        case "com.amazonaws.lambda#InvalidRequestContentException":
          throw await deserializeAws_restJson1InvalidRequestContentExceptionResponse(parsedOutput, context);
        case "InvalidRuntimeException":
        case "com.amazonaws.lambda#InvalidRuntimeException":
          throw await deserializeAws_restJson1InvalidRuntimeExceptionResponse(parsedOutput, context);
        case "InvalidSecurityGroupIDException":
        case "com.amazonaws.lambda#InvalidSecurityGroupIDException":
          throw await deserializeAws_restJson1InvalidSecurityGroupIDExceptionResponse(parsedOutput, context);
        case "InvalidSubnetIDException":
        case "com.amazonaws.lambda#InvalidSubnetIDException":
          throw await deserializeAws_restJson1InvalidSubnetIDExceptionResponse(parsedOutput, context);
        case "InvalidZipFileException":
        case "com.amazonaws.lambda#InvalidZipFileException":
          throw await deserializeAws_restJson1InvalidZipFileExceptionResponse(parsedOutput, context);
        case "KMSAccessDeniedException":
        case "com.amazonaws.lambda#KMSAccessDeniedException":
          throw await deserializeAws_restJson1KMSAccessDeniedExceptionResponse(parsedOutput, context);
        case "KMSDisabledException":
        case "com.amazonaws.lambda#KMSDisabledException":
          throw await deserializeAws_restJson1KMSDisabledExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.lambda#KMSInvalidStateException":
          throw await deserializeAws_restJson1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "KMSNotFoundException":
        case "com.amazonaws.lambda#KMSNotFoundException":
          throw await deserializeAws_restJson1KMSNotFoundExceptionResponse(parsedOutput, context);
        case "RequestTooLargeException":
        case "com.amazonaws.lambda#RequestTooLargeException":
          throw await deserializeAws_restJson1RequestTooLargeExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.lambda#ResourceNotReadyException":
          throw await deserializeAws_restJson1ResourceNotReadyExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "SnapStartException":
        case "com.amazonaws.lambda#SnapStartException":
          throw await deserializeAws_restJson1SnapStartExceptionResponse(parsedOutput, context);
        case "SnapStartNotReadyException":
        case "com.amazonaws.lambda#SnapStartNotReadyException":
          throw await deserializeAws_restJson1SnapStartNotReadyExceptionResponse(parsedOutput, context);
        case "SnapStartTimeoutException":
        case "com.amazonaws.lambda#SnapStartTimeoutException":
          throw await deserializeAws_restJson1SnapStartTimeoutExceptionResponse(parsedOutput, context);
        case "SubnetIPAddressLimitReachedException":
        case "com.amazonaws.lambda#SubnetIPAddressLimitReachedException":
          throw await deserializeAws_restJson1SubnetIPAddressLimitReachedExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnsupportedMediaTypeException":
        case "com.amazonaws.lambda#UnsupportedMediaTypeException":
          throw await deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1InvokeAsyncCommand = async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1InvokeAsyncCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      map(contents, {
        Status: [, output.statusCode]
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restJson1InvokeAsyncCommand = deserializeAws_restJson1InvokeAsyncCommand;
    var deserializeAws_restJson1InvokeAsyncCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestContentException":
        case "com.amazonaws.lambda#InvalidRequestContentException":
          throw await deserializeAws_restJson1InvalidRequestContentExceptionResponse(parsedOutput, context);
        case "InvalidRuntimeException":
        case "com.amazonaws.lambda#InvalidRuntimeException":
          throw await deserializeAws_restJson1InvalidRuntimeExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListAliasesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAliasesCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Aliases != null) {
        contents.Aliases = deserializeAws_restJson1AliasList(data.Aliases, context);
      }
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1ListAliasesCommand = deserializeAws_restJson1ListAliasesCommand;
    var deserializeAws_restJson1ListAliasesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListCodeSigningConfigsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListCodeSigningConfigsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CodeSigningConfigs != null) {
        contents.CodeSigningConfigs = deserializeAws_restJson1CodeSigningConfigList(data.CodeSigningConfigs, context);
      }
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1ListCodeSigningConfigsCommand = deserializeAws_restJson1ListCodeSigningConfigsCommand;
    var deserializeAws_restJson1ListCodeSigningConfigsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListEventSourceMappingsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListEventSourceMappingsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.EventSourceMappings != null) {
        contents.EventSourceMappings = deserializeAws_restJson1EventSourceMappingsList(data.EventSourceMappings, context);
      }
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1ListEventSourceMappingsCommand = deserializeAws_restJson1ListEventSourceMappingsCommand;
    var deserializeAws_restJson1ListEventSourceMappingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListFunctionEventInvokeConfigsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListFunctionEventInvokeConfigsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.FunctionEventInvokeConfigs != null) {
        contents.FunctionEventInvokeConfigs = deserializeAws_restJson1FunctionEventInvokeConfigList(data.FunctionEventInvokeConfigs, context);
      }
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1ListFunctionEventInvokeConfigsCommand = deserializeAws_restJson1ListFunctionEventInvokeConfigsCommand;
    var deserializeAws_restJson1ListFunctionEventInvokeConfigsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListFunctionsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListFunctionsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Functions != null) {
        contents.Functions = deserializeAws_restJson1FunctionList(data.Functions, context);
      }
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1ListFunctionsCommand = deserializeAws_restJson1ListFunctionsCommand;
    var deserializeAws_restJson1ListFunctionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.FunctionArns != null) {
        contents.FunctionArns = deserializeAws_restJson1FunctionArnList(data.FunctionArns, context);
      }
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommand = deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommand;
    var deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListFunctionUrlConfigsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListFunctionUrlConfigsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.FunctionUrlConfigs != null) {
        contents.FunctionUrlConfigs = deserializeAws_restJson1FunctionUrlConfigList(data.FunctionUrlConfigs, context);
      }
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1ListFunctionUrlConfigsCommand = deserializeAws_restJson1ListFunctionUrlConfigsCommand;
    var deserializeAws_restJson1ListFunctionUrlConfigsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListLayersCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListLayersCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Layers != null) {
        contents.Layers = deserializeAws_restJson1LayersList(data.Layers, context);
      }
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1ListLayersCommand = deserializeAws_restJson1ListLayersCommand;
    var deserializeAws_restJson1ListLayersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListLayerVersionsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListLayerVersionsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.LayerVersions != null) {
        contents.LayerVersions = deserializeAws_restJson1LayerVersionsList(data.LayerVersions, context);
      }
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1ListLayerVersionsCommand = deserializeAws_restJson1ListLayerVersionsCommand;
    var deserializeAws_restJson1ListLayerVersionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      if (data.ProvisionedConcurrencyConfigs != null) {
        contents.ProvisionedConcurrencyConfigs = deserializeAws_restJson1ProvisionedConcurrencyConfigList(data.ProvisionedConcurrencyConfigs, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommand = deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommand;
    var deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListTagsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListTagsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Tags != null) {
        contents.Tags = deserializeAws_restJson1Tags(data.Tags, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1ListTagsCommand = deserializeAws_restJson1ListTagsCommand;
    var deserializeAws_restJson1ListTagsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListVersionsByFunctionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListVersionsByFunctionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      if (data.Versions != null) {
        contents.Versions = deserializeAws_restJson1FunctionList(data.Versions, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1ListVersionsByFunctionCommand = deserializeAws_restJson1ListVersionsByFunctionCommand;
    var deserializeAws_restJson1ListVersionsByFunctionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1PublishLayerVersionCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1PublishLayerVersionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CompatibleArchitectures != null) {
        contents.CompatibleArchitectures = deserializeAws_restJson1CompatibleArchitectures(data.CompatibleArchitectures, context);
      }
      if (data.CompatibleRuntimes != null) {
        contents.CompatibleRuntimes = deserializeAws_restJson1CompatibleRuntimes(data.CompatibleRuntimes, context);
      }
      if (data.Content != null) {
        contents.Content = deserializeAws_restJson1LayerVersionContentOutput(data.Content, context);
      }
      if (data.CreatedDate != null) {
        contents.CreatedDate = (0, smithy_client_1.expectString)(data.CreatedDate);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.LayerArn != null) {
        contents.LayerArn = (0, smithy_client_1.expectString)(data.LayerArn);
      }
      if (data.LayerVersionArn != null) {
        contents.LayerVersionArn = (0, smithy_client_1.expectString)(data.LayerVersionArn);
      }
      if (data.LicenseInfo != null) {
        contents.LicenseInfo = (0, smithy_client_1.expectString)(data.LicenseInfo);
      }
      if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectLong)(data.Version);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1PublishLayerVersionCommand = deserializeAws_restJson1PublishLayerVersionCommand;
    var deserializeAws_restJson1PublishLayerVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CodeStorageExceededException":
        case "com.amazonaws.lambda#CodeStorageExceededException":
          throw await deserializeAws_restJson1CodeStorageExceededExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1PublishVersionCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1PublishVersionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Architectures != null) {
        contents.Architectures = deserializeAws_restJson1ArchitecturesList(data.Architectures, context);
      }
      if (data.CodeSha256 != null) {
        contents.CodeSha256 = (0, smithy_client_1.expectString)(data.CodeSha256);
      }
      if (data.CodeSize != null) {
        contents.CodeSize = (0, smithy_client_1.expectLong)(data.CodeSize);
      }
      if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = deserializeAws_restJson1DeadLetterConfig(data.DeadLetterConfig, context);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.Environment != null) {
        contents.Environment = deserializeAws_restJson1EnvironmentResponse(data.Environment, context);
      }
      if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = deserializeAws_restJson1EphemeralStorage(data.EphemeralStorage, context);
      }
      if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = deserializeAws_restJson1FileSystemConfigList(data.FileSystemConfigs, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
      }
      if (data.Handler != null) {
        contents.Handler = (0, smithy_client_1.expectString)(data.Handler);
      }
      if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = deserializeAws_restJson1ImageConfigResponse(data.ImageConfigResponse, context);
      }
      if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = (0, smithy_client_1.expectString)(data.KMSKeyArn);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
      }
      if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = (0, smithy_client_1.expectString)(data.LastUpdateStatus);
      }
      if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = (0, smithy_client_1.expectString)(data.LastUpdateStatusReason);
      }
      if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = (0, smithy_client_1.expectString)(data.LastUpdateStatusReasonCode);
      }
      if (data.Layers != null) {
        contents.Layers = deserializeAws_restJson1LayersReferenceList(data.Layers, context);
      }
      if (data.MasterArn != null) {
        contents.MasterArn = (0, smithy_client_1.expectString)(data.MasterArn);
      }
      if (data.MemorySize != null) {
        contents.MemorySize = (0, smithy_client_1.expectInt32)(data.MemorySize);
      }
      if (data.PackageType != null) {
        contents.PackageType = (0, smithy_client_1.expectString)(data.PackageType);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      if (data.Role != null) {
        contents.Role = (0, smithy_client_1.expectString)(data.Role);
      }
      if (data.Runtime != null) {
        contents.Runtime = (0, smithy_client_1.expectString)(data.Runtime);
      }
      if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = deserializeAws_restJson1RuntimeVersionConfig(data.RuntimeVersionConfig, context);
      }
      if (data.SigningJobArn != null) {
        contents.SigningJobArn = (0, smithy_client_1.expectString)(data.SigningJobArn);
      }
      if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = (0, smithy_client_1.expectString)(data.SigningProfileVersionArn);
      }
      if (data.SnapStart != null) {
        contents.SnapStart = deserializeAws_restJson1SnapStartResponse(data.SnapStart, context);
      }
      if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
      }
      if (data.StateReason != null) {
        contents.StateReason = (0, smithy_client_1.expectString)(data.StateReason);
      }
      if (data.StateReasonCode != null) {
        contents.StateReasonCode = (0, smithy_client_1.expectString)(data.StateReasonCode);
      }
      if (data.Timeout != null) {
        contents.Timeout = (0, smithy_client_1.expectInt32)(data.Timeout);
      }
      if (data.TracingConfig != null) {
        contents.TracingConfig = deserializeAws_restJson1TracingConfigResponse(data.TracingConfig, context);
      }
      if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectString)(data.Version);
      }
      if (data.VpcConfig != null) {
        contents.VpcConfig = deserializeAws_restJson1VpcConfigResponse(data.VpcConfig, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1PublishVersionCommand = deserializeAws_restJson1PublishVersionCommand;
    var deserializeAws_restJson1PublishVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CodeStorageExceededException":
        case "com.amazonaws.lambda#CodeStorageExceededException":
          throw await deserializeAws_restJson1CodeStorageExceededExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
          throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1PutFunctionCodeSigningConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutFunctionCodeSigningConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CodeSigningConfigArn != null) {
        contents.CodeSigningConfigArn = (0, smithy_client_1.expectString)(data.CodeSigningConfigArn);
      }
      if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1PutFunctionCodeSigningConfigCommand = deserializeAws_restJson1PutFunctionCodeSigningConfigCommand;
    var deserializeAws_restJson1PutFunctionCodeSigningConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
          throw await deserializeAws_restJson1CodeSigningConfigNotFoundExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1PutFunctionConcurrencyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutFunctionConcurrencyCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.ReservedConcurrentExecutions != null) {
        contents.ReservedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.ReservedConcurrentExecutions);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1PutFunctionConcurrencyCommand = deserializeAws_restJson1PutFunctionConcurrencyCommand;
    var deserializeAws_restJson1PutFunctionConcurrencyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1PutFunctionEventInvokeConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutFunctionEventInvokeConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
      }
      if (data.MaximumEventAgeInSeconds != null) {
        contents.MaximumEventAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumEventAgeInSeconds);
      }
      if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1PutFunctionEventInvokeConfigCommand = deserializeAws_restJson1PutFunctionEventInvokeConfigCommand;
    var deserializeAws_restJson1PutFunctionEventInvokeConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1PutProvisionedConcurrencyConfigCommand = async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutProvisionedConcurrencyConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AllocatedProvisionedConcurrentExecutions != null) {
        contents.AllocatedProvisionedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.AllocatedProvisionedConcurrentExecutions);
      }
      if (data.AvailableProvisionedConcurrentExecutions != null) {
        contents.AvailableProvisionedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.AvailableProvisionedConcurrentExecutions);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
      }
      if (data.RequestedProvisionedConcurrentExecutions != null) {
        contents.RequestedProvisionedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.RequestedProvisionedConcurrentExecutions);
      }
      if (data.Status != null) {
        contents.Status = (0, smithy_client_1.expectString)(data.Status);
      }
      if (data.StatusReason != null) {
        contents.StatusReason = (0, smithy_client_1.expectString)(data.StatusReason);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1PutProvisionedConcurrencyConfigCommand = deserializeAws_restJson1PutProvisionedConcurrencyConfigCommand;
    var deserializeAws_restJson1PutProvisionedConcurrencyConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1PutRuntimeManagementConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutRuntimeManagementConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.RuntimeVersionArn != null) {
        contents.RuntimeVersionArn = (0, smithy_client_1.expectString)(data.RuntimeVersionArn);
      }
      if (data.UpdateRuntimeOn != null) {
        contents.UpdateRuntimeOn = (0, smithy_client_1.expectString)(data.UpdateRuntimeOn);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1PutRuntimeManagementConfigCommand = deserializeAws_restJson1PutRuntimeManagementConfigCommand;
    var deserializeAws_restJson1PutRuntimeManagementConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1RemoveLayerVersionPermissionCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1RemoveLayerVersionPermissionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restJson1RemoveLayerVersionPermissionCommand = deserializeAws_restJson1RemoveLayerVersionPermissionCommand;
    var deserializeAws_restJson1RemoveLayerVersionPermissionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
          throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1RemovePermissionCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1RemovePermissionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restJson1RemovePermissionCommand = deserializeAws_restJson1RemovePermissionCommand;
    var deserializeAws_restJson1RemovePermissionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
          throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1TagResourceCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1TagResourceCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restJson1TagResourceCommand = deserializeAws_restJson1TagResourceCommand;
    var deserializeAws_restJson1TagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1UntagResourceCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1UntagResourceCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restJson1UntagResourceCommand = deserializeAws_restJson1UntagResourceCommand;
    var deserializeAws_restJson1UntagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1UpdateAliasCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateAliasCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AliasArn != null) {
        contents.AliasArn = (0, smithy_client_1.expectString)(data.AliasArn);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.FunctionVersion != null) {
        contents.FunctionVersion = (0, smithy_client_1.expectString)(data.FunctionVersion);
      }
      if (data.Name != null) {
        contents.Name = (0, smithy_client_1.expectString)(data.Name);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      if (data.RoutingConfig != null) {
        contents.RoutingConfig = deserializeAws_restJson1AliasRoutingConfiguration(data.RoutingConfig, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1UpdateAliasCommand = deserializeAws_restJson1UpdateAliasCommand;
    var deserializeAws_restJson1UpdateAliasCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
          throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1UpdateCodeSigningConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateCodeSigningConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CodeSigningConfig != null) {
        contents.CodeSigningConfig = deserializeAws_restJson1CodeSigningConfig(data.CodeSigningConfig, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1UpdateCodeSigningConfigCommand = deserializeAws_restJson1UpdateCodeSigningConfigCommand;
    var deserializeAws_restJson1UpdateCodeSigningConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1UpdateEventSourceMappingCommand = async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateEventSourceMappingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AmazonManagedKafkaEventSourceConfig != null) {
        contents.AmazonManagedKafkaEventSourceConfig = deserializeAws_restJson1AmazonManagedKafkaEventSourceConfig(data.AmazonManagedKafkaEventSourceConfig, context);
      }
      if (data.BatchSize != null) {
        contents.BatchSize = (0, smithy_client_1.expectInt32)(data.BatchSize);
      }
      if (data.BisectBatchOnFunctionError != null) {
        contents.BisectBatchOnFunctionError = (0, smithy_client_1.expectBoolean)(data.BisectBatchOnFunctionError);
      }
      if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
      }
      if (data.DocumentDBEventSourceConfig != null) {
        contents.DocumentDBEventSourceConfig = deserializeAws_restJson1DocumentDBEventSourceConfig(data.DocumentDBEventSourceConfig, context);
      }
      if (data.EventSourceArn != null) {
        contents.EventSourceArn = (0, smithy_client_1.expectString)(data.EventSourceArn);
      }
      if (data.FilterCriteria != null) {
        contents.FilterCriteria = deserializeAws_restJson1FilterCriteria(data.FilterCriteria, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionResponseTypes != null) {
        contents.FunctionResponseTypes = deserializeAws_restJson1FunctionResponseTypeList(data.FunctionResponseTypes, context);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
      }
      if (data.LastProcessingResult != null) {
        contents.LastProcessingResult = (0, smithy_client_1.expectString)(data.LastProcessingResult);
      }
      if (data.MaximumBatchingWindowInSeconds != null) {
        contents.MaximumBatchingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumBatchingWindowInSeconds);
      }
      if (data.MaximumRecordAgeInSeconds != null) {
        contents.MaximumRecordAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumRecordAgeInSeconds);
      }
      if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
      }
      if (data.ParallelizationFactor != null) {
        contents.ParallelizationFactor = (0, smithy_client_1.expectInt32)(data.ParallelizationFactor);
      }
      if (data.Queues != null) {
        contents.Queues = deserializeAws_restJson1Queues(data.Queues, context);
      }
      if (data.ScalingConfig != null) {
        contents.ScalingConfig = deserializeAws_restJson1ScalingConfig(data.ScalingConfig, context);
      }
      if (data.SelfManagedEventSource != null) {
        contents.SelfManagedEventSource = deserializeAws_restJson1SelfManagedEventSource(data.SelfManagedEventSource, context);
      }
      if (data.SelfManagedKafkaEventSourceConfig != null) {
        contents.SelfManagedKafkaEventSourceConfig = deserializeAws_restJson1SelfManagedKafkaEventSourceConfig(data.SelfManagedKafkaEventSourceConfig, context);
      }
      if (data.SourceAccessConfigurations != null) {
        contents.SourceAccessConfigurations = deserializeAws_restJson1SourceAccessConfigurations(data.SourceAccessConfigurations, context);
      }
      if (data.StartingPosition != null) {
        contents.StartingPosition = (0, smithy_client_1.expectString)(data.StartingPosition);
      }
      if (data.StartingPositionTimestamp != null) {
        contents.StartingPositionTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.StartingPositionTimestamp)));
      }
      if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
      }
      if (data.StateTransitionReason != null) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(data.StateTransitionReason);
      }
      if (data.Topics != null) {
        contents.Topics = deserializeAws_restJson1Topics(data.Topics, context);
      }
      if (data.TumblingWindowInSeconds != null) {
        contents.TumblingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.TumblingWindowInSeconds);
      }
      if (data.UUID != null) {
        contents.UUID = (0, smithy_client_1.expectString)(data.UUID);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1UpdateEventSourceMappingCommand = deserializeAws_restJson1UpdateEventSourceMappingCommand;
    var deserializeAws_restJson1UpdateEventSourceMappingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.lambda#ResourceInUseException":
          throw await deserializeAws_restJson1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1UpdateFunctionCodeCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateFunctionCodeCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Architectures != null) {
        contents.Architectures = deserializeAws_restJson1ArchitecturesList(data.Architectures, context);
      }
      if (data.CodeSha256 != null) {
        contents.CodeSha256 = (0, smithy_client_1.expectString)(data.CodeSha256);
      }
      if (data.CodeSize != null) {
        contents.CodeSize = (0, smithy_client_1.expectLong)(data.CodeSize);
      }
      if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = deserializeAws_restJson1DeadLetterConfig(data.DeadLetterConfig, context);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.Environment != null) {
        contents.Environment = deserializeAws_restJson1EnvironmentResponse(data.Environment, context);
      }
      if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = deserializeAws_restJson1EphemeralStorage(data.EphemeralStorage, context);
      }
      if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = deserializeAws_restJson1FileSystemConfigList(data.FileSystemConfigs, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
      }
      if (data.Handler != null) {
        contents.Handler = (0, smithy_client_1.expectString)(data.Handler);
      }
      if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = deserializeAws_restJson1ImageConfigResponse(data.ImageConfigResponse, context);
      }
      if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = (0, smithy_client_1.expectString)(data.KMSKeyArn);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
      }
      if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = (0, smithy_client_1.expectString)(data.LastUpdateStatus);
      }
      if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = (0, smithy_client_1.expectString)(data.LastUpdateStatusReason);
      }
      if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = (0, smithy_client_1.expectString)(data.LastUpdateStatusReasonCode);
      }
      if (data.Layers != null) {
        contents.Layers = deserializeAws_restJson1LayersReferenceList(data.Layers, context);
      }
      if (data.MasterArn != null) {
        contents.MasterArn = (0, smithy_client_1.expectString)(data.MasterArn);
      }
      if (data.MemorySize != null) {
        contents.MemorySize = (0, smithy_client_1.expectInt32)(data.MemorySize);
      }
      if (data.PackageType != null) {
        contents.PackageType = (0, smithy_client_1.expectString)(data.PackageType);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      if (data.Role != null) {
        contents.Role = (0, smithy_client_1.expectString)(data.Role);
      }
      if (data.Runtime != null) {
        contents.Runtime = (0, smithy_client_1.expectString)(data.Runtime);
      }
      if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = deserializeAws_restJson1RuntimeVersionConfig(data.RuntimeVersionConfig, context);
      }
      if (data.SigningJobArn != null) {
        contents.SigningJobArn = (0, smithy_client_1.expectString)(data.SigningJobArn);
      }
      if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = (0, smithy_client_1.expectString)(data.SigningProfileVersionArn);
      }
      if (data.SnapStart != null) {
        contents.SnapStart = deserializeAws_restJson1SnapStartResponse(data.SnapStart, context);
      }
      if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
      }
      if (data.StateReason != null) {
        contents.StateReason = (0, smithy_client_1.expectString)(data.StateReason);
      }
      if (data.StateReasonCode != null) {
        contents.StateReasonCode = (0, smithy_client_1.expectString)(data.StateReasonCode);
      }
      if (data.Timeout != null) {
        contents.Timeout = (0, smithy_client_1.expectInt32)(data.Timeout);
      }
      if (data.TracingConfig != null) {
        contents.TracingConfig = deserializeAws_restJson1TracingConfigResponse(data.TracingConfig, context);
      }
      if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectString)(data.Version);
      }
      if (data.VpcConfig != null) {
        contents.VpcConfig = deserializeAws_restJson1VpcConfigResponse(data.VpcConfig, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1UpdateFunctionCodeCommand = deserializeAws_restJson1UpdateFunctionCodeCommand;
    var deserializeAws_restJson1UpdateFunctionCodeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
          throw await deserializeAws_restJson1CodeSigningConfigNotFoundExceptionResponse(parsedOutput, context);
        case "CodeStorageExceededException":
        case "com.amazonaws.lambda#CodeStorageExceededException":
          throw await deserializeAws_restJson1CodeStorageExceededExceptionResponse(parsedOutput, context);
        case "CodeVerificationFailedException":
        case "com.amazonaws.lambda#CodeVerificationFailedException":
          throw await deserializeAws_restJson1CodeVerificationFailedExceptionResponse(parsedOutput, context);
        case "InvalidCodeSignatureException":
        case "com.amazonaws.lambda#InvalidCodeSignatureException":
          throw await deserializeAws_restJson1InvalidCodeSignatureExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
          throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1UpdateFunctionConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateFunctionConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Architectures != null) {
        contents.Architectures = deserializeAws_restJson1ArchitecturesList(data.Architectures, context);
      }
      if (data.CodeSha256 != null) {
        contents.CodeSha256 = (0, smithy_client_1.expectString)(data.CodeSha256);
      }
      if (data.CodeSize != null) {
        contents.CodeSize = (0, smithy_client_1.expectLong)(data.CodeSize);
      }
      if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = deserializeAws_restJson1DeadLetterConfig(data.DeadLetterConfig, context);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.Environment != null) {
        contents.Environment = deserializeAws_restJson1EnvironmentResponse(data.Environment, context);
      }
      if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = deserializeAws_restJson1EphemeralStorage(data.EphemeralStorage, context);
      }
      if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = deserializeAws_restJson1FileSystemConfigList(data.FileSystemConfigs, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
      }
      if (data.Handler != null) {
        contents.Handler = (0, smithy_client_1.expectString)(data.Handler);
      }
      if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = deserializeAws_restJson1ImageConfigResponse(data.ImageConfigResponse, context);
      }
      if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = (0, smithy_client_1.expectString)(data.KMSKeyArn);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
      }
      if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = (0, smithy_client_1.expectString)(data.LastUpdateStatus);
      }
      if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = (0, smithy_client_1.expectString)(data.LastUpdateStatusReason);
      }
      if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = (0, smithy_client_1.expectString)(data.LastUpdateStatusReasonCode);
      }
      if (data.Layers != null) {
        contents.Layers = deserializeAws_restJson1LayersReferenceList(data.Layers, context);
      }
      if (data.MasterArn != null) {
        contents.MasterArn = (0, smithy_client_1.expectString)(data.MasterArn);
      }
      if (data.MemorySize != null) {
        contents.MemorySize = (0, smithy_client_1.expectInt32)(data.MemorySize);
      }
      if (data.PackageType != null) {
        contents.PackageType = (0, smithy_client_1.expectString)(data.PackageType);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      if (data.Role != null) {
        contents.Role = (0, smithy_client_1.expectString)(data.Role);
      }
      if (data.Runtime != null) {
        contents.Runtime = (0, smithy_client_1.expectString)(data.Runtime);
      }
      if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = deserializeAws_restJson1RuntimeVersionConfig(data.RuntimeVersionConfig, context);
      }
      if (data.SigningJobArn != null) {
        contents.SigningJobArn = (0, smithy_client_1.expectString)(data.SigningJobArn);
      }
      if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = (0, smithy_client_1.expectString)(data.SigningProfileVersionArn);
      }
      if (data.SnapStart != null) {
        contents.SnapStart = deserializeAws_restJson1SnapStartResponse(data.SnapStart, context);
      }
      if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
      }
      if (data.StateReason != null) {
        contents.StateReason = (0, smithy_client_1.expectString)(data.StateReason);
      }
      if (data.StateReasonCode != null) {
        contents.StateReasonCode = (0, smithy_client_1.expectString)(data.StateReasonCode);
      }
      if (data.Timeout != null) {
        contents.Timeout = (0, smithy_client_1.expectInt32)(data.Timeout);
      }
      if (data.TracingConfig != null) {
        contents.TracingConfig = deserializeAws_restJson1TracingConfigResponse(data.TracingConfig, context);
      }
      if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectString)(data.Version);
      }
      if (data.VpcConfig != null) {
        contents.VpcConfig = deserializeAws_restJson1VpcConfigResponse(data.VpcConfig, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1UpdateFunctionConfigurationCommand = deserializeAws_restJson1UpdateFunctionConfigurationCommand;
    var deserializeAws_restJson1UpdateFunctionConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
          throw await deserializeAws_restJson1CodeSigningConfigNotFoundExceptionResponse(parsedOutput, context);
        case "CodeVerificationFailedException":
        case "com.amazonaws.lambda#CodeVerificationFailedException":
          throw await deserializeAws_restJson1CodeVerificationFailedExceptionResponse(parsedOutput, context);
        case "InvalidCodeSignatureException":
        case "com.amazonaws.lambda#InvalidCodeSignatureException":
          throw await deserializeAws_restJson1InvalidCodeSignatureExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
          throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
      }
      if (data.MaximumEventAgeInSeconds != null) {
        contents.MaximumEventAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumEventAgeInSeconds);
      }
      if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommand = deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommand;
    var deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1UpdateFunctionUrlConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateFunctionUrlConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AuthType != null) {
        contents.AuthType = (0, smithy_client_1.expectString)(data.AuthType);
      }
      if (data.Cors != null) {
        contents.Cors = deserializeAws_restJson1Cors(data.Cors, context);
      }
      if (data.CreationTime != null) {
        contents.CreationTime = (0, smithy_client_1.expectString)(data.CreationTime);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionUrl != null) {
        contents.FunctionUrl = (0, smithy_client_1.expectString)(data.FunctionUrl);
      }
      if (data.LastModifiedTime != null) {
        contents.LastModifiedTime = (0, smithy_client_1.expectString)(data.LastModifiedTime);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1UpdateFunctionUrlConfigCommand = deserializeAws_restJson1UpdateFunctionUrlConfigCommand;
    var deserializeAws_restJson1UpdateFunctionUrlConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var map = smithy_client_1.map;
    var deserializeAws_restJson1CodeSigningConfigNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.CodeSigningConfigNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1CodeStorageExceededExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.CodeStorageExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1CodeVerificationFailedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.CodeVerificationFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1EC2AccessDeniedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.EC2AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1EC2ThrottledExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.EC2ThrottledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1EC2UnexpectedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.EC2ErrorCode != null) {
        contents.EC2ErrorCode = (0, smithy_client_1.expectString)(data.EC2ErrorCode);
      }
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.EC2UnexpectedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1EFSIOExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.EFSIOException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1EFSMountConnectivityExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.EFSMountConnectivityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1EFSMountFailureExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.EFSMountFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1EFSMountTimeoutExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.EFSMountTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ENILimitReachedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.ENILimitReachedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidCodeSignatureExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.InvalidCodeSignatureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidParameterValueExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidRequestContentExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.InvalidRequestContentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidRuntimeExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.InvalidRuntimeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidSecurityGroupIDExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.InvalidSecurityGroupIDException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidSubnetIDExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.InvalidSubnetIDException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidZipFileExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.InvalidZipFileException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1KMSAccessDeniedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.KMSAccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1KMSDisabledExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.KMSDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1KMSInvalidStateExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.KMSInvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1KMSNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.KMSNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1PolicyLengthExceededExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.PolicyLengthExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1PreconditionFailedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.PreconditionFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ProvisionedConcurrencyConfigNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.ProvisionedConcurrencyConfigNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1RequestTooLargeExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.RequestTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceConflictExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.ResourceConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceInUseExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceNotReadyExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.ResourceNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ServiceExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.ServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1SnapStartExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.SnapStartException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1SnapStartNotReadyExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.SnapStartNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1SnapStartTimeoutExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.SnapStartTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1SubnetIPAddressLimitReachedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.SubnetIPAddressLimitReachedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
      const contents = map({
        retryAfterSeconds: [, parsedOutput.headers["retry-after"]]
      });
      const data = parsedOutput.body;
      if (data.Reason != null) {
        contents.Reason = (0, smithy_client_1.expectString)(data.Reason);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.UnsupportedMediaTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var serializeAws_restJson1AdditionalVersionWeights = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = (0, smithy_client_1.serializeFloat)(value);
        return acc;
      }, {});
    };
    var serializeAws_restJson1AliasRoutingConfiguration = (input, context) => {
      return {
        ...input.AdditionalVersionWeights != null && {
          AdditionalVersionWeights: serializeAws_restJson1AdditionalVersionWeights(input.AdditionalVersionWeights, context)
        }
      };
    };
    var serializeAws_restJson1AllowedPublishers = (input, context) => {
      return {
        ...input.SigningProfileVersionArns != null && {
          SigningProfileVersionArns: serializeAws_restJson1SigningProfileVersionArns(input.SigningProfileVersionArns, context)
        }
      };
    };
    var serializeAws_restJson1AllowMethodsList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1AllowOriginsList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1AmazonManagedKafkaEventSourceConfig = (input, context) => {
      return {
        ...input.ConsumerGroupId != null && { ConsumerGroupId: input.ConsumerGroupId }
      };
    };
    var serializeAws_restJson1ArchitecturesList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1CodeSigningPolicies = (input, context) => {
      return {
        ...input.UntrustedArtifactOnDeployment != null && {
          UntrustedArtifactOnDeployment: input.UntrustedArtifactOnDeployment
        }
      };
    };
    var serializeAws_restJson1CompatibleArchitectures = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1CompatibleRuntimes = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1Cors = (input, context) => {
      return {
        ...input.AllowCredentials != null && { AllowCredentials: input.AllowCredentials },
        ...input.AllowHeaders != null && { AllowHeaders: serializeAws_restJson1HeadersList(input.AllowHeaders, context) },
        ...input.AllowMethods != null && {
          AllowMethods: serializeAws_restJson1AllowMethodsList(input.AllowMethods, context)
        },
        ...input.AllowOrigins != null && {
          AllowOrigins: serializeAws_restJson1AllowOriginsList(input.AllowOrigins, context)
        },
        ...input.ExposeHeaders != null && {
          ExposeHeaders: serializeAws_restJson1HeadersList(input.ExposeHeaders, context)
        },
        ...input.MaxAge != null && { MaxAge: input.MaxAge }
      };
    };
    var serializeAws_restJson1DeadLetterConfig = (input, context) => {
      return {
        ...input.TargetArn != null && { TargetArn: input.TargetArn }
      };
    };
    var serializeAws_restJson1DestinationConfig = (input, context) => {
      return {
        ...input.OnFailure != null && { OnFailure: serializeAws_restJson1OnFailure(input.OnFailure, context) },
        ...input.OnSuccess != null && { OnSuccess: serializeAws_restJson1OnSuccess(input.OnSuccess, context) }
      };
    };
    var serializeAws_restJson1DocumentDBEventSourceConfig = (input, context) => {
      return {
        ...input.CollectionName != null && { CollectionName: input.CollectionName },
        ...input.DatabaseName != null && { DatabaseName: input.DatabaseName },
        ...input.FullDocument != null && { FullDocument: input.FullDocument }
      };
    };
    var serializeAws_restJson1EndpointLists = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1Endpoints = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = serializeAws_restJson1EndpointLists(value, context);
        return acc;
      }, {});
    };
    var serializeAws_restJson1Environment = (input, context) => {
      return {
        ...input.Variables != null && { Variables: serializeAws_restJson1EnvironmentVariables(input.Variables, context) }
      };
    };
    var serializeAws_restJson1EnvironmentVariables = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = value;
        return acc;
      }, {});
    };
    var serializeAws_restJson1EphemeralStorage = (input, context) => {
      return {
        ...input.Size != null && { Size: input.Size }
      };
    };
    var serializeAws_restJson1FileSystemConfig = (input, context) => {
      return {
        ...input.Arn != null && { Arn: input.Arn },
        ...input.LocalMountPath != null && { LocalMountPath: input.LocalMountPath }
      };
    };
    var serializeAws_restJson1FileSystemConfigList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_restJson1FileSystemConfig(entry, context);
      });
    };
    var serializeAws_restJson1Filter = (input, context) => {
      return {
        ...input.Pattern != null && { Pattern: input.Pattern }
      };
    };
    var serializeAws_restJson1FilterCriteria = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_restJson1FilterList(input.Filters, context) }
      };
    };
    var serializeAws_restJson1FilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_restJson1Filter(entry, context);
      });
    };
    var serializeAws_restJson1FunctionCode = (input, context) => {
      return {
        ...input.ImageUri != null && { ImageUri: input.ImageUri },
        ...input.S3Bucket != null && { S3Bucket: input.S3Bucket },
        ...input.S3Key != null && { S3Key: input.S3Key },
        ...input.S3ObjectVersion != null && { S3ObjectVersion: input.S3ObjectVersion },
        ...input.ZipFile != null && { ZipFile: context.base64Encoder(input.ZipFile) }
      };
    };
    var serializeAws_restJson1FunctionResponseTypeList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1HeadersList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1ImageConfig = (input, context) => {
      return {
        ...input.Command != null && { Command: serializeAws_restJson1StringList(input.Command, context) },
        ...input.EntryPoint != null && { EntryPoint: serializeAws_restJson1StringList(input.EntryPoint, context) },
        ...input.WorkingDirectory != null && { WorkingDirectory: input.WorkingDirectory }
      };
    };
    var serializeAws_restJson1LayerList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1LayerVersionContentInput = (input, context) => {
      return {
        ...input.S3Bucket != null && { S3Bucket: input.S3Bucket },
        ...input.S3Key != null && { S3Key: input.S3Key },
        ...input.S3ObjectVersion != null && { S3ObjectVersion: input.S3ObjectVersion },
        ...input.ZipFile != null && { ZipFile: context.base64Encoder(input.ZipFile) }
      };
    };
    var serializeAws_restJson1OnFailure = (input, context) => {
      return {
        ...input.Destination != null && { Destination: input.Destination }
      };
    };
    var serializeAws_restJson1OnSuccess = (input, context) => {
      return {
        ...input.Destination != null && { Destination: input.Destination }
      };
    };
    var serializeAws_restJson1Queues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1ScalingConfig = (input, context) => {
      return {
        ...input.MaximumConcurrency != null && { MaximumConcurrency: input.MaximumConcurrency }
      };
    };
    var serializeAws_restJson1SecurityGroupIds = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1SelfManagedEventSource = (input, context) => {
      return {
        ...input.Endpoints != null && { Endpoints: serializeAws_restJson1Endpoints(input.Endpoints, context) }
      };
    };
    var serializeAws_restJson1SelfManagedKafkaEventSourceConfig = (input, context) => {
      return {
        ...input.ConsumerGroupId != null && { ConsumerGroupId: input.ConsumerGroupId }
      };
    };
    var serializeAws_restJson1SigningProfileVersionArns = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1SnapStart = (input, context) => {
      return {
        ...input.ApplyOn != null && { ApplyOn: input.ApplyOn }
      };
    };
    var serializeAws_restJson1SourceAccessConfiguration = (input, context) => {
      return {
        ...input.Type != null && { Type: input.Type },
        ...input.URI != null && { URI: input.URI }
      };
    };
    var serializeAws_restJson1SourceAccessConfigurations = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_restJson1SourceAccessConfiguration(entry, context);
      });
    };
    var serializeAws_restJson1StringList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1SubnetIds = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1Tags = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = value;
        return acc;
      }, {});
    };
    var serializeAws_restJson1Topics = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1TracingConfig = (input, context) => {
      return {
        ...input.Mode != null && { Mode: input.Mode }
      };
    };
    var serializeAws_restJson1VpcConfig = (input, context) => {
      return {
        ...input.SecurityGroupIds != null && {
          SecurityGroupIds: serializeAws_restJson1SecurityGroupIds(input.SecurityGroupIds, context)
        },
        ...input.SubnetIds != null && { SubnetIds: serializeAws_restJson1SubnetIds(input.SubnetIds, context) }
      };
    };
    var deserializeAws_restJson1AccountLimit = (output, context) => {
      return {
        CodeSizeUnzipped: (0, smithy_client_1.expectLong)(output.CodeSizeUnzipped),
        CodeSizeZipped: (0, smithy_client_1.expectLong)(output.CodeSizeZipped),
        ConcurrentExecutions: (0, smithy_client_1.expectInt32)(output.ConcurrentExecutions),
        TotalCodeSize: (0, smithy_client_1.expectLong)(output.TotalCodeSize),
        UnreservedConcurrentExecutions: (0, smithy_client_1.expectInt32)(output.UnreservedConcurrentExecutions)
      };
    };
    var deserializeAws_restJson1AccountUsage = (output, context) => {
      return {
        FunctionCount: (0, smithy_client_1.expectLong)(output.FunctionCount),
        TotalCodeSize: (0, smithy_client_1.expectLong)(output.TotalCodeSize)
      };
    };
    var deserializeAws_restJson1AdditionalVersionWeights = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = (0, smithy_client_1.limitedParseDouble)(value);
        return acc;
      }, {});
    };
    var deserializeAws_restJson1AliasConfiguration = (output, context) => {
      return {
        AliasArn: (0, smithy_client_1.expectString)(output.AliasArn),
        Description: (0, smithy_client_1.expectString)(output.Description),
        FunctionVersion: (0, smithy_client_1.expectString)(output.FunctionVersion),
        Name: (0, smithy_client_1.expectString)(output.Name),
        RevisionId: (0, smithy_client_1.expectString)(output.RevisionId),
        RoutingConfig: output.RoutingConfig != null ? deserializeAws_restJson1AliasRoutingConfiguration(output.RoutingConfig, context) : void 0
      };
    };
    var deserializeAws_restJson1AliasList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1AliasConfiguration(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1AliasRoutingConfiguration = (output, context) => {
      return {
        AdditionalVersionWeights: output.AdditionalVersionWeights != null ? deserializeAws_restJson1AdditionalVersionWeights(output.AdditionalVersionWeights, context) : void 0
      };
    };
    var deserializeAws_restJson1AllowedPublishers = (output, context) => {
      return {
        SigningProfileVersionArns: output.SigningProfileVersionArns != null ? deserializeAws_restJson1SigningProfileVersionArns(output.SigningProfileVersionArns, context) : void 0
      };
    };
    var deserializeAws_restJson1AllowMethodsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1AllowOriginsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1AmazonManagedKafkaEventSourceConfig = (output, context) => {
      return {
        ConsumerGroupId: (0, smithy_client_1.expectString)(output.ConsumerGroupId)
      };
    };
    var deserializeAws_restJson1ArchitecturesList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1CodeSigningConfig = (output, context) => {
      return {
        AllowedPublishers: output.AllowedPublishers != null ? deserializeAws_restJson1AllowedPublishers(output.AllowedPublishers, context) : void 0,
        CodeSigningConfigArn: (0, smithy_client_1.expectString)(output.CodeSigningConfigArn),
        CodeSigningConfigId: (0, smithy_client_1.expectString)(output.CodeSigningConfigId),
        CodeSigningPolicies: output.CodeSigningPolicies != null ? deserializeAws_restJson1CodeSigningPolicies(output.CodeSigningPolicies, context) : void 0,
        Description: (0, smithy_client_1.expectString)(output.Description),
        LastModified: (0, smithy_client_1.expectString)(output.LastModified)
      };
    };
    var deserializeAws_restJson1CodeSigningConfigList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1CodeSigningConfig(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1CodeSigningPolicies = (output, context) => {
      return {
        UntrustedArtifactOnDeployment: (0, smithy_client_1.expectString)(output.UntrustedArtifactOnDeployment)
      };
    };
    var deserializeAws_restJson1CompatibleArchitectures = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1CompatibleRuntimes = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1Concurrency = (output, context) => {
      return {
        ReservedConcurrentExecutions: (0, smithy_client_1.expectInt32)(output.ReservedConcurrentExecutions)
      };
    };
    var deserializeAws_restJson1Cors = (output, context) => {
      return {
        AllowCredentials: (0, smithy_client_1.expectBoolean)(output.AllowCredentials),
        AllowHeaders: output.AllowHeaders != null ? deserializeAws_restJson1HeadersList(output.AllowHeaders, context) : void 0,
        AllowMethods: output.AllowMethods != null ? deserializeAws_restJson1AllowMethodsList(output.AllowMethods, context) : void 0,
        AllowOrigins: output.AllowOrigins != null ? deserializeAws_restJson1AllowOriginsList(output.AllowOrigins, context) : void 0,
        ExposeHeaders: output.ExposeHeaders != null ? deserializeAws_restJson1HeadersList(output.ExposeHeaders, context) : void 0,
        MaxAge: (0, smithy_client_1.expectInt32)(output.MaxAge)
      };
    };
    var deserializeAws_restJson1DeadLetterConfig = (output, context) => {
      return {
        TargetArn: (0, smithy_client_1.expectString)(output.TargetArn)
      };
    };
    var deserializeAws_restJson1DestinationConfig = (output, context) => {
      return {
        OnFailure: output.OnFailure != null ? deserializeAws_restJson1OnFailure(output.OnFailure, context) : void 0,
        OnSuccess: output.OnSuccess != null ? deserializeAws_restJson1OnSuccess(output.OnSuccess, context) : void 0
      };
    };
    var deserializeAws_restJson1DocumentDBEventSourceConfig = (output, context) => {
      return {
        CollectionName: (0, smithy_client_1.expectString)(output.CollectionName),
        DatabaseName: (0, smithy_client_1.expectString)(output.DatabaseName),
        FullDocument: (0, smithy_client_1.expectString)(output.FullDocument)
      };
    };
    var deserializeAws_restJson1EndpointLists = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1Endpoints = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = deserializeAws_restJson1EndpointLists(value, context);
        return acc;
      }, {});
    };
    var deserializeAws_restJson1EnvironmentError = (output, context) => {
      return {
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_restJson1EnvironmentResponse = (output, context) => {
      return {
        Error: output.Error != null ? deserializeAws_restJson1EnvironmentError(output.Error, context) : void 0,
        Variables: output.Variables != null ? deserializeAws_restJson1EnvironmentVariables(output.Variables, context) : void 0
      };
    };
    var deserializeAws_restJson1EnvironmentVariables = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
      }, {});
    };
    var deserializeAws_restJson1EphemeralStorage = (output, context) => {
      return {
        Size: (0, smithy_client_1.expectInt32)(output.Size)
      };
    };
    var deserializeAws_restJson1EventSourceMappingConfiguration = (output, context) => {
      return {
        AmazonManagedKafkaEventSourceConfig: output.AmazonManagedKafkaEventSourceConfig != null ? deserializeAws_restJson1AmazonManagedKafkaEventSourceConfig(output.AmazonManagedKafkaEventSourceConfig, context) : void 0,
        BatchSize: (0, smithy_client_1.expectInt32)(output.BatchSize),
        BisectBatchOnFunctionError: (0, smithy_client_1.expectBoolean)(output.BisectBatchOnFunctionError),
        DestinationConfig: output.DestinationConfig != null ? deserializeAws_restJson1DestinationConfig(output.DestinationConfig, context) : void 0,
        DocumentDBEventSourceConfig: output.DocumentDBEventSourceConfig != null ? deserializeAws_restJson1DocumentDBEventSourceConfig(output.DocumentDBEventSourceConfig, context) : void 0,
        EventSourceArn: (0, smithy_client_1.expectString)(output.EventSourceArn),
        FilterCriteria: output.FilterCriteria != null ? deserializeAws_restJson1FilterCriteria(output.FilterCriteria, context) : void 0,
        FunctionArn: (0, smithy_client_1.expectString)(output.FunctionArn),
        FunctionResponseTypes: output.FunctionResponseTypes != null ? deserializeAws_restJson1FunctionResponseTypeList(output.FunctionResponseTypes, context) : void 0,
        LastModified: output.LastModified != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModified))) : void 0,
        LastProcessingResult: (0, smithy_client_1.expectString)(output.LastProcessingResult),
        MaximumBatchingWindowInSeconds: (0, smithy_client_1.expectInt32)(output.MaximumBatchingWindowInSeconds),
        MaximumRecordAgeInSeconds: (0, smithy_client_1.expectInt32)(output.MaximumRecordAgeInSeconds),
        MaximumRetryAttempts: (0, smithy_client_1.expectInt32)(output.MaximumRetryAttempts),
        ParallelizationFactor: (0, smithy_client_1.expectInt32)(output.ParallelizationFactor),
        Queues: output.Queues != null ? deserializeAws_restJson1Queues(output.Queues, context) : void 0,
        ScalingConfig: output.ScalingConfig != null ? deserializeAws_restJson1ScalingConfig(output.ScalingConfig, context) : void 0,
        SelfManagedEventSource: output.SelfManagedEventSource != null ? deserializeAws_restJson1SelfManagedEventSource(output.SelfManagedEventSource, context) : void 0,
        SelfManagedKafkaEventSourceConfig: output.SelfManagedKafkaEventSourceConfig != null ? deserializeAws_restJson1SelfManagedKafkaEventSourceConfig(output.SelfManagedKafkaEventSourceConfig, context) : void 0,
        SourceAccessConfigurations: output.SourceAccessConfigurations != null ? deserializeAws_restJson1SourceAccessConfigurations(output.SourceAccessConfigurations, context) : void 0,
        StartingPosition: (0, smithy_client_1.expectString)(output.StartingPosition),
        StartingPositionTimestamp: output.StartingPositionTimestamp != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartingPositionTimestamp))) : void 0,
        State: (0, smithy_client_1.expectString)(output.State),
        StateTransitionReason: (0, smithy_client_1.expectString)(output.StateTransitionReason),
        Topics: output.Topics != null ? deserializeAws_restJson1Topics(output.Topics, context) : void 0,
        TumblingWindowInSeconds: (0, smithy_client_1.expectInt32)(output.TumblingWindowInSeconds),
        UUID: (0, smithy_client_1.expectString)(output.UUID)
      };
    };
    var deserializeAws_restJson1EventSourceMappingsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1EventSourceMappingConfiguration(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1FileSystemConfig = (output, context) => {
      return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        LocalMountPath: (0, smithy_client_1.expectString)(output.LocalMountPath)
      };
    };
    var deserializeAws_restJson1FileSystemConfigList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1FileSystemConfig(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1Filter = (output, context) => {
      return {
        Pattern: (0, smithy_client_1.expectString)(output.Pattern)
      };
    };
    var deserializeAws_restJson1FilterCriteria = (output, context) => {
      return {
        Filters: output.Filters != null ? deserializeAws_restJson1FilterList(output.Filters, context) : void 0
      };
    };
    var deserializeAws_restJson1FilterList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1Filter(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1FunctionArnList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1FunctionCodeLocation = (output, context) => {
      return {
        ImageUri: (0, smithy_client_1.expectString)(output.ImageUri),
        Location: (0, smithy_client_1.expectString)(output.Location),
        RepositoryType: (0, smithy_client_1.expectString)(output.RepositoryType),
        ResolvedImageUri: (0, smithy_client_1.expectString)(output.ResolvedImageUri)
      };
    };
    var deserializeAws_restJson1FunctionConfiguration = (output, context) => {
      return {
        Architectures: output.Architectures != null ? deserializeAws_restJson1ArchitecturesList(output.Architectures, context) : void 0,
        CodeSha256: (0, smithy_client_1.expectString)(output.CodeSha256),
        CodeSize: (0, smithy_client_1.expectLong)(output.CodeSize),
        DeadLetterConfig: output.DeadLetterConfig != null ? deserializeAws_restJson1DeadLetterConfig(output.DeadLetterConfig, context) : void 0,
        Description: (0, smithy_client_1.expectString)(output.Description),
        Environment: output.Environment != null ? deserializeAws_restJson1EnvironmentResponse(output.Environment, context) : void 0,
        EphemeralStorage: output.EphemeralStorage != null ? deserializeAws_restJson1EphemeralStorage(output.EphemeralStorage, context) : void 0,
        FileSystemConfigs: output.FileSystemConfigs != null ? deserializeAws_restJson1FileSystemConfigList(output.FileSystemConfigs, context) : void 0,
        FunctionArn: (0, smithy_client_1.expectString)(output.FunctionArn),
        FunctionName: (0, smithy_client_1.expectString)(output.FunctionName),
        Handler: (0, smithy_client_1.expectString)(output.Handler),
        ImageConfigResponse: output.ImageConfigResponse != null ? deserializeAws_restJson1ImageConfigResponse(output.ImageConfigResponse, context) : void 0,
        KMSKeyArn: (0, smithy_client_1.expectString)(output.KMSKeyArn),
        LastModified: (0, smithy_client_1.expectString)(output.LastModified),
        LastUpdateStatus: (0, smithy_client_1.expectString)(output.LastUpdateStatus),
        LastUpdateStatusReason: (0, smithy_client_1.expectString)(output.LastUpdateStatusReason),
        LastUpdateStatusReasonCode: (0, smithy_client_1.expectString)(output.LastUpdateStatusReasonCode),
        Layers: output.Layers != null ? deserializeAws_restJson1LayersReferenceList(output.Layers, context) : void 0,
        MasterArn: (0, smithy_client_1.expectString)(output.MasterArn),
        MemorySize: (0, smithy_client_1.expectInt32)(output.MemorySize),
        PackageType: (0, smithy_client_1.expectString)(output.PackageType),
        RevisionId: (0, smithy_client_1.expectString)(output.RevisionId),
        Role: (0, smithy_client_1.expectString)(output.Role),
        Runtime: (0, smithy_client_1.expectString)(output.Runtime),
        RuntimeVersionConfig: output.RuntimeVersionConfig != null ? deserializeAws_restJson1RuntimeVersionConfig(output.RuntimeVersionConfig, context) : void 0,
        SigningJobArn: (0, smithy_client_1.expectString)(output.SigningJobArn),
        SigningProfileVersionArn: (0, smithy_client_1.expectString)(output.SigningProfileVersionArn),
        SnapStart: output.SnapStart != null ? deserializeAws_restJson1SnapStartResponse(output.SnapStart, context) : void 0,
        State: (0, smithy_client_1.expectString)(output.State),
        StateReason: (0, smithy_client_1.expectString)(output.StateReason),
        StateReasonCode: (0, smithy_client_1.expectString)(output.StateReasonCode),
        Timeout: (0, smithy_client_1.expectInt32)(output.Timeout),
        TracingConfig: output.TracingConfig != null ? deserializeAws_restJson1TracingConfigResponse(output.TracingConfig, context) : void 0,
        Version: (0, smithy_client_1.expectString)(output.Version),
        VpcConfig: output.VpcConfig != null ? deserializeAws_restJson1VpcConfigResponse(output.VpcConfig, context) : void 0
      };
    };
    var deserializeAws_restJson1FunctionEventInvokeConfig = (output, context) => {
      return {
        DestinationConfig: output.DestinationConfig != null ? deserializeAws_restJson1DestinationConfig(output.DestinationConfig, context) : void 0,
        FunctionArn: (0, smithy_client_1.expectString)(output.FunctionArn),
        LastModified: output.LastModified != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModified))) : void 0,
        MaximumEventAgeInSeconds: (0, smithy_client_1.expectInt32)(output.MaximumEventAgeInSeconds),
        MaximumRetryAttempts: (0, smithy_client_1.expectInt32)(output.MaximumRetryAttempts)
      };
    };
    var deserializeAws_restJson1FunctionEventInvokeConfigList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1FunctionEventInvokeConfig(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1FunctionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1FunctionConfiguration(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1FunctionResponseTypeList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1FunctionUrlConfig = (output, context) => {
      return {
        AuthType: (0, smithy_client_1.expectString)(output.AuthType),
        Cors: output.Cors != null ? deserializeAws_restJson1Cors(output.Cors, context) : void 0,
        CreationTime: (0, smithy_client_1.expectString)(output.CreationTime),
        FunctionArn: (0, smithy_client_1.expectString)(output.FunctionArn),
        FunctionUrl: (0, smithy_client_1.expectString)(output.FunctionUrl),
        LastModifiedTime: (0, smithy_client_1.expectString)(output.LastModifiedTime)
      };
    };
    var deserializeAws_restJson1FunctionUrlConfigList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1FunctionUrlConfig(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1HeadersList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1ImageConfig = (output, context) => {
      return {
        Command: output.Command != null ? deserializeAws_restJson1StringList(output.Command, context) : void 0,
        EntryPoint: output.EntryPoint != null ? deserializeAws_restJson1StringList(output.EntryPoint, context) : void 0,
        WorkingDirectory: (0, smithy_client_1.expectString)(output.WorkingDirectory)
      };
    };
    var deserializeAws_restJson1ImageConfigError = (output, context) => {
      return {
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_restJson1ImageConfigResponse = (output, context) => {
      return {
        Error: output.Error != null ? deserializeAws_restJson1ImageConfigError(output.Error, context) : void 0,
        ImageConfig: output.ImageConfig != null ? deserializeAws_restJson1ImageConfig(output.ImageConfig, context) : void 0
      };
    };
    var deserializeAws_restJson1Layer = (output, context) => {
      return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        CodeSize: (0, smithy_client_1.expectLong)(output.CodeSize),
        SigningJobArn: (0, smithy_client_1.expectString)(output.SigningJobArn),
        SigningProfileVersionArn: (0, smithy_client_1.expectString)(output.SigningProfileVersionArn)
      };
    };
    var deserializeAws_restJson1LayersList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1LayersListItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1LayersListItem = (output, context) => {
      return {
        LatestMatchingVersion: output.LatestMatchingVersion != null ? deserializeAws_restJson1LayerVersionsListItem(output.LatestMatchingVersion, context) : void 0,
        LayerArn: (0, smithy_client_1.expectString)(output.LayerArn),
        LayerName: (0, smithy_client_1.expectString)(output.LayerName)
      };
    };
    var deserializeAws_restJson1LayersReferenceList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1Layer(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1LayerVersionContentOutput = (output, context) => {
      return {
        CodeSha256: (0, smithy_client_1.expectString)(output.CodeSha256),
        CodeSize: (0, smithy_client_1.expectLong)(output.CodeSize),
        Location: (0, smithy_client_1.expectString)(output.Location),
        SigningJobArn: (0, smithy_client_1.expectString)(output.SigningJobArn),
        SigningProfileVersionArn: (0, smithy_client_1.expectString)(output.SigningProfileVersionArn)
      };
    };
    var deserializeAws_restJson1LayerVersionsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1LayerVersionsListItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1LayerVersionsListItem = (output, context) => {
      return {
        CompatibleArchitectures: output.CompatibleArchitectures != null ? deserializeAws_restJson1CompatibleArchitectures(output.CompatibleArchitectures, context) : void 0,
        CompatibleRuntimes: output.CompatibleRuntimes != null ? deserializeAws_restJson1CompatibleRuntimes(output.CompatibleRuntimes, context) : void 0,
        CreatedDate: (0, smithy_client_1.expectString)(output.CreatedDate),
        Description: (0, smithy_client_1.expectString)(output.Description),
        LayerVersionArn: (0, smithy_client_1.expectString)(output.LayerVersionArn),
        LicenseInfo: (0, smithy_client_1.expectString)(output.LicenseInfo),
        Version: (0, smithy_client_1.expectLong)(output.Version)
      };
    };
    var deserializeAws_restJson1OnFailure = (output, context) => {
      return {
        Destination: (0, smithy_client_1.expectString)(output.Destination)
      };
    };
    var deserializeAws_restJson1OnSuccess = (output, context) => {
      return {
        Destination: (0, smithy_client_1.expectString)(output.Destination)
      };
    };
    var deserializeAws_restJson1ProvisionedConcurrencyConfigList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1ProvisionedConcurrencyConfigListItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1ProvisionedConcurrencyConfigListItem = (output, context) => {
      return {
        AllocatedProvisionedConcurrentExecutions: (0, smithy_client_1.expectInt32)(output.AllocatedProvisionedConcurrentExecutions),
        AvailableProvisionedConcurrentExecutions: (0, smithy_client_1.expectInt32)(output.AvailableProvisionedConcurrentExecutions),
        FunctionArn: (0, smithy_client_1.expectString)(output.FunctionArn),
        LastModified: (0, smithy_client_1.expectString)(output.LastModified),
        RequestedProvisionedConcurrentExecutions: (0, smithy_client_1.expectInt32)(output.RequestedProvisionedConcurrentExecutions),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusReason: (0, smithy_client_1.expectString)(output.StatusReason)
      };
    };
    var deserializeAws_restJson1Queues = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1RuntimeVersionConfig = (output, context) => {
      return {
        Error: output.Error != null ? deserializeAws_restJson1RuntimeVersionError(output.Error, context) : void 0,
        RuntimeVersionArn: (0, smithy_client_1.expectString)(output.RuntimeVersionArn)
      };
    };
    var deserializeAws_restJson1RuntimeVersionError = (output, context) => {
      return {
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_restJson1ScalingConfig = (output, context) => {
      return {
        MaximumConcurrency: (0, smithy_client_1.expectInt32)(output.MaximumConcurrency)
      };
    };
    var deserializeAws_restJson1SecurityGroupIds = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1SelfManagedEventSource = (output, context) => {
      return {
        Endpoints: output.Endpoints != null ? deserializeAws_restJson1Endpoints(output.Endpoints, context) : void 0
      };
    };
    var deserializeAws_restJson1SelfManagedKafkaEventSourceConfig = (output, context) => {
      return {
        ConsumerGroupId: (0, smithy_client_1.expectString)(output.ConsumerGroupId)
      };
    };
    var deserializeAws_restJson1SigningProfileVersionArns = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1SnapStartResponse = (output, context) => {
      return {
        ApplyOn: (0, smithy_client_1.expectString)(output.ApplyOn),
        OptimizationStatus: (0, smithy_client_1.expectString)(output.OptimizationStatus)
      };
    };
    var deserializeAws_restJson1SourceAccessConfiguration = (output, context) => {
      return {
        Type: (0, smithy_client_1.expectString)(output.Type),
        URI: (0, smithy_client_1.expectString)(output.URI)
      };
    };
    var deserializeAws_restJson1SourceAccessConfigurations = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1SourceAccessConfiguration(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1StringList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1SubnetIds = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1Tags = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
      }, {});
    };
    var deserializeAws_restJson1Topics = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1TracingConfigResponse = (output, context) => {
      return {
        Mode: (0, smithy_client_1.expectString)(output.Mode)
      };
    };
    var deserializeAws_restJson1VpcConfigResponse = (output, context) => {
      return {
        SecurityGroupIds: output.SecurityGroupIds != null ? deserializeAws_restJson1SecurityGroupIds(output.SecurityGroupIds, context) : void 0,
        SubnetIds: output.SubnetIds != null ? deserializeAws_restJson1SubnetIds(output.SubnetIds, context) : void 0,
        VpcId: (0, smithy_client_1.expectString)(output.VpcId)
      };
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/AddLayerVersionPermissionCommand.js
var require_AddLayerVersionPermissionCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/AddLayerVersionPermissionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AddLayerVersionPermissionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var AddLayerVersionPermissionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AddLayerVersionPermissionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "AddLayerVersionPermissionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AddLayerVersionPermissionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AddLayerVersionPermissionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1AddLayerVersionPermissionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1AddLayerVersionPermissionCommand)(output, context);
      }
    };
    exports2.AddLayerVersionPermissionCommand = AddLayerVersionPermissionCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/AddPermissionCommand.js
var require_AddPermissionCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/AddPermissionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AddPermissionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var AddPermissionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AddPermissionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "AddPermissionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AddPermissionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AddPermissionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1AddPermissionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1AddPermissionCommand)(output, context);
      }
    };
    exports2.AddPermissionCommand = AddPermissionCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateAliasCommand.js
var require_CreateAliasCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateAliasCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateAliasCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateAliasCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateAliasCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "CreateAliasCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAliasRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AliasConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1CreateAliasCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1CreateAliasCommand)(output, context);
      }
    };
    exports2.CreateAliasCommand = CreateAliasCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateCodeSigningConfigCommand.js
var require_CreateCodeSigningConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateCodeSigningConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateCodeSigningConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateCodeSigningConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateCodeSigningConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "CreateCodeSigningConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateCodeSigningConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateCodeSigningConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1CreateCodeSigningConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1CreateCodeSigningConfigCommand)(output, context);
      }
    };
    exports2.CreateCodeSigningConfigCommand = CreateCodeSigningConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateEventSourceMappingCommand.js
var require_CreateEventSourceMappingCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateEventSourceMappingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateEventSourceMappingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateEventSourceMappingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateEventSourceMappingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "CreateEventSourceMappingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateEventSourceMappingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.EventSourceMappingConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1CreateEventSourceMappingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1CreateEventSourceMappingCommand)(output, context);
      }
    };
    exports2.CreateEventSourceMappingCommand = CreateEventSourceMappingCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateFunctionCommand.js
var require_CreateFunctionCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateFunctionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateFunctionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateFunctionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateFunctionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "CreateFunctionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateFunctionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1CreateFunctionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1CreateFunctionCommand)(output, context);
      }
    };
    exports2.CreateFunctionCommand = CreateFunctionCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateFunctionUrlConfigCommand.js
var require_CreateFunctionUrlConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateFunctionUrlConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateFunctionUrlConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateFunctionUrlConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateFunctionUrlConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "CreateFunctionUrlConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateFunctionUrlConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateFunctionUrlConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1CreateFunctionUrlConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1CreateFunctionUrlConfigCommand)(output, context);
      }
    };
    exports2.CreateFunctionUrlConfigCommand = CreateFunctionUrlConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteAliasCommand.js
var require_DeleteAliasCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteAliasCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteAliasCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteAliasCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteAliasCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteAliasCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteAliasRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteAliasCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteAliasCommand)(output, context);
      }
    };
    exports2.DeleteAliasCommand = DeleteAliasCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteCodeSigningConfigCommand.js
var require_DeleteCodeSigningConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteCodeSigningConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteCodeSigningConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteCodeSigningConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteCodeSigningConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteCodeSigningConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteCodeSigningConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteCodeSigningConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteCodeSigningConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteCodeSigningConfigCommand)(output, context);
      }
    };
    exports2.DeleteCodeSigningConfigCommand = DeleteCodeSigningConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteEventSourceMappingCommand.js
var require_DeleteEventSourceMappingCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteEventSourceMappingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteEventSourceMappingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteEventSourceMappingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteEventSourceMappingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteEventSourceMappingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteEventSourceMappingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.EventSourceMappingConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteEventSourceMappingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteEventSourceMappingCommand)(output, context);
      }
    };
    exports2.DeleteEventSourceMappingCommand = DeleteEventSourceMappingCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionCodeSigningConfigCommand.js
var require_DeleteFunctionCodeSigningConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionCodeSigningConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteFunctionCodeSigningConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteFunctionCodeSigningConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteFunctionCodeSigningConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteFunctionCodeSigningConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteFunctionCodeSigningConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteFunctionCodeSigningConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommand)(output, context);
      }
    };
    exports2.DeleteFunctionCodeSigningConfigCommand = DeleteFunctionCodeSigningConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionCommand.js
var require_DeleteFunctionCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteFunctionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteFunctionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteFunctionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteFunctionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteFunctionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteFunctionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteFunctionCommand)(output, context);
      }
    };
    exports2.DeleteFunctionCommand = DeleteFunctionCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionConcurrencyCommand.js
var require_DeleteFunctionConcurrencyCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionConcurrencyCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteFunctionConcurrencyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteFunctionConcurrencyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteFunctionConcurrencyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteFunctionConcurrencyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteFunctionConcurrencyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteFunctionConcurrencyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteFunctionConcurrencyCommand)(output, context);
      }
    };
    exports2.DeleteFunctionConcurrencyCommand = DeleteFunctionConcurrencyCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionEventInvokeConfigCommand.js
var require_DeleteFunctionEventInvokeConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionEventInvokeConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteFunctionEventInvokeConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteFunctionEventInvokeConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteFunctionEventInvokeConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteFunctionEventInvokeConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteFunctionEventInvokeConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteFunctionEventInvokeConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommand)(output, context);
      }
    };
    exports2.DeleteFunctionEventInvokeConfigCommand = DeleteFunctionEventInvokeConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionUrlConfigCommand.js
var require_DeleteFunctionUrlConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionUrlConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteFunctionUrlConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteFunctionUrlConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteFunctionUrlConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteFunctionUrlConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteFunctionUrlConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteFunctionUrlConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteFunctionUrlConfigCommand)(output, context);
      }
    };
    exports2.DeleteFunctionUrlConfigCommand = DeleteFunctionUrlConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteLayerVersionCommand.js
var require_DeleteLayerVersionCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteLayerVersionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteLayerVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteLayerVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteLayerVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteLayerVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteLayerVersionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteLayerVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteLayerVersionCommand)(output, context);
      }
    };
    exports2.DeleteLayerVersionCommand = DeleteLayerVersionCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteProvisionedConcurrencyConfigCommand.js
var require_DeleteProvisionedConcurrencyConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteProvisionedConcurrencyConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteProvisionedConcurrencyConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var DeleteProvisionedConcurrencyConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteProvisionedConcurrencyConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteProvisionedConcurrencyConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteProvisionedConcurrencyConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand)(output, context);
      }
    };
    exports2.DeleteProvisionedConcurrencyConfigCommand = DeleteProvisionedConcurrencyConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetAccountSettingsCommand.js
var require_GetAccountSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetAccountSettingsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetAccountSettingsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetAccountSettingsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetAccountSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetAccountSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetAccountSettingsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetAccountSettingsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetAccountSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetAccountSettingsCommand)(output, context);
      }
    };
    exports2.GetAccountSettingsCommand = GetAccountSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetAliasCommand.js
var require_GetAliasCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetAliasCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetAliasCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetAliasCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetAliasCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetAliasCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetAliasRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AliasConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetAliasCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetAliasCommand)(output, context);
      }
    };
    exports2.GetAliasCommand = GetAliasCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetCodeSigningConfigCommand.js
var require_GetCodeSigningConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetCodeSigningConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetCodeSigningConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetCodeSigningConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetCodeSigningConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetCodeSigningConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetCodeSigningConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetCodeSigningConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetCodeSigningConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetCodeSigningConfigCommand)(output, context);
      }
    };
    exports2.GetCodeSigningConfigCommand = GetCodeSigningConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetEventSourceMappingCommand.js
var require_GetEventSourceMappingCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetEventSourceMappingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetEventSourceMappingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetEventSourceMappingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetEventSourceMappingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetEventSourceMappingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetEventSourceMappingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.EventSourceMappingConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetEventSourceMappingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetEventSourceMappingCommand)(output, context);
      }
    };
    exports2.GetEventSourceMappingCommand = GetEventSourceMappingCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionCodeSigningConfigCommand.js
var require_GetFunctionCodeSigningConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionCodeSigningConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetFunctionCodeSigningConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetFunctionCodeSigningConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFunctionCodeSigningConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetFunctionCodeSigningConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFunctionCodeSigningConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFunctionCodeSigningConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetFunctionCodeSigningConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetFunctionCodeSigningConfigCommand)(output, context);
      }
    };
    exports2.GetFunctionCodeSigningConfigCommand = GetFunctionCodeSigningConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionCommand.js
var require_GetFunctionCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetFunctionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetFunctionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFunctionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetFunctionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFunctionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFunctionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetFunctionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetFunctionCommand)(output, context);
      }
    };
    exports2.GetFunctionCommand = GetFunctionCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionConcurrencyCommand.js
var require_GetFunctionConcurrencyCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionConcurrencyCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetFunctionConcurrencyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetFunctionConcurrencyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFunctionConcurrencyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetFunctionConcurrencyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFunctionConcurrencyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFunctionConcurrencyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetFunctionConcurrencyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetFunctionConcurrencyCommand)(output, context);
      }
    };
    exports2.GetFunctionConcurrencyCommand = GetFunctionConcurrencyCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionConfigurationCommand.js
var require_GetFunctionConfigurationCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetFunctionConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetFunctionConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFunctionConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetFunctionConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFunctionConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetFunctionConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetFunctionConfigurationCommand)(output, context);
      }
    };
    exports2.GetFunctionConfigurationCommand = GetFunctionConfigurationCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionEventInvokeConfigCommand.js
var require_GetFunctionEventInvokeConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionEventInvokeConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetFunctionEventInvokeConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetFunctionEventInvokeConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFunctionEventInvokeConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetFunctionEventInvokeConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFunctionEventInvokeConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.FunctionEventInvokeConfigFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetFunctionEventInvokeConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetFunctionEventInvokeConfigCommand)(output, context);
      }
    };
    exports2.GetFunctionEventInvokeConfigCommand = GetFunctionEventInvokeConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionUrlConfigCommand.js
var require_GetFunctionUrlConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionUrlConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetFunctionUrlConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetFunctionUrlConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFunctionUrlConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetFunctionUrlConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFunctionUrlConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFunctionUrlConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetFunctionUrlConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetFunctionUrlConfigCommand)(output, context);
      }
    };
    exports2.GetFunctionUrlConfigCommand = GetFunctionUrlConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetLayerVersionByArnCommand.js
var require_GetLayerVersionByArnCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetLayerVersionByArnCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetLayerVersionByArnCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetLayerVersionByArnCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetLayerVersionByArnCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetLayerVersionByArnCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetLayerVersionByArnRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetLayerVersionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetLayerVersionByArnCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetLayerVersionByArnCommand)(output, context);
      }
    };
    exports2.GetLayerVersionByArnCommand = GetLayerVersionByArnCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetLayerVersionCommand.js
var require_GetLayerVersionCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetLayerVersionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetLayerVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetLayerVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetLayerVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetLayerVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetLayerVersionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetLayerVersionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetLayerVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetLayerVersionCommand)(output, context);
      }
    };
    exports2.GetLayerVersionCommand = GetLayerVersionCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetLayerVersionPolicyCommand.js
var require_GetLayerVersionPolicyCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetLayerVersionPolicyCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetLayerVersionPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetLayerVersionPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetLayerVersionPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetLayerVersionPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetLayerVersionPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetLayerVersionPolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetLayerVersionPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetLayerVersionPolicyCommand)(output, context);
      }
    };
    exports2.GetLayerVersionPolicyCommand = GetLayerVersionPolicyCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetPolicyCommand.js
var require_GetPolicyCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetPolicyCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetPolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetPolicyCommand)(output, context);
      }
    };
    exports2.GetPolicyCommand = GetPolicyCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetProvisionedConcurrencyConfigCommand.js
var require_GetProvisionedConcurrencyConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetProvisionedConcurrencyConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetProvisionedConcurrencyConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetProvisionedConcurrencyConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetProvisionedConcurrencyConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetProvisionedConcurrencyConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetProvisionedConcurrencyConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetProvisionedConcurrencyConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetProvisionedConcurrencyConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetProvisionedConcurrencyConfigCommand)(output, context);
      }
    };
    exports2.GetProvisionedConcurrencyConfigCommand = GetProvisionedConcurrencyConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetRuntimeManagementConfigCommand.js
var require_GetRuntimeManagementConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetRuntimeManagementConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetRuntimeManagementConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var GetRuntimeManagementConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetRuntimeManagementConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetRuntimeManagementConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRuntimeManagementConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRuntimeManagementConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetRuntimeManagementConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetRuntimeManagementConfigCommand)(output, context);
      }
    };
    exports2.GetRuntimeManagementConfigCommand = GetRuntimeManagementConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/InvokeAsyncCommand.js
var require_InvokeAsyncCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/InvokeAsyncCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvokeAsyncCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var InvokeAsyncCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, InvokeAsyncCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "InvokeAsyncCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.InvokeAsyncRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.InvokeAsyncResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1InvokeAsyncCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1InvokeAsyncCommand)(output, context);
      }
    };
    exports2.InvokeAsyncCommand = InvokeAsyncCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/InvokeCommand.js
var require_InvokeCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/InvokeCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvokeCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var InvokeCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, InvokeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "InvokeCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.InvocationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.InvocationResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1InvokeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1InvokeCommand)(output, context);
      }
    };
    exports2.InvokeCommand = InvokeCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListAliasesCommand.js
var require_ListAliasesCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListAliasesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListAliasesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListAliasesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAliasesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListAliasesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAliasesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAliasesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAliasesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAliasesCommand)(output, context);
      }
    };
    exports2.ListAliasesCommand = ListAliasesCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListCodeSigningConfigsCommand.js
var require_ListCodeSigningConfigsCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListCodeSigningConfigsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListCodeSigningConfigsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListCodeSigningConfigsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListCodeSigningConfigsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListCodeSigningConfigsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListCodeSigningConfigsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListCodeSigningConfigsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListCodeSigningConfigsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListCodeSigningConfigsCommand)(output, context);
      }
    };
    exports2.ListCodeSigningConfigsCommand = ListCodeSigningConfigsCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListEventSourceMappingsCommand.js
var require_ListEventSourceMappingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListEventSourceMappingsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListEventSourceMappingsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListEventSourceMappingsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListEventSourceMappingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListEventSourceMappingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListEventSourceMappingsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListEventSourceMappingsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListEventSourceMappingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListEventSourceMappingsCommand)(output, context);
      }
    };
    exports2.ListEventSourceMappingsCommand = ListEventSourceMappingsCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListFunctionEventInvokeConfigsCommand.js
var require_ListFunctionEventInvokeConfigsCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListFunctionEventInvokeConfigsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListFunctionEventInvokeConfigsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListFunctionEventInvokeConfigsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListFunctionEventInvokeConfigsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListFunctionEventInvokeConfigsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListFunctionEventInvokeConfigsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListFunctionEventInvokeConfigsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListFunctionEventInvokeConfigsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListFunctionEventInvokeConfigsCommand)(output, context);
      }
    };
    exports2.ListFunctionEventInvokeConfigsCommand = ListFunctionEventInvokeConfigsCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListFunctionsByCodeSigningConfigCommand.js
var require_ListFunctionsByCodeSigningConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListFunctionsByCodeSigningConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListFunctionsByCodeSigningConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListFunctionsByCodeSigningConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListFunctionsByCodeSigningConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListFunctionsByCodeSigningConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListFunctionsByCodeSigningConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListFunctionsByCodeSigningConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListFunctionsByCodeSigningConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommand)(output, context);
      }
    };
    exports2.ListFunctionsByCodeSigningConfigCommand = ListFunctionsByCodeSigningConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListFunctionsCommand.js
var require_ListFunctionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListFunctionsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListFunctionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListFunctionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListFunctionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListFunctionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListFunctionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListFunctionsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListFunctionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListFunctionsCommand)(output, context);
      }
    };
    exports2.ListFunctionsCommand = ListFunctionsCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListFunctionUrlConfigsCommand.js
var require_ListFunctionUrlConfigsCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListFunctionUrlConfigsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListFunctionUrlConfigsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListFunctionUrlConfigsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListFunctionUrlConfigsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListFunctionUrlConfigsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListFunctionUrlConfigsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListFunctionUrlConfigsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListFunctionUrlConfigsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListFunctionUrlConfigsCommand)(output, context);
      }
    };
    exports2.ListFunctionUrlConfigsCommand = ListFunctionUrlConfigsCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListLayersCommand.js
var require_ListLayersCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListLayersCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListLayersCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListLayersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListLayersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListLayersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListLayersRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListLayersResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListLayersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListLayersCommand)(output, context);
      }
    };
    exports2.ListLayersCommand = ListLayersCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListLayerVersionsCommand.js
var require_ListLayerVersionsCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListLayerVersionsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListLayerVersionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListLayerVersionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListLayerVersionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListLayerVersionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListLayerVersionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListLayerVersionsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListLayerVersionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListLayerVersionsCommand)(output, context);
      }
    };
    exports2.ListLayerVersionsCommand = ListLayerVersionsCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListProvisionedConcurrencyConfigsCommand.js
var require_ListProvisionedConcurrencyConfigsCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListProvisionedConcurrencyConfigsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListProvisionedConcurrencyConfigsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListProvisionedConcurrencyConfigsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListProvisionedConcurrencyConfigsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListProvisionedConcurrencyConfigsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListProvisionedConcurrencyConfigsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListProvisionedConcurrencyConfigsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListProvisionedConcurrencyConfigsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommand)(output, context);
      }
    };
    exports2.ListProvisionedConcurrencyConfigsCommand = ListProvisionedConcurrencyConfigsCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListTagsCommand.js
var require_ListTagsCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListTagsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListTagsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListTagsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListTagsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListTagsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListTagsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListTagsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListTagsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListTagsCommand)(output, context);
      }
    };
    exports2.ListTagsCommand = ListTagsCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListVersionsByFunctionCommand.js
var require_ListVersionsByFunctionCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListVersionsByFunctionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListVersionsByFunctionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var ListVersionsByFunctionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListVersionsByFunctionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListVersionsByFunctionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListVersionsByFunctionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListVersionsByFunctionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListVersionsByFunctionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListVersionsByFunctionCommand)(output, context);
      }
    };
    exports2.ListVersionsByFunctionCommand = ListVersionsByFunctionCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PublishLayerVersionCommand.js
var require_PublishLayerVersionCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PublishLayerVersionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PublishLayerVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PublishLayerVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PublishLayerVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "PublishLayerVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PublishLayerVersionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PublishLayerVersionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1PublishLayerVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1PublishLayerVersionCommand)(output, context);
      }
    };
    exports2.PublishLayerVersionCommand = PublishLayerVersionCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PublishVersionCommand.js
var require_PublishVersionCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PublishVersionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PublishVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PublishVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PublishVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "PublishVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PublishVersionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1PublishVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1PublishVersionCommand)(output, context);
      }
    };
    exports2.PublishVersionCommand = PublishVersionCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutFunctionCodeSigningConfigCommand.js
var require_PutFunctionCodeSigningConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutFunctionCodeSigningConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutFunctionCodeSigningConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PutFunctionCodeSigningConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutFunctionCodeSigningConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "PutFunctionCodeSigningConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutFunctionCodeSigningConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutFunctionCodeSigningConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1PutFunctionCodeSigningConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1PutFunctionCodeSigningConfigCommand)(output, context);
      }
    };
    exports2.PutFunctionCodeSigningConfigCommand = PutFunctionCodeSigningConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutFunctionConcurrencyCommand.js
var require_PutFunctionConcurrencyCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutFunctionConcurrencyCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutFunctionConcurrencyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PutFunctionConcurrencyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutFunctionConcurrencyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "PutFunctionConcurrencyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutFunctionConcurrencyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ConcurrencyFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1PutFunctionConcurrencyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1PutFunctionConcurrencyCommand)(output, context);
      }
    };
    exports2.PutFunctionConcurrencyCommand = PutFunctionConcurrencyCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutFunctionEventInvokeConfigCommand.js
var require_PutFunctionEventInvokeConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutFunctionEventInvokeConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutFunctionEventInvokeConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PutFunctionEventInvokeConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutFunctionEventInvokeConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "PutFunctionEventInvokeConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutFunctionEventInvokeConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.FunctionEventInvokeConfigFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1PutFunctionEventInvokeConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1PutFunctionEventInvokeConfigCommand)(output, context);
      }
    };
    exports2.PutFunctionEventInvokeConfigCommand = PutFunctionEventInvokeConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutProvisionedConcurrencyConfigCommand.js
var require_PutProvisionedConcurrencyConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutProvisionedConcurrencyConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutProvisionedConcurrencyConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PutProvisionedConcurrencyConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutProvisionedConcurrencyConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "PutProvisionedConcurrencyConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutProvisionedConcurrencyConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutProvisionedConcurrencyConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1PutProvisionedConcurrencyConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1PutProvisionedConcurrencyConfigCommand)(output, context);
      }
    };
    exports2.PutProvisionedConcurrencyConfigCommand = PutProvisionedConcurrencyConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutRuntimeManagementConfigCommand.js
var require_PutRuntimeManagementConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutRuntimeManagementConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutRuntimeManagementConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var PutRuntimeManagementConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutRuntimeManagementConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "PutRuntimeManagementConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutRuntimeManagementConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutRuntimeManagementConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1PutRuntimeManagementConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1PutRuntimeManagementConfigCommand)(output, context);
      }
    };
    exports2.PutRuntimeManagementConfigCommand = PutRuntimeManagementConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/RemoveLayerVersionPermissionCommand.js
var require_RemoveLayerVersionPermissionCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/RemoveLayerVersionPermissionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RemoveLayerVersionPermissionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var RemoveLayerVersionPermissionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RemoveLayerVersionPermissionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "RemoveLayerVersionPermissionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RemoveLayerVersionPermissionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1RemoveLayerVersionPermissionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1RemoveLayerVersionPermissionCommand)(output, context);
      }
    };
    exports2.RemoveLayerVersionPermissionCommand = RemoveLayerVersionPermissionCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/RemovePermissionCommand.js
var require_RemovePermissionCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/RemovePermissionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RemovePermissionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var RemovePermissionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RemovePermissionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "RemovePermissionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RemovePermissionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1RemovePermissionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1RemovePermissionCommand)(output, context);
      }
    };
    exports2.RemovePermissionCommand = RemovePermissionCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/TagResourceCommand.js
var require_TagResourceCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/TagResourceCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TagResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var TagResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, TagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "TagResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TagResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1TagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1TagResourceCommand)(output, context);
      }
    };
    exports2.TagResourceCommand = TagResourceCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UntagResourceCommand.js
var require_UntagResourceCommand2 = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UntagResourceCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UntagResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UntagResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UntagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "UntagResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UntagResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1UntagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1UntagResourceCommand)(output, context);
      }
    };
    exports2.UntagResourceCommand = UntagResourceCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateAliasCommand.js
var require_UpdateAliasCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateAliasCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateAliasCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateAliasCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateAliasCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "UpdateAliasCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateAliasRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AliasConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1UpdateAliasCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1UpdateAliasCommand)(output, context);
      }
    };
    exports2.UpdateAliasCommand = UpdateAliasCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateCodeSigningConfigCommand.js
var require_UpdateCodeSigningConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateCodeSigningConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateCodeSigningConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateCodeSigningConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateCodeSigningConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "UpdateCodeSigningConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateCodeSigningConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateCodeSigningConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1UpdateCodeSigningConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1UpdateCodeSigningConfigCommand)(output, context);
      }
    };
    exports2.UpdateCodeSigningConfigCommand = UpdateCodeSigningConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateEventSourceMappingCommand.js
var require_UpdateEventSourceMappingCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateEventSourceMappingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateEventSourceMappingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateEventSourceMappingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateEventSourceMappingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "UpdateEventSourceMappingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateEventSourceMappingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.EventSourceMappingConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1UpdateEventSourceMappingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1UpdateEventSourceMappingCommand)(output, context);
      }
    };
    exports2.UpdateEventSourceMappingCommand = UpdateEventSourceMappingCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateFunctionCodeCommand.js
var require_UpdateFunctionCodeCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateFunctionCodeCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateFunctionCodeCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateFunctionCodeCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateFunctionCodeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "UpdateFunctionCodeCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateFunctionCodeRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1UpdateFunctionCodeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1UpdateFunctionCodeCommand)(output, context);
      }
    };
    exports2.UpdateFunctionCodeCommand = UpdateFunctionCodeCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateFunctionConfigurationCommand.js
var require_UpdateFunctionConfigurationCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateFunctionConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateFunctionConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateFunctionConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateFunctionConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "UpdateFunctionConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateFunctionConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1UpdateFunctionConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1UpdateFunctionConfigurationCommand)(output, context);
      }
    };
    exports2.UpdateFunctionConfigurationCommand = UpdateFunctionConfigurationCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateFunctionEventInvokeConfigCommand.js
var require_UpdateFunctionEventInvokeConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateFunctionEventInvokeConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateFunctionEventInvokeConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateFunctionEventInvokeConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateFunctionEventInvokeConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "UpdateFunctionEventInvokeConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateFunctionEventInvokeConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.FunctionEventInvokeConfigFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1UpdateFunctionEventInvokeConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommand)(output, context);
      }
    };
    exports2.UpdateFunctionEventInvokeConfigCommand = UpdateFunctionEventInvokeConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateFunctionUrlConfigCommand.js
var require_UpdateFunctionUrlConfigCommand = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateFunctionUrlConfigCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateFunctionUrlConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_serde_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs26();
    var models_0_1 = require_models_05();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var UpdateFunctionUrlConfigCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateFunctionUrlConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "LambdaClient";
        const commandName = "UpdateFunctionUrlConfigCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateFunctionUrlConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateFunctionUrlConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1UpdateFunctionUrlConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1UpdateFunctionUrlConfigCommand)(output, context);
      }
    };
    exports2.UpdateFunctionUrlConfigCommand = UpdateFunctionUrlConfigCommand;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters5 = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/endpoint/EndpointParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "lambda"
      };
    };
    exports2.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// node_modules/@aws-sdk/client-lambda/package.json
var require_package5 = __commonJS({
  "node_modules/@aws-sdk/client-lambda/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-lambda",
      description: "AWS SDK for JavaScript Lambda Client for Node.js, Browser and React Native",
      version: "3.288.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo lambda"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.288.0",
        "@aws-sdk/config-resolver": "3.287.0",
        "@aws-sdk/credential-provider-node": "3.288.0",
        "@aws-sdk/fetch-http-handler": "3.282.0",
        "@aws-sdk/hash-node": "3.272.0",
        "@aws-sdk/invalid-dependency": "3.272.0",
        "@aws-sdk/middleware-content-length": "3.282.0",
        "@aws-sdk/middleware-endpoint": "3.282.0",
        "@aws-sdk/middleware-host-header": "3.282.0",
        "@aws-sdk/middleware-logger": "3.288.0",
        "@aws-sdk/middleware-recursion-detection": "3.282.0",
        "@aws-sdk/middleware-retry": "3.287.0",
        "@aws-sdk/middleware-serde": "3.272.0",
        "@aws-sdk/middleware-signing": "3.282.0",
        "@aws-sdk/middleware-stack": "3.272.0",
        "@aws-sdk/middleware-user-agent": "3.282.0",
        "@aws-sdk/node-config-provider": "3.287.0",
        "@aws-sdk/node-http-handler": "3.282.0",
        "@aws-sdk/protocol-http": "3.282.0",
        "@aws-sdk/smithy-client": "3.279.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.279.0",
        "@aws-sdk/util-defaults-mode-node": "3.287.0",
        "@aws-sdk/util-endpoints": "3.272.0",
        "@aws-sdk/util-retry": "3.272.0",
        "@aws-sdk/util-user-agent-browser": "3.282.0",
        "@aws-sdk/util-user-agent-node": "3.287.0",
        "@aws-sdk/util-utf8": "3.254.0",
        "@aws-sdk/util-waiter": "3.272.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-lambda",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-lambda"
      }
    };
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/endpoint/ruleset.js
var require_ruleset5 = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/endpoint/ruleset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ruleSet = void 0;
    var q = "required";
    var r = "fn";
    var s = "argv";
    var t = "ref";
    var a = "isSet";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = "PartitionResult";
    var f = { [q]: false, "type": "String" };
    var g = { [q]: true, "default": false, "type": "Boolean" };
    var h = { [t]: "Endpoint" };
    var i = { [r]: "booleanEquals", [s]: [{ [t]: "UseFIPS" }, true] };
    var j = { [r]: "booleanEquals", [s]: [{ [t]: "UseDualStack" }, true] };
    var k = {};
    var l = { [r]: "booleanEquals", [s]: [true, { [r]: "getAttr", [s]: [{ [t]: e }, "supportsFIPS"] }] };
    var m = { [r]: "booleanEquals", [s]: [true, { [r]: "getAttr", [s]: [{ [t]: e }, "supportsDualStack"] }] };
    var n = [i];
    var o = [j];
    var p = [{ [t]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: f, UseDualStack: g, UseFIPS: g, Endpoint: f }, rules: [{ conditions: [{ [r]: a, [s]: [h] }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: h, properties: k, headers: k }, type: d }] }] }, { type: b, rules: [{ conditions: [{ [r]: a, [s]: p }], type: b, rules: [{ conditions: [{ [r]: "aws.partition", [s]: p, assign: e }], type: b, rules: [{ conditions: [i, j], type: b, rules: [{ conditions: [l, m], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://lambda-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: k, headers: k }, type: d }] }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [l], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://lambda-fips.{Region}.{PartitionResult#dnsSuffix}", properties: k, headers: k }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [m], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://lambda.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: k, headers: k }, type: d }] }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { type: b, rules: [{ endpoint: { url: "https://lambda.{Region}.{PartitionResult#dnsSuffix}", properties: k, headers: k }, type: d }] }] }] }, { error: "Invalid Configuration: Missing Region", type: c }] }] };
    exports2.ruleSet = _data;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver5 = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/endpoint/endpointResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs40();
    var ruleset_1 = require_ruleset5();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports2.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared5 = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs26();
    var url_parser_1 = require_dist_cjs7();
    var util_base64_1 = require_dist_cjs38();
    var util_utf8_1 = require_dist_cjs20();
    var endpointResolver_1 = require_endpointResolver5();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2015-03-31",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "Lambda",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js
var require_runtimeConfig5 = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package5());
    var client_sts_1 = require_dist_cjs49();
    var config_resolver_1 = require_dist_cjs3();
    var credential_provider_node_1 = require_dist_cjs48();
    var hash_node_1 = require_dist_cjs33();
    var middleware_retry_1 = require_dist_cjs15();
    var node_config_provider_1 = require_dist_cjs30();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs36();
    var util_retry_1 = require_dist_cjs14();
    var util_user_agent_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared5();
    var smithy_client_1 = require_dist_cjs26();
    var util_defaults_mode_node_1 = require_dist_cjs41();
    var smithy_client_2 = require_dist_cjs26();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/LambdaClient.js
var require_LambdaClient = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/LambdaClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LambdaClient = void 0;
    var config_resolver_1 = require_dist_cjs3();
    var middleware_content_length_1 = require_dist_cjs5();
    var middleware_endpoint_1 = require_dist_cjs9();
    var middleware_host_header_1 = require_dist_cjs10();
    var middleware_logger_1 = require_dist_cjs11();
    var middleware_recursion_detection_1 = require_dist_cjs12();
    var middleware_retry_1 = require_dist_cjs15();
    var middleware_signing_1 = require_dist_cjs23();
    var middleware_user_agent_1 = require_dist_cjs24();
    var smithy_client_1 = require_dist_cjs26();
    var EndpointParameters_1 = require_EndpointParameters5();
    var runtimeConfig_1 = require_runtimeConfig5();
    var LambdaClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.LambdaClient = LambdaClient;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/Lambda.js
var require_Lambda = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/Lambda.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Lambda = void 0;
    var AddLayerVersionPermissionCommand_1 = require_AddLayerVersionPermissionCommand();
    var AddPermissionCommand_1 = require_AddPermissionCommand();
    var CreateAliasCommand_1 = require_CreateAliasCommand();
    var CreateCodeSigningConfigCommand_1 = require_CreateCodeSigningConfigCommand();
    var CreateEventSourceMappingCommand_1 = require_CreateEventSourceMappingCommand();
    var CreateFunctionCommand_1 = require_CreateFunctionCommand();
    var CreateFunctionUrlConfigCommand_1 = require_CreateFunctionUrlConfigCommand();
    var DeleteAliasCommand_1 = require_DeleteAliasCommand();
    var DeleteCodeSigningConfigCommand_1 = require_DeleteCodeSigningConfigCommand();
    var DeleteEventSourceMappingCommand_1 = require_DeleteEventSourceMappingCommand();
    var DeleteFunctionCodeSigningConfigCommand_1 = require_DeleteFunctionCodeSigningConfigCommand();
    var DeleteFunctionCommand_1 = require_DeleteFunctionCommand();
    var DeleteFunctionConcurrencyCommand_1 = require_DeleteFunctionConcurrencyCommand();
    var DeleteFunctionEventInvokeConfigCommand_1 = require_DeleteFunctionEventInvokeConfigCommand();
    var DeleteFunctionUrlConfigCommand_1 = require_DeleteFunctionUrlConfigCommand();
    var DeleteLayerVersionCommand_1 = require_DeleteLayerVersionCommand();
    var DeleteProvisionedConcurrencyConfigCommand_1 = require_DeleteProvisionedConcurrencyConfigCommand();
    var GetAccountSettingsCommand_1 = require_GetAccountSettingsCommand();
    var GetAliasCommand_1 = require_GetAliasCommand();
    var GetCodeSigningConfigCommand_1 = require_GetCodeSigningConfigCommand();
    var GetEventSourceMappingCommand_1 = require_GetEventSourceMappingCommand();
    var GetFunctionCodeSigningConfigCommand_1 = require_GetFunctionCodeSigningConfigCommand();
    var GetFunctionCommand_1 = require_GetFunctionCommand();
    var GetFunctionConcurrencyCommand_1 = require_GetFunctionConcurrencyCommand();
    var GetFunctionConfigurationCommand_1 = require_GetFunctionConfigurationCommand();
    var GetFunctionEventInvokeConfigCommand_1 = require_GetFunctionEventInvokeConfigCommand();
    var GetFunctionUrlConfigCommand_1 = require_GetFunctionUrlConfigCommand();
    var GetLayerVersionByArnCommand_1 = require_GetLayerVersionByArnCommand();
    var GetLayerVersionCommand_1 = require_GetLayerVersionCommand();
    var GetLayerVersionPolicyCommand_1 = require_GetLayerVersionPolicyCommand();
    var GetPolicyCommand_1 = require_GetPolicyCommand();
    var GetProvisionedConcurrencyConfigCommand_1 = require_GetProvisionedConcurrencyConfigCommand();
    var GetRuntimeManagementConfigCommand_1 = require_GetRuntimeManagementConfigCommand();
    var InvokeAsyncCommand_1 = require_InvokeAsyncCommand();
    var InvokeCommand_1 = require_InvokeCommand();
    var ListAliasesCommand_1 = require_ListAliasesCommand();
    var ListCodeSigningConfigsCommand_1 = require_ListCodeSigningConfigsCommand();
    var ListEventSourceMappingsCommand_1 = require_ListEventSourceMappingsCommand();
    var ListFunctionEventInvokeConfigsCommand_1 = require_ListFunctionEventInvokeConfigsCommand();
    var ListFunctionsByCodeSigningConfigCommand_1 = require_ListFunctionsByCodeSigningConfigCommand();
    var ListFunctionsCommand_1 = require_ListFunctionsCommand();
    var ListFunctionUrlConfigsCommand_1 = require_ListFunctionUrlConfigsCommand();
    var ListLayersCommand_1 = require_ListLayersCommand();
    var ListLayerVersionsCommand_1 = require_ListLayerVersionsCommand();
    var ListProvisionedConcurrencyConfigsCommand_1 = require_ListProvisionedConcurrencyConfigsCommand();
    var ListTagsCommand_1 = require_ListTagsCommand();
    var ListVersionsByFunctionCommand_1 = require_ListVersionsByFunctionCommand();
    var PublishLayerVersionCommand_1 = require_PublishLayerVersionCommand();
    var PublishVersionCommand_1 = require_PublishVersionCommand();
    var PutFunctionCodeSigningConfigCommand_1 = require_PutFunctionCodeSigningConfigCommand();
    var PutFunctionConcurrencyCommand_1 = require_PutFunctionConcurrencyCommand();
    var PutFunctionEventInvokeConfigCommand_1 = require_PutFunctionEventInvokeConfigCommand();
    var PutProvisionedConcurrencyConfigCommand_1 = require_PutProvisionedConcurrencyConfigCommand();
    var PutRuntimeManagementConfigCommand_1 = require_PutRuntimeManagementConfigCommand();
    var RemoveLayerVersionPermissionCommand_1 = require_RemoveLayerVersionPermissionCommand();
    var RemovePermissionCommand_1 = require_RemovePermissionCommand();
    var TagResourceCommand_1 = require_TagResourceCommand2();
    var UntagResourceCommand_1 = require_UntagResourceCommand2();
    var UpdateAliasCommand_1 = require_UpdateAliasCommand();
    var UpdateCodeSigningConfigCommand_1 = require_UpdateCodeSigningConfigCommand();
    var UpdateEventSourceMappingCommand_1 = require_UpdateEventSourceMappingCommand();
    var UpdateFunctionCodeCommand_1 = require_UpdateFunctionCodeCommand();
    var UpdateFunctionConfigurationCommand_1 = require_UpdateFunctionConfigurationCommand();
    var UpdateFunctionEventInvokeConfigCommand_1 = require_UpdateFunctionEventInvokeConfigCommand();
    var UpdateFunctionUrlConfigCommand_1 = require_UpdateFunctionUrlConfigCommand();
    var LambdaClient_1 = require_LambdaClient();
    var Lambda = class extends LambdaClient_1.LambdaClient {
      addLayerVersionPermission(args, optionsOrCb, cb) {
        const command = new AddLayerVersionPermissionCommand_1.AddLayerVersionPermissionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      addPermission(args, optionsOrCb, cb) {
        const command = new AddPermissionCommand_1.AddPermissionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createAlias(args, optionsOrCb, cb) {
        const command = new CreateAliasCommand_1.CreateAliasCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createCodeSigningConfig(args, optionsOrCb, cb) {
        const command = new CreateCodeSigningConfigCommand_1.CreateCodeSigningConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createEventSourceMapping(args, optionsOrCb, cb) {
        const command = new CreateEventSourceMappingCommand_1.CreateEventSourceMappingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createFunction(args, optionsOrCb, cb) {
        const command = new CreateFunctionCommand_1.CreateFunctionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createFunctionUrlConfig(args, optionsOrCb, cb) {
        const command = new CreateFunctionUrlConfigCommand_1.CreateFunctionUrlConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteAlias(args, optionsOrCb, cb) {
        const command = new DeleteAliasCommand_1.DeleteAliasCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteCodeSigningConfig(args, optionsOrCb, cb) {
        const command = new DeleteCodeSigningConfigCommand_1.DeleteCodeSigningConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteEventSourceMapping(args, optionsOrCb, cb) {
        const command = new DeleteEventSourceMappingCommand_1.DeleteEventSourceMappingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteFunction(args, optionsOrCb, cb) {
        const command = new DeleteFunctionCommand_1.DeleteFunctionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteFunctionCodeSigningConfig(args, optionsOrCb, cb) {
        const command = new DeleteFunctionCodeSigningConfigCommand_1.DeleteFunctionCodeSigningConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteFunctionConcurrency(args, optionsOrCb, cb) {
        const command = new DeleteFunctionConcurrencyCommand_1.DeleteFunctionConcurrencyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteFunctionEventInvokeConfig(args, optionsOrCb, cb) {
        const command = new DeleteFunctionEventInvokeConfigCommand_1.DeleteFunctionEventInvokeConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteFunctionUrlConfig(args, optionsOrCb, cb) {
        const command = new DeleteFunctionUrlConfigCommand_1.DeleteFunctionUrlConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteLayerVersion(args, optionsOrCb, cb) {
        const command = new DeleteLayerVersionCommand_1.DeleteLayerVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteProvisionedConcurrencyConfig(args, optionsOrCb, cb) {
        const command = new DeleteProvisionedConcurrencyConfigCommand_1.DeleteProvisionedConcurrencyConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAccountSettings(args, optionsOrCb, cb) {
        const command = new GetAccountSettingsCommand_1.GetAccountSettingsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAlias(args, optionsOrCb, cb) {
        const command = new GetAliasCommand_1.GetAliasCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCodeSigningConfig(args, optionsOrCb, cb) {
        const command = new GetCodeSigningConfigCommand_1.GetCodeSigningConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getEventSourceMapping(args, optionsOrCb, cb) {
        const command = new GetEventSourceMappingCommand_1.GetEventSourceMappingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFunction(args, optionsOrCb, cb) {
        const command = new GetFunctionCommand_1.GetFunctionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFunctionCodeSigningConfig(args, optionsOrCb, cb) {
        const command = new GetFunctionCodeSigningConfigCommand_1.GetFunctionCodeSigningConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFunctionConcurrency(args, optionsOrCb, cb) {
        const command = new GetFunctionConcurrencyCommand_1.GetFunctionConcurrencyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFunctionConfiguration(args, optionsOrCb, cb) {
        const command = new GetFunctionConfigurationCommand_1.GetFunctionConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFunctionEventInvokeConfig(args, optionsOrCb, cb) {
        const command = new GetFunctionEventInvokeConfigCommand_1.GetFunctionEventInvokeConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFunctionUrlConfig(args, optionsOrCb, cb) {
        const command = new GetFunctionUrlConfigCommand_1.GetFunctionUrlConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getLayerVersion(args, optionsOrCb, cb) {
        const command = new GetLayerVersionCommand_1.GetLayerVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getLayerVersionByArn(args, optionsOrCb, cb) {
        const command = new GetLayerVersionByArnCommand_1.GetLayerVersionByArnCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getLayerVersionPolicy(args, optionsOrCb, cb) {
        const command = new GetLayerVersionPolicyCommand_1.GetLayerVersionPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getPolicy(args, optionsOrCb, cb) {
        const command = new GetPolicyCommand_1.GetPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getProvisionedConcurrencyConfig(args, optionsOrCb, cb) {
        const command = new GetProvisionedConcurrencyConfigCommand_1.GetProvisionedConcurrencyConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getRuntimeManagementConfig(args, optionsOrCb, cb) {
        const command = new GetRuntimeManagementConfigCommand_1.GetRuntimeManagementConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      invoke(args, optionsOrCb, cb) {
        const command = new InvokeCommand_1.InvokeCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      invokeAsync(args, optionsOrCb, cb) {
        const command = new InvokeAsyncCommand_1.InvokeAsyncCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAliases(args, optionsOrCb, cb) {
        const command = new ListAliasesCommand_1.ListAliasesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listCodeSigningConfigs(args, optionsOrCb, cb) {
        const command = new ListCodeSigningConfigsCommand_1.ListCodeSigningConfigsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listEventSourceMappings(args, optionsOrCb, cb) {
        const command = new ListEventSourceMappingsCommand_1.ListEventSourceMappingsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listFunctionEventInvokeConfigs(args, optionsOrCb, cb) {
        const command = new ListFunctionEventInvokeConfigsCommand_1.ListFunctionEventInvokeConfigsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listFunctions(args, optionsOrCb, cb) {
        const command = new ListFunctionsCommand_1.ListFunctionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listFunctionsByCodeSigningConfig(args, optionsOrCb, cb) {
        const command = new ListFunctionsByCodeSigningConfigCommand_1.ListFunctionsByCodeSigningConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listFunctionUrlConfigs(args, optionsOrCb, cb) {
        const command = new ListFunctionUrlConfigsCommand_1.ListFunctionUrlConfigsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listLayers(args, optionsOrCb, cb) {
        const command = new ListLayersCommand_1.ListLayersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listLayerVersions(args, optionsOrCb, cb) {
        const command = new ListLayerVersionsCommand_1.ListLayerVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listProvisionedConcurrencyConfigs(args, optionsOrCb, cb) {
        const command = new ListProvisionedConcurrencyConfigsCommand_1.ListProvisionedConcurrencyConfigsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listTags(args, optionsOrCb, cb) {
        const command = new ListTagsCommand_1.ListTagsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listVersionsByFunction(args, optionsOrCb, cb) {
        const command = new ListVersionsByFunctionCommand_1.ListVersionsByFunctionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      publishLayerVersion(args, optionsOrCb, cb) {
        const command = new PublishLayerVersionCommand_1.PublishLayerVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      publishVersion(args, optionsOrCb, cb) {
        const command = new PublishVersionCommand_1.PublishVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putFunctionCodeSigningConfig(args, optionsOrCb, cb) {
        const command = new PutFunctionCodeSigningConfigCommand_1.PutFunctionCodeSigningConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putFunctionConcurrency(args, optionsOrCb, cb) {
        const command = new PutFunctionConcurrencyCommand_1.PutFunctionConcurrencyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putFunctionEventInvokeConfig(args, optionsOrCb, cb) {
        const command = new PutFunctionEventInvokeConfigCommand_1.PutFunctionEventInvokeConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putProvisionedConcurrencyConfig(args, optionsOrCb, cb) {
        const command = new PutProvisionedConcurrencyConfigCommand_1.PutProvisionedConcurrencyConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putRuntimeManagementConfig(args, optionsOrCb, cb) {
        const command = new PutRuntimeManagementConfigCommand_1.PutRuntimeManagementConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      removeLayerVersionPermission(args, optionsOrCb, cb) {
        const command = new RemoveLayerVersionPermissionCommand_1.RemoveLayerVersionPermissionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      removePermission(args, optionsOrCb, cb) {
        const command = new RemovePermissionCommand_1.RemovePermissionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      tagResource(args, optionsOrCb, cb) {
        const command = new TagResourceCommand_1.TagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      untagResource(args, optionsOrCb, cb) {
        const command = new UntagResourceCommand_1.UntagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateAlias(args, optionsOrCb, cb) {
        const command = new UpdateAliasCommand_1.UpdateAliasCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateCodeSigningConfig(args, optionsOrCb, cb) {
        const command = new UpdateCodeSigningConfigCommand_1.UpdateCodeSigningConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateEventSourceMapping(args, optionsOrCb, cb) {
        const command = new UpdateEventSourceMappingCommand_1.UpdateEventSourceMappingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateFunctionCode(args, optionsOrCb, cb) {
        const command = new UpdateFunctionCodeCommand_1.UpdateFunctionCodeCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateFunctionConfiguration(args, optionsOrCb, cb) {
        const command = new UpdateFunctionConfigurationCommand_1.UpdateFunctionConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateFunctionEventInvokeConfig(args, optionsOrCb, cb) {
        const command = new UpdateFunctionEventInvokeConfigCommand_1.UpdateFunctionEventInvokeConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateFunctionUrlConfig(args, optionsOrCb, cb) {
        const command = new UpdateFunctionUrlConfigCommand_1.UpdateFunctionUrlConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports2.Lambda = Lambda;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/commands/index.js
var require_commands5 = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AddLayerVersionPermissionCommand(), exports2);
    tslib_1.__exportStar(require_AddPermissionCommand(), exports2);
    tslib_1.__exportStar(require_CreateAliasCommand(), exports2);
    tslib_1.__exportStar(require_CreateCodeSigningConfigCommand(), exports2);
    tslib_1.__exportStar(require_CreateEventSourceMappingCommand(), exports2);
    tslib_1.__exportStar(require_CreateFunctionCommand(), exports2);
    tslib_1.__exportStar(require_CreateFunctionUrlConfigCommand(), exports2);
    tslib_1.__exportStar(require_DeleteAliasCommand(), exports2);
    tslib_1.__exportStar(require_DeleteCodeSigningConfigCommand(), exports2);
    tslib_1.__exportStar(require_DeleteEventSourceMappingCommand(), exports2);
    tslib_1.__exportStar(require_DeleteFunctionCodeSigningConfigCommand(), exports2);
    tslib_1.__exportStar(require_DeleteFunctionCommand(), exports2);
    tslib_1.__exportStar(require_DeleteFunctionConcurrencyCommand(), exports2);
    tslib_1.__exportStar(require_DeleteFunctionEventInvokeConfigCommand(), exports2);
    tslib_1.__exportStar(require_DeleteFunctionUrlConfigCommand(), exports2);
    tslib_1.__exportStar(require_DeleteLayerVersionCommand(), exports2);
    tslib_1.__exportStar(require_DeleteProvisionedConcurrencyConfigCommand(), exports2);
    tslib_1.__exportStar(require_GetAccountSettingsCommand(), exports2);
    tslib_1.__exportStar(require_GetAliasCommand(), exports2);
    tslib_1.__exportStar(require_GetCodeSigningConfigCommand(), exports2);
    tslib_1.__exportStar(require_GetEventSourceMappingCommand(), exports2);
    tslib_1.__exportStar(require_GetFunctionCodeSigningConfigCommand(), exports2);
    tslib_1.__exportStar(require_GetFunctionCommand(), exports2);
    tslib_1.__exportStar(require_GetFunctionConcurrencyCommand(), exports2);
    tslib_1.__exportStar(require_GetFunctionConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_GetFunctionEventInvokeConfigCommand(), exports2);
    tslib_1.__exportStar(require_GetFunctionUrlConfigCommand(), exports2);
    tslib_1.__exportStar(require_GetLayerVersionByArnCommand(), exports2);
    tslib_1.__exportStar(require_GetLayerVersionCommand(), exports2);
    tslib_1.__exportStar(require_GetLayerVersionPolicyCommand(), exports2);
    tslib_1.__exportStar(require_GetPolicyCommand(), exports2);
    tslib_1.__exportStar(require_GetProvisionedConcurrencyConfigCommand(), exports2);
    tslib_1.__exportStar(require_GetRuntimeManagementConfigCommand(), exports2);
    tslib_1.__exportStar(require_InvokeAsyncCommand(), exports2);
    tslib_1.__exportStar(require_InvokeCommand(), exports2);
    tslib_1.__exportStar(require_ListAliasesCommand(), exports2);
    tslib_1.__exportStar(require_ListCodeSigningConfigsCommand(), exports2);
    tslib_1.__exportStar(require_ListEventSourceMappingsCommand(), exports2);
    tslib_1.__exportStar(require_ListFunctionEventInvokeConfigsCommand(), exports2);
    tslib_1.__exportStar(require_ListFunctionUrlConfigsCommand(), exports2);
    tslib_1.__exportStar(require_ListFunctionsByCodeSigningConfigCommand(), exports2);
    tslib_1.__exportStar(require_ListFunctionsCommand(), exports2);
    tslib_1.__exportStar(require_ListLayerVersionsCommand(), exports2);
    tslib_1.__exportStar(require_ListLayersCommand(), exports2);
    tslib_1.__exportStar(require_ListProvisionedConcurrencyConfigsCommand(), exports2);
    tslib_1.__exportStar(require_ListTagsCommand(), exports2);
    tslib_1.__exportStar(require_ListVersionsByFunctionCommand(), exports2);
    tslib_1.__exportStar(require_PublishLayerVersionCommand(), exports2);
    tslib_1.__exportStar(require_PublishVersionCommand(), exports2);
    tslib_1.__exportStar(require_PutFunctionCodeSigningConfigCommand(), exports2);
    tslib_1.__exportStar(require_PutFunctionConcurrencyCommand(), exports2);
    tslib_1.__exportStar(require_PutFunctionEventInvokeConfigCommand(), exports2);
    tslib_1.__exportStar(require_PutProvisionedConcurrencyConfigCommand(), exports2);
    tslib_1.__exportStar(require_PutRuntimeManagementConfigCommand(), exports2);
    tslib_1.__exportStar(require_RemoveLayerVersionPermissionCommand(), exports2);
    tslib_1.__exportStar(require_RemovePermissionCommand(), exports2);
    tslib_1.__exportStar(require_TagResourceCommand2(), exports2);
    tslib_1.__exportStar(require_UntagResourceCommand2(), exports2);
    tslib_1.__exportStar(require_UpdateAliasCommand(), exports2);
    tslib_1.__exportStar(require_UpdateCodeSigningConfigCommand(), exports2);
    tslib_1.__exportStar(require_UpdateEventSourceMappingCommand(), exports2);
    tslib_1.__exportStar(require_UpdateFunctionCodeCommand(), exports2);
    tslib_1.__exportStar(require_UpdateFunctionConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_UpdateFunctionEventInvokeConfigCommand(), exports2);
    tslib_1.__exportStar(require_UpdateFunctionUrlConfigCommand(), exports2);
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/models/index.js
var require_models5 = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_05(), exports2);
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/Interfaces.js
var require_Interfaces3 = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/Interfaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListAliasesPaginator.js
var require_ListAliasesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListAliasesPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListAliases = void 0;
    var ListAliasesCommand_1 = require_ListAliasesCommand();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAliasesCommand_1.ListAliasesCommand(input), ...args);
    };
    async function* paginateListAliases(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListAliases = paginateListAliases;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListCodeSigningConfigsPaginator.js
var require_ListCodeSigningConfigsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListCodeSigningConfigsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListCodeSigningConfigs = void 0;
    var ListCodeSigningConfigsCommand_1 = require_ListCodeSigningConfigsCommand();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListCodeSigningConfigsCommand_1.ListCodeSigningConfigsCommand(input), ...args);
    };
    async function* paginateListCodeSigningConfigs(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListCodeSigningConfigs = paginateListCodeSigningConfigs;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListEventSourceMappingsPaginator.js
var require_ListEventSourceMappingsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListEventSourceMappingsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListEventSourceMappings = void 0;
    var ListEventSourceMappingsCommand_1 = require_ListEventSourceMappingsCommand();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListEventSourceMappingsCommand_1.ListEventSourceMappingsCommand(input), ...args);
    };
    async function* paginateListEventSourceMappings(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListEventSourceMappings = paginateListEventSourceMappings;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListFunctionEventInvokeConfigsPaginator.js
var require_ListFunctionEventInvokeConfigsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListFunctionEventInvokeConfigsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListFunctionEventInvokeConfigs = void 0;
    var ListFunctionEventInvokeConfigsCommand_1 = require_ListFunctionEventInvokeConfigsCommand();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListFunctionEventInvokeConfigsCommand_1.ListFunctionEventInvokeConfigsCommand(input), ...args);
    };
    async function* paginateListFunctionEventInvokeConfigs(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListFunctionEventInvokeConfigs = paginateListFunctionEventInvokeConfigs;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListFunctionUrlConfigsPaginator.js
var require_ListFunctionUrlConfigsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListFunctionUrlConfigsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListFunctionUrlConfigs = void 0;
    var ListFunctionUrlConfigsCommand_1 = require_ListFunctionUrlConfigsCommand();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListFunctionUrlConfigsCommand_1.ListFunctionUrlConfigsCommand(input), ...args);
    };
    async function* paginateListFunctionUrlConfigs(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListFunctionUrlConfigs = paginateListFunctionUrlConfigs;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListFunctionsByCodeSigningConfigPaginator.js
var require_ListFunctionsByCodeSigningConfigPaginator = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListFunctionsByCodeSigningConfigPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListFunctionsByCodeSigningConfig = void 0;
    var ListFunctionsByCodeSigningConfigCommand_1 = require_ListFunctionsByCodeSigningConfigCommand();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListFunctionsByCodeSigningConfigCommand_1.ListFunctionsByCodeSigningConfigCommand(input), ...args);
    };
    async function* paginateListFunctionsByCodeSigningConfig(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListFunctionsByCodeSigningConfig = paginateListFunctionsByCodeSigningConfig;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListFunctionsPaginator.js
var require_ListFunctionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListFunctionsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListFunctions = void 0;
    var ListFunctionsCommand_1 = require_ListFunctionsCommand();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListFunctionsCommand_1.ListFunctionsCommand(input), ...args);
    };
    async function* paginateListFunctions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListFunctions = paginateListFunctions;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListLayerVersionsPaginator.js
var require_ListLayerVersionsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListLayerVersionsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListLayerVersions = void 0;
    var ListLayerVersionsCommand_1 = require_ListLayerVersionsCommand();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListLayerVersionsCommand_1.ListLayerVersionsCommand(input), ...args);
    };
    async function* paginateListLayerVersions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListLayerVersions = paginateListLayerVersions;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListLayersPaginator.js
var require_ListLayersPaginator = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListLayersPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListLayers = void 0;
    var ListLayersCommand_1 = require_ListLayersCommand();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListLayersCommand_1.ListLayersCommand(input), ...args);
    };
    async function* paginateListLayers(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListLayers = paginateListLayers;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListProvisionedConcurrencyConfigsPaginator.js
var require_ListProvisionedConcurrencyConfigsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListProvisionedConcurrencyConfigsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListProvisionedConcurrencyConfigs = void 0;
    var ListProvisionedConcurrencyConfigsCommand_1 = require_ListProvisionedConcurrencyConfigsCommand();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListProvisionedConcurrencyConfigsCommand_1.ListProvisionedConcurrencyConfigsCommand(input), ...args);
    };
    async function* paginateListProvisionedConcurrencyConfigs(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListProvisionedConcurrencyConfigs = paginateListProvisionedConcurrencyConfigs;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListVersionsByFunctionPaginator.js
var require_ListVersionsByFunctionPaginator = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListVersionsByFunctionPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListVersionsByFunction = void 0;
    var ListVersionsByFunctionCommand_1 = require_ListVersionsByFunctionCommand();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListVersionsByFunctionCommand_1.ListVersionsByFunctionCommand(input), ...args);
    };
    async function* paginateListVersionsByFunction(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListVersionsByFunction = paginateListVersionsByFunction;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/index.js
var require_pagination4 = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces3(), exports2);
    tslib_1.__exportStar(require_ListAliasesPaginator(), exports2);
    tslib_1.__exportStar(require_ListCodeSigningConfigsPaginator(), exports2);
    tslib_1.__exportStar(require_ListEventSourceMappingsPaginator(), exports2);
    tslib_1.__exportStar(require_ListFunctionEventInvokeConfigsPaginator(), exports2);
    tslib_1.__exportStar(require_ListFunctionUrlConfigsPaginator(), exports2);
    tslib_1.__exportStar(require_ListFunctionsByCodeSigningConfigPaginator(), exports2);
    tslib_1.__exportStar(require_ListFunctionsPaginator(), exports2);
    tslib_1.__exportStar(require_ListLayerVersionsPaginator(), exports2);
    tslib_1.__exportStar(require_ListLayersPaginator(), exports2);
    tslib_1.__exportStar(require_ListProvisionedConcurrencyConfigsPaginator(), exports2);
    tslib_1.__exportStar(require_ListVersionsByFunctionPaginator(), exports2);
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionActive.js
var require_waitForFunctionActive = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionActive.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilFunctionActive = exports2.waitForFunctionActive = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var GetFunctionConfigurationCommand_1 = require_GetFunctionConfigurationCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetFunctionConfigurationCommand_1.GetFunctionConfigurationCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.State;
          };
          if (returnComparator() === "Active") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.State;
          };
          if (returnComparator() === "Failed") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.State;
          };
          if (returnComparator() === "Pending") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForFunctionActive = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForFunctionActive = waitForFunctionActive;
    var waitUntilFunctionActive = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilFunctionActive = waitUntilFunctionActive;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionActiveV2.js
var require_waitForFunctionActiveV2 = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionActiveV2.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilFunctionActiveV2 = exports2.waitForFunctionActiveV2 = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var GetFunctionCommand_1 = require_GetFunctionCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetFunctionCommand_1.GetFunctionCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.Configuration.State;
          };
          if (returnComparator() === "Active") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Configuration.State;
          };
          if (returnComparator() === "Failed") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Configuration.State;
          };
          if (returnComparator() === "Pending") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForFunctionActiveV2 = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForFunctionActiveV2 = waitForFunctionActiveV2;
    var waitUntilFunctionActiveV2 = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilFunctionActiveV2 = waitUntilFunctionActiveV2;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionExists.js
var require_waitForFunctionExists = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionExists.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilFunctionExists = exports2.waitForFunctionExists = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var GetFunctionCommand_1 = require_GetFunctionCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetFunctionCommand_1.GetFunctionCommand(input));
        reason = result;
        return { state: util_waiter_1.WaiterState.SUCCESS, reason };
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ResourceNotFoundException") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForFunctionExists = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForFunctionExists = waitForFunctionExists;
    var waitUntilFunctionExists = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilFunctionExists = waitUntilFunctionExists;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionUpdated.js
var require_waitForFunctionUpdated = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionUpdated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilFunctionUpdated = exports2.waitForFunctionUpdated = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var GetFunctionConfigurationCommand_1 = require_GetFunctionConfigurationCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetFunctionConfigurationCommand_1.GetFunctionConfigurationCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.LastUpdateStatus;
          };
          if (returnComparator() === "Successful") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.LastUpdateStatus;
          };
          if (returnComparator() === "Failed") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.LastUpdateStatus;
          };
          if (returnComparator() === "InProgress") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForFunctionUpdated = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForFunctionUpdated = waitForFunctionUpdated;
    var waitUntilFunctionUpdated = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilFunctionUpdated = waitUntilFunctionUpdated;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionUpdatedV2.js
var require_waitForFunctionUpdatedV2 = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionUpdatedV2.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilFunctionUpdatedV2 = exports2.waitForFunctionUpdatedV2 = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var GetFunctionCommand_1 = require_GetFunctionCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetFunctionCommand_1.GetFunctionCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.Configuration.LastUpdateStatus;
          };
          if (returnComparator() === "Successful") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Configuration.LastUpdateStatus;
          };
          if (returnComparator() === "Failed") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Configuration.LastUpdateStatus;
          };
          if (returnComparator() === "InProgress") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForFunctionUpdatedV2 = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForFunctionUpdatedV2 = waitForFunctionUpdatedV2;
    var waitUntilFunctionUpdatedV2 = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilFunctionUpdatedV2 = waitUntilFunctionUpdatedV2;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForPublishedVersionActive.js
var require_waitForPublishedVersionActive = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForPublishedVersionActive.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilPublishedVersionActive = exports2.waitForPublishedVersionActive = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var GetFunctionConfigurationCommand_1 = require_GetFunctionConfigurationCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetFunctionConfigurationCommand_1.GetFunctionConfigurationCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.State;
          };
          if (returnComparator() === "Active") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.State;
          };
          if (returnComparator() === "Failed") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.State;
          };
          if (returnComparator() === "Pending") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForPublishedVersionActive = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForPublishedVersionActive = waitForPublishedVersionActive;
    var waitUntilPublishedVersionActive = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilPublishedVersionActive = waitUntilPublishedVersionActive;
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/index.js
var require_waiters2 = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_waitForFunctionActive(), exports2);
    tslib_1.__exportStar(require_waitForFunctionActiveV2(), exports2);
    tslib_1.__exportStar(require_waitForFunctionExists(), exports2);
    tslib_1.__exportStar(require_waitForFunctionUpdated(), exports2);
    tslib_1.__exportStar(require_waitForFunctionUpdatedV2(), exports2);
    tslib_1.__exportStar(require_waitForPublishedVersionActive(), exports2);
  }
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/index.js
var require_dist_cjs52 = __commonJS({
  "node_modules/@aws-sdk/client-lambda/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LambdaServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Lambda(), exports2);
    tslib_1.__exportStar(require_LambdaClient(), exports2);
    tslib_1.__exportStar(require_commands5(), exports2);
    tslib_1.__exportStar(require_models5(), exports2);
    tslib_1.__exportStar(require_pagination4(), exports2);
    tslib_1.__exportStar(require_waiters2(), exports2);
    var LambdaServiceException_1 = require_LambdaServiceException();
    Object.defineProperty(exports2, "LambdaServiceException", { enumerable: true, get: function() {
      return LambdaServiceException_1.LambdaServiceException;
    } });
  }
});

// node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js
var require_dist_cjs53 = __commonJS({
  "node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8 = exports2.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs19();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports2.fromUtf8 = fromUtf8;
    var toUtf8 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    exports2.toUtf8 = toUtf8;
  }
});

// lib/hooks.js
Object.defineProperty(exports, "__esModule", { value: true });
exports.pre = void 0;
var client_codedeploy_1 = require_dist_cjs51();
var client_lambda_1 = require_dist_cjs52();
var util_utf8_node_1 = require_dist_cjs53();
var codeDeploy = new client_codedeploy_1.CodeDeployClient({
  apiVersion: "2014-10-06",
  maxAttempts: 5
});
var lambda = new client_lambda_1.LambdaClient({
  apiVersion: "2015-03-31",
  maxAttempts: 5
});
var smokeTestLambdaFunction = async () => {
  const functionName = process.env.FUNCTION_NAME_TO_INVOKE;
  if (!functionName) {
    console.error("Missing process.env.FUNCTION_NAME_TO_INVOKE");
    return "Failed";
  }
  console.info("Function:", functionName);
  const response = await lambda.send(new client_lambda_1.InvokeCommand({
    FunctionName: functionName,
    InvocationType: "RequestResponse",
    Payload: Buffer.from("{}")
  }));
  console.info("Version:", response.ExecutedVersion ?? "?");
  console.info("Status", response.StatusCode ?? "?");
  if (response.FunctionError) {
    console.error("Error:", response.FunctionError);
    if (response.Payload) {
      console.error((0, util_utf8_node_1.toUtf8)(response.Payload));
    }
    return "Failed";
  }
  return response.StatusCode === 200 ? "Succeeded" : "Failed";
};
var pre = async (event) => {
  let status;
  try {
    status = await smokeTestLambdaFunction();
  } catch (err) {
    console.error("Exception:", err);
    status = "Failed";
  }
  await codeDeploy.send(new client_codedeploy_1.PutLifecycleEventHookExecutionStatusCommand({
    deploymentId: event.DeploymentId,
    lifecycleEventHookExecutionId: event.LifecycleEventHookExecutionId,
    status
  }));
};
exports.pre = pre;
//# sourceMappingURL=hooks.js.map
