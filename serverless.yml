service: raph-monkey

configValidationMode: error

params:
  default:
    description: A serverless slackbot
  dev:
    isProduction: false
  prod:
    isProduction: true

custom:
  prune:
    automatic: true
    number: 3
  esbuild:
    sourcemap: true

plugins:
  - serverless-esbuild
  - serverless-plugin-canary-deployments
  - serverless-prune-plugin
  - serverless-offline

provider:
  logRetentionInDays: 30
  name: aws
  region: ap-southeast-2
  runtime: nodejs18.x
  architecture: arm64
  deploymentMethod: direct
  stackName: ${self:service}
  stage: ${env:ENVIRONMENT}
  environment:
    NODE_ENV: production
    # https://nodejs.org/api/cli.html#cli_node_options_options
    NODE_OPTIONS: --enable-source-maps
  iam:
    role:
      statements:
        - Action: lambda:InvokeFunction
          Effect: Allow
          Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:functions.Worker.name}
        - Effect: Allow
          Action: # Gives permission to DynamoDB tables in a specific region
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource: !Sub ${guesses.Arn}
  stackTags:
    # TODO: add data classification tags
    # https://rfc.skinfra.xyz/RFC019-AWS-Tagging-Standard.html#seekdataconsumers
    # seek:data:consumers: internal
    # https://rfc.skinfra.xyz/RFC019-AWS-Tagging-Standard.html#seekdatatypes
    # seek:data:types:restricted: job-ads
    seek:env:label: ${env:ENVIRONMENT}
    seek:env:production: ${param:isProduction}
    seek:owner:team: 'Athena'
    seek:source:sha: ${env:BUILDKITE_COMMIT, 'na'}
    seek:source:url: 'https://github.com/SEEK-Jobs/raph-monkey'

functions:
  Worker:
    name: ${self:service}
    handler: src/app.handler
    description: ${param:description}
    memorySize: 128
    reservedConcurrency: 20
    timeout: 30
    deploymentSettings:
      type: AllAtOnce
      alias: Live
      preTrafficHook: WorkerPreHook
    environment:
      ENVIRONMENT: ${env:ENVIRONMENT}
      SERVICE: ${self:service}
      VERSION: ${env:VERSION, 'local'}
      RAPH_GUESSES_TABLE: !Ref guesses

    events:
      - httpApi: 'POST /invoke'
  WorkerPreHook:
    name: ${self:functions.Worker.name}-pre-hook
    handler: lib/hooks.pre
    memorySize: 128
    # This is generous because a timeout will hang the deployment
    timeout: 300
    environment:
      FUNCTION_NAME_TO_INVOKE: ${self:functions.Worker.name}
  # WordGenerator:
  #   handler: src/getDailyWord.daily
  #   events:
  #     # 7pm every sunday-thursday UTC (5am every weekday AEST)
  #     - schedule: cron(0 18 ? * SUN-SAT *)

resources:
  # This becomes the Lambda application's description
  Description: ${param:description}

  Resources:
    guesses:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: raph-guesses
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
          - AttributeName: timeStamp
            AttributeType: S
        KeySchema:
          - AttributeName: user
            KeyType: HASH
          - AttributeName: timeStamp
            KeyType: RANGE

package:
  individually: true
